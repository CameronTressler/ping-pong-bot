
PingPongRobot411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028e4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002a7c  08002a7c  00012a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a8c  08002a8c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002a8c  08002a8c  00012a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a94  08002a94  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a94  08002a94  00012a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a98  08002a98  00012a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000000c  08002aa8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08002aa8  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009227  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017bd  00000000  00000000  00029263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  0002aa20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000910  00000000  00000000  0002b3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001414d  00000000  00000000  0002bd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a005  00000000  00000000  0003fe55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087a4e  00000000  00000000  00049e5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d18a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002884  00000000  00000000  000d18f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002a64 	.word	0x08002a64

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002a64 	.word	0x08002a64

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <init_hbridges>:
 */
hbridge_t hbridges[4];


// init all hbridges with PWM of 0
void init_hbridges() {
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
	hbridges[0].CCR = (uint32_t*)(TIM4_OFFSET + TIM_CCR1_OFFSET);
 80004e2:	4b1e      	ldr	r3, [pc, #120]	; (800055c <init_hbridges+0x80>)
 80004e4:	4a1e      	ldr	r2, [pc, #120]	; (8000560 <init_hbridges+0x84>)
 80004e6:	605a      	str	r2, [r3, #4]
	hbridges[0].PWM = 0;
 80004e8:	4b1c      	ldr	r3, [pc, #112]	; (800055c <init_hbridges+0x80>)
 80004ea:	f04f 0200 	mov.w	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
	hbridge_t hbridgelol = hbridges[0];
 80004f0:	4a1a      	ldr	r2, [pc, #104]	; (800055c <init_hbridges+0x80>)
 80004f2:	463b      	mov	r3, r7
 80004f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004f8:	e883 0003 	stmia.w	r3, {r0, r1}

	hbridges[1].CCR = (uint32_t*) (TIM4_OFFSET + TIM_CCR2_OFFSET);
 80004fc:	4b17      	ldr	r3, [pc, #92]	; (800055c <init_hbridges+0x80>)
 80004fe:	4a19      	ldr	r2, [pc, #100]	; (8000564 <init_hbridges+0x88>)
 8000500:	60da      	str	r2, [r3, #12]
	hbridges[1].PWM = 0;
 8000502:	4b16      	ldr	r3, [pc, #88]	; (800055c <init_hbridges+0x80>)
 8000504:	f04f 0200 	mov.w	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
	hbridgelol = hbridges[1];
 800050a:	4a14      	ldr	r2, [pc, #80]	; (800055c <init_hbridges+0x80>)
 800050c:	463b      	mov	r3, r7
 800050e:	3208      	adds	r2, #8
 8000510:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000514:	e883 0003 	stmia.w	r3, {r0, r1}

	hbridges[2].CCR = (uint32_t*) (TIM4_OFFSET + TIM_CCR3_OFFSET);
 8000518:	4b10      	ldr	r3, [pc, #64]	; (800055c <init_hbridges+0x80>)
 800051a:	4a13      	ldr	r2, [pc, #76]	; (8000568 <init_hbridges+0x8c>)
 800051c:	615a      	str	r2, [r3, #20]
	hbridges[2].PWM = 0;
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <init_hbridges+0x80>)
 8000520:	f04f 0200 	mov.w	r2, #0
 8000524:	611a      	str	r2, [r3, #16]
	hbridgelol = hbridges[2];
 8000526:	4a0d      	ldr	r2, [pc, #52]	; (800055c <init_hbridges+0x80>)
 8000528:	463b      	mov	r3, r7
 800052a:	3210      	adds	r2, #16
 800052c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000530:	e883 0003 	stmia.w	r3, {r0, r1}

	hbridges[3].CCR = (uint32_t*) (TIM4_OFFSET + TIM_CCR4_OFFSET);
 8000534:	4b09      	ldr	r3, [pc, #36]	; (800055c <init_hbridges+0x80>)
 8000536:	4a0d      	ldr	r2, [pc, #52]	; (800056c <init_hbridges+0x90>)
 8000538:	61da      	str	r2, [r3, #28]
	hbridges[3].PWM = 0;
 800053a:	4b08      	ldr	r3, [pc, #32]	; (800055c <init_hbridges+0x80>)
 800053c:	f04f 0200 	mov.w	r2, #0
 8000540:	619a      	str	r2, [r3, #24]
	hbridgelol = hbridges[3];
 8000542:	4a06      	ldr	r2, [pc, #24]	; (800055c <init_hbridges+0x80>)
 8000544:	463b      	mov	r3, r7
 8000546:	3218      	adds	r2, #24
 8000548:	e892 0003 	ldmia.w	r2, {r0, r1}
 800054c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	20000028 	.word	0x20000028
 8000560:	40000834 	.word	0x40000834
 8000564:	40000838 	.word	0x40000838
 8000568:	4000083c 	.word	0x4000083c
 800056c:	40000840 	.word	0x40000840

08000570 <set_PWM>:

void set_PWM(hbridge_t hbridge, float PWM) {
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	f107 0308 	add.w	r3, r7, #8
 800057a:	e883 0003 	stmia.w	r3, {r0, r1}
 800057e:	ed87 0a01 	vstr	s0, [r7, #4]
	hbridge.PWM = PWM;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	60bb      	str	r3, [r7, #8]

	*(hbridge.CCR) = (uint32_t)((float) 65335)*PWM;
 8000586:	edd7 7a01 	vldr	s15, [r7, #4]
 800058a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80005ac <set_PWM+0x3c>
 800058e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000598:	ee17 2a90 	vmov	r2, s15
 800059c:	601a      	str	r2, [r3, #0]
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	477f3700 	.word	0x477f3700

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f000 fc49 	bl	8000e4c <HAL_Init>

  /* USER CODE BEGIN Init */

  // Initiliaze ultrasonics.
  for (unsigned int i = 0; i < NUM_ULTRAS; ++i) {
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	e009      	b.n	80005d4 <main+0x24>
	  init_ultra(ultras + i);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	00db      	lsls	r3, r3, #3
 80005c4:	4a3f      	ldr	r2, [pc, #252]	; (80006c4 <main+0x114>)
 80005c6:	4413      	add	r3, r2
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 fbc3 	bl	8000d54 <init_ultra>
  for (unsigned int i = 0; i < NUM_ULTRAS; ++i) {
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	3301      	adds	r3, #1
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d9f2      	bls.n	80005c0 <main+0x10>
  }

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f87b 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 f9d3 	bl	8000988 <MX_GPIO_Init>
  MX_TIM4_Init();
 80005e2:	f000 f957 	bl	8000894 <MX_TIM4_Init>
  MX_TIM3_Init();
 80005e6:	f000 f8df 	bl	80007a8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Start Ultrasonic timer
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80005ea:	2104      	movs	r1, #4
 80005ec:	4836      	ldr	r0, [pc, #216]	; (80006c8 <main+0x118>)
 80005ee:	f001 fc99 	bl	8001f24 <HAL_TIM_PWM_Start>

  // Start hbridge timers
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80005f2:	2100      	movs	r1, #0
 80005f4:	4835      	ldr	r0, [pc, #212]	; (80006cc <main+0x11c>)
 80005f6:	f001 fc95 	bl	8001f24 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80005fa:	2104      	movs	r1, #4
 80005fc:	4833      	ldr	r0, [pc, #204]	; (80006cc <main+0x11c>)
 80005fe:	f001 fc91 	bl	8001f24 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000602:	2108      	movs	r1, #8
 8000604:	4831      	ldr	r0, [pc, #196]	; (80006cc <main+0x11c>)
 8000606:	f001 fc8d 	bl	8001f24 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800060a:	210c      	movs	r1, #12
 800060c:	482f      	ldr	r0, [pc, #188]	; (80006cc <main+0x11c>)
 800060e:	f001 fc89 	bl	8001f24 <HAL_TIM_PWM_Start>

  init_hbridges();
 8000612:	f7ff ff63 	bl	80004dc <init_hbridges>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // hbridge_t hbridgelol = hbridges[0];
	HAL_Delay(50);
 8000616:	2032      	movs	r0, #50	; 0x32
 8000618:	f000 fc8a 	bl	8000f30 <HAL_Delay>
	set_PWM(hbridges[0], 0.5);
 800061c:	4b2c      	ldr	r3, [pc, #176]	; (80006d0 <main+0x120>)
 800061e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8000622:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000626:	f7ff ffa3 	bl	8000570 <set_PWM>
	HAL_Delay(50);
 800062a:	2032      	movs	r0, #50	; 0x32
 800062c:	f000 fc80 	bl	8000f30 <HAL_Delay>
	set_PWM(hbridges[1], 0.5);
 8000630:	4b27      	ldr	r3, [pc, #156]	; (80006d0 <main+0x120>)
 8000632:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8000636:	3308      	adds	r3, #8
 8000638:	e893 0003 	ldmia.w	r3, {r0, r1}
 800063c:	f7ff ff98 	bl	8000570 <set_PWM>
	HAL_Delay(50);
 8000640:	2032      	movs	r0, #50	; 0x32
 8000642:	f000 fc75 	bl	8000f30 <HAL_Delay>
	set_PWM(hbridges[2], 0.5);
 8000646:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <main+0x120>)
 8000648:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800064c:	3310      	adds	r3, #16
 800064e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000652:	f7ff ff8d 	bl	8000570 <set_PWM>
	HAL_Delay(50);
 8000656:	2032      	movs	r0, #50	; 0x32
 8000658:	f000 fc6a 	bl	8000f30 <HAL_Delay>
	set_PWM(hbridges[3], 0.5);
 800065c:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <main+0x120>)
 800065e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8000662:	3318      	adds	r3, #24
 8000664:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000668:	f7ff ff82 	bl	8000570 <set_PWM>
	HAL_Delay(50);
 800066c:	2032      	movs	r0, #50	; 0x32
 800066e:	f000 fc5f 	bl	8000f30 <HAL_Delay>
		set_PWM(hbridges[0], 0.25);
 8000672:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <main+0x120>)
 8000674:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8000678:	e893 0003 	ldmia.w	r3, {r0, r1}
 800067c:	f7ff ff78 	bl	8000570 <set_PWM>
		HAL_Delay(50);
 8000680:	2032      	movs	r0, #50	; 0x32
 8000682:	f000 fc55 	bl	8000f30 <HAL_Delay>
		set_PWM(hbridges[1], 0.25);
 8000686:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <main+0x120>)
 8000688:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 800068c:	3308      	adds	r3, #8
 800068e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000692:	f7ff ff6d 	bl	8000570 <set_PWM>
		HAL_Delay(50);
 8000696:	2032      	movs	r0, #50	; 0x32
 8000698:	f000 fc4a 	bl	8000f30 <HAL_Delay>
		set_PWM(hbridges[2], 0.25);
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <main+0x120>)
 800069e:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 80006a2:	3310      	adds	r3, #16
 80006a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006a8:	f7ff ff62 	bl	8000570 <set_PWM>
		HAL_Delay(50);
 80006ac:	2032      	movs	r0, #50	; 0x32
 80006ae:	f000 fc3f 	bl	8000f30 <HAL_Delay>
		set_PWM(hbridges[3], 0.25);
 80006b2:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <main+0x120>)
 80006b4:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 80006b8:	3318      	adds	r3, #24
 80006ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006be:	f7ff ff57 	bl	8000570 <set_PWM>
	HAL_Delay(50);
 80006c2:	e7a8      	b.n	8000616 <main+0x66>
 80006c4:	200000d8 	.word	0x200000d8
 80006c8:	20000048 	.word	0x20000048
 80006cc:	20000090 	.word	0x20000090
 80006d0:	20000028 	.word	0x20000028

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b094      	sub	sp, #80	; 0x50
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	2230      	movs	r2, #48	; 0x30
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 f9b6 	bl	8002a54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	2300      	movs	r3, #0
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	4b28      	ldr	r3, [pc, #160]	; (80007a0 <SystemClock_Config+0xcc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	4a27      	ldr	r2, [pc, #156]	; (80007a0 <SystemClock_Config+0xcc>)
 8000702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000706:	6413      	str	r3, [r2, #64]	; 0x40
 8000708:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <SystemClock_Config+0xcc>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <SystemClock_Config+0xd0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <SystemClock_Config+0xd0>)
 800071e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <SystemClock_Config+0xd0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000730:	2302      	movs	r3, #2
 8000732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000738:	2310      	movs	r3, #16
 800073a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073c:	2302      	movs	r3, #2
 800073e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000740:	2300      	movs	r3, #0
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000744:	2310      	movs	r3, #16
 8000746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000748:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800074c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800074e:	2304      	movs	r3, #4
 8000750:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000752:	2304      	movs	r3, #4
 8000754:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	4618      	mov	r0, r3
 800075c:	f000 fee0 	bl	8001520 <HAL_RCC_OscConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000766:	f000 f9ab 	bl	8000ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076a:	230f      	movs	r3, #15
 800076c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076e:	2302      	movs	r3, #2
 8000770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	2102      	movs	r1, #2
 8000786:	4618      	mov	r0, r3
 8000788:	f001 f942 	bl	8001a10 <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000792:	f000 f995 	bl	8000ac0 <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3750      	adds	r7, #80	; 0x50
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08e      	sub	sp, #56	; 0x38
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007bc:	f107 0320 	add.w	r3, r7, #32
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
 80007d4:	615a      	str	r2, [r3, #20]
 80007d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007d8:	4b2c      	ldr	r3, [pc, #176]	; (800088c <MX_TIM3_Init+0xe4>)
 80007da:	4a2d      	ldr	r2, [pc, #180]	; (8000890 <MX_TIM3_Init+0xe8>)
 80007dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80007de:	4b2b      	ldr	r3, [pc, #172]	; (800088c <MX_TIM3_Init+0xe4>)
 80007e0:	2253      	movs	r2, #83	; 0x53
 80007e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e4:	4b29      	ldr	r3, [pc, #164]	; (800088c <MX_TIM3_Init+0xe4>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 39999;
 80007ea:	4b28      	ldr	r3, [pc, #160]	; (800088c <MX_TIM3_Init+0xe4>)
 80007ec:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80007f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f2:	4b26      	ldr	r3, [pc, #152]	; (800088c <MX_TIM3_Init+0xe4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f8:	4b24      	ldr	r3, [pc, #144]	; (800088c <MX_TIM3_Init+0xe4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007fe:	4823      	ldr	r0, [pc, #140]	; (800088c <MX_TIM3_Init+0xe4>)
 8000800:	f001 faf2 	bl	8001de8 <HAL_TIM_Base_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800080a:	f000 f959 	bl	8000ac0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800080e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000814:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000818:	4619      	mov	r1, r3
 800081a:	481c      	ldr	r0, [pc, #112]	; (800088c <MX_TIM3_Init+0xe4>)
 800081c:	f001 fcf4 	bl	8002208 <HAL_TIM_ConfigClockSource>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000826:	f000 f94b 	bl	8000ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800082a:	4818      	ldr	r0, [pc, #96]	; (800088c <MX_TIM3_Init+0xe4>)
 800082c:	f001 fb2b 	bl	8001e86 <HAL_TIM_PWM_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000836:	f000 f943 	bl	8000ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800083a:	2300      	movs	r3, #0
 800083c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000842:	f107 0320 	add.w	r3, r7, #32
 8000846:	4619      	mov	r1, r3
 8000848:	4810      	ldr	r0, [pc, #64]	; (800088c <MX_TIM3_Init+0xe4>)
 800084a:	f002 f871 	bl	8002930 <HAL_TIMEx_MasterConfigSynchronization>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000854:	f000 f934 	bl	8000ac0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000858:	2360      	movs	r3, #96	; 0x60
 800085a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 800085c:	230a      	movs	r3, #10
 800085e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2204      	movs	r2, #4
 800086c:	4619      	mov	r1, r3
 800086e:	4807      	ldr	r0, [pc, #28]	; (800088c <MX_TIM3_Init+0xe4>)
 8000870:	f001 fc08 	bl	8002084 <HAL_TIM_PWM_ConfigChannel>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800087a:	f000 f921 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800087e:	4803      	ldr	r0, [pc, #12]	; (800088c <MX_TIM3_Init+0xe4>)
 8000880:	f000 f990 	bl	8000ba4 <HAL_TIM_MspPostInit>

}
 8000884:	bf00      	nop
 8000886:	3738      	adds	r7, #56	; 0x38
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000048 	.word	0x20000048
 8000890:	40000400 	.word	0x40000400

08000894 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	; 0x28
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089a:	f107 0320 	add.w	r3, r7, #32
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]
 80008b2:	615a      	str	r2, [r3, #20]
 80008b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008b6:	4b32      	ldr	r3, [pc, #200]	; (8000980 <MX_TIM4_Init+0xec>)
 80008b8:	4a32      	ldr	r2, [pc, #200]	; (8000984 <MX_TIM4_Init+0xf0>)
 80008ba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 21;
 80008bc:	4b30      	ldr	r3, [pc, #192]	; (8000980 <MX_TIM4_Init+0xec>)
 80008be:	2215      	movs	r2, #21
 80008c0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c2:	4b2f      	ldr	r3, [pc, #188]	; (8000980 <MX_TIM4_Init+0xec>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80008c8:	4b2d      	ldr	r3, [pc, #180]	; (8000980 <MX_TIM4_Init+0xec>)
 80008ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d0:	4b2b      	ldr	r3, [pc, #172]	; (8000980 <MX_TIM4_Init+0xec>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d6:	4b2a      	ldr	r3, [pc, #168]	; (8000980 <MX_TIM4_Init+0xec>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80008dc:	4828      	ldr	r0, [pc, #160]	; (8000980 <MX_TIM4_Init+0xec>)
 80008de:	f001 fad2 	bl	8001e86 <HAL_TIM_PWM_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80008e8:	f000 f8ea 	bl	8000ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008f4:	f107 0320 	add.w	r3, r7, #32
 80008f8:	4619      	mov	r1, r3
 80008fa:	4821      	ldr	r0, [pc, #132]	; (8000980 <MX_TIM4_Init+0xec>)
 80008fc:	f002 f818 	bl	8002930 <HAL_TIMEx_MasterConfigSynchronization>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000906:	f000 f8db 	bl	8000ac0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800090a:	2360      	movs	r3, #96	; 0x60
 800090c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2200      	movs	r2, #0
 800091e:	4619      	mov	r1, r3
 8000920:	4817      	ldr	r0, [pc, #92]	; (8000980 <MX_TIM4_Init+0xec>)
 8000922:	f001 fbaf 	bl	8002084 <HAL_TIM_PWM_ConfigChannel>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800092c:	f000 f8c8 	bl	8000ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2204      	movs	r2, #4
 8000934:	4619      	mov	r1, r3
 8000936:	4812      	ldr	r0, [pc, #72]	; (8000980 <MX_TIM4_Init+0xec>)
 8000938:	f001 fba4 	bl	8002084 <HAL_TIM_PWM_ConfigChannel>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000942:	f000 f8bd 	bl	8000ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2208      	movs	r2, #8
 800094a:	4619      	mov	r1, r3
 800094c:	480c      	ldr	r0, [pc, #48]	; (8000980 <MX_TIM4_Init+0xec>)
 800094e:	f001 fb99 	bl	8002084 <HAL_TIM_PWM_ConfigChannel>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8000958:	f000 f8b2 	bl	8000ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	220c      	movs	r2, #12
 8000960:	4619      	mov	r1, r3
 8000962:	4807      	ldr	r0, [pc, #28]	; (8000980 <MX_TIM4_Init+0xec>)
 8000964:	f001 fb8e 	bl	8002084 <HAL_TIM_PWM_ConfigChannel>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 800096e:	f000 f8a7 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000972:	4803      	ldr	r0, [pc, #12]	; (8000980 <MX_TIM4_Init+0xec>)
 8000974:	f000 f916 	bl	8000ba4 <HAL_TIM_MspPostInit>

}
 8000978:	bf00      	nop
 800097a:	3728      	adds	r7, #40	; 0x28
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000090 	.word	0x20000090
 8000984:	40000800 	.word	0x40000800

08000988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b44      	ldr	r3, [pc, #272]	; (8000ab4 <MX_GPIO_Init+0x12c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a43      	ldr	r2, [pc, #268]	; (8000ab4 <MX_GPIO_Init+0x12c>)
 80009a8:	f043 0304 	orr.w	r3, r3, #4
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b41      	ldr	r3, [pc, #260]	; (8000ab4 <MX_GPIO_Init+0x12c>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0304 	and.w	r3, r3, #4
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b3d      	ldr	r3, [pc, #244]	; (8000ab4 <MX_GPIO_Init+0x12c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a3c      	ldr	r2, [pc, #240]	; (8000ab4 <MX_GPIO_Init+0x12c>)
 80009c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b3a      	ldr	r3, [pc, #232]	; (8000ab4 <MX_GPIO_Init+0x12c>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	4b36      	ldr	r3, [pc, #216]	; (8000ab4 <MX_GPIO_Init+0x12c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a35      	ldr	r2, [pc, #212]	; (8000ab4 <MX_GPIO_Init+0x12c>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b33      	ldr	r3, [pc, #204]	; (8000ab4 <MX_GPIO_Init+0x12c>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b2f      	ldr	r3, [pc, #188]	; (8000ab4 <MX_GPIO_Init+0x12c>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a2e      	ldr	r2, [pc, #184]	; (8000ab4 <MX_GPIO_Init+0x12c>)
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b2c      	ldr	r3, [pc, #176]	; (8000ab4 <MX_GPIO_Init+0x12c>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2120      	movs	r1, #32
 8000a12:	4829      	ldr	r0, [pc, #164]	; (8000ab8 <MX_GPIO_Init+0x130>)
 8000a14:	f000 fd46 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a1e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4823      	ldr	r0, [pc, #140]	; (8000abc <MX_GPIO_Init+0x134>)
 8000a30:	f000 fbb4 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a34:	2303      	movs	r3, #3
 8000a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a38:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	481b      	ldr	r0, [pc, #108]	; (8000ab8 <MX_GPIO_Init+0x130>)
 8000a4a:	f000 fba7 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a4e:	230c      	movs	r3, #12
 8000a50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a5e:	2307      	movs	r3, #7
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	4619      	mov	r1, r3
 8000a68:	4813      	ldr	r0, [pc, #76]	; (8000ab8 <MX_GPIO_Init+0x130>)
 8000a6a:	f000 fb97 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a6e:	2320      	movs	r3, #32
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <MX_GPIO_Init+0x130>)
 8000a86:	f000 fb89 	bl	800119c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2006      	movs	r0, #6
 8000a90:	f000 fb4d 	bl	800112e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a94:	2006      	movs	r0, #6
 8000a96:	f000 fb66 	bl	8001166 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2007      	movs	r0, #7
 8000aa0:	f000 fb45 	bl	800112e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000aa4:	2007      	movs	r0, #7
 8000aa6:	f000 fb5e 	bl	8001166 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aaa:	bf00      	nop
 8000aac:	3728      	adds	r7, #40	; 0x28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020000 	.word	0x40020000
 8000abc:	40020800 	.word	0x40020800

08000ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <Error_Handler+0x8>
	...

08000acc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <HAL_MspInit+0x4c>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	4a0f      	ldr	r2, [pc, #60]	; (8000b18 <HAL_MspInit+0x4c>)
 8000adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <HAL_MspInit+0x4c>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <HAL_MspInit+0x4c>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	4a08      	ldr	r2, [pc, #32]	; (8000b18 <HAL_MspInit+0x4c>)
 8000af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000afc:	6413      	str	r3, [r2, #64]	; 0x40
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b0a:	2007      	movs	r0, #7
 8000b0c:	f000 fb04 	bl	8001118 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40023800 	.word	0x40023800

08000b1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <HAL_TIM_Base_MspInit+0x3c>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d10d      	bne.n	8000b4a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_TIM_Base_MspInit+0x40>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	4a09      	ldr	r2, [pc, #36]	; (8000b5c <HAL_TIM_Base_MspInit+0x40>)
 8000b38:	f043 0302 	orr.w	r3, r3, #2
 8000b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <HAL_TIM_Base_MspInit+0x40>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b4a:	bf00      	nop
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40000400 	.word	0x40000400
 8000b5c:	40023800 	.word	0x40023800

08000b60 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0b      	ldr	r2, [pc, #44]	; (8000b9c <HAL_TIM_PWM_MspInit+0x3c>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d10d      	bne.n	8000b8e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <HAL_TIM_PWM_MspInit+0x40>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	4a09      	ldr	r2, [pc, #36]	; (8000ba0 <HAL_TIM_PWM_MspInit+0x40>)
 8000b7c:	f043 0304 	orr.w	r3, r3, #4
 8000b80:	6413      	str	r3, [r2, #64]	; 0x40
 8000b82:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <HAL_TIM_PWM_MspInit+0x40>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000b8e:	bf00      	nop
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40000800 	.word	0x40000800
 8000ba0:	40023800 	.word	0x40023800

08000ba4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a24      	ldr	r2, [pc, #144]	; (8000c54 <HAL_TIM_MspPostInit+0xb0>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d11e      	bne.n	8000c04 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	4b23      	ldr	r3, [pc, #140]	; (8000c58 <HAL_TIM_MspPostInit+0xb4>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a22      	ldr	r2, [pc, #136]	; (8000c58 <HAL_TIM_MspPostInit+0xb4>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <HAL_TIM_MspPostInit+0xb4>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000be2:	2320      	movs	r3, #32
 8000be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4817      	ldr	r0, [pc, #92]	; (8000c5c <HAL_TIM_MspPostInit+0xb8>)
 8000bfe:	f000 facd 	bl	800119c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000c02:	e023      	b.n	8000c4c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a15      	ldr	r2, [pc, #84]	; (8000c60 <HAL_TIM_MspPostInit+0xbc>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d11e      	bne.n	8000c4c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <HAL_TIM_MspPostInit+0xb4>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a10      	ldr	r2, [pc, #64]	; (8000c58 <HAL_TIM_MspPostInit+0xb4>)
 8000c18:	f043 0302 	orr.w	r3, r3, #2
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <HAL_TIM_MspPostInit+0xb4>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000c2a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c30:	2302      	movs	r3, #2
 8000c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <HAL_TIM_MspPostInit+0xb8>)
 8000c48:	f000 faa8 	bl	800119c <HAL_GPIO_Init>
}
 8000c4c:	bf00      	nop
 8000c4e:	3728      	adds	r7, #40	; 0x28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40000400 	.word	0x40000400
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020400 	.word	0x40020400
 8000c60:	40000800 	.word	0x40000800

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <NMI_Handler+0x4>

08000c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <HardFault_Handler+0x4>

08000c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <MemManage_Handler+0x4>

08000c76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <BusFault_Handler+0x4>

08000c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <UsageFault_Handler+0x4>

08000c82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb0:	f000 f91e 	bl	8000ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	// Update ultrasonic index 0.
	update_ultra(ultras + 0, TIM3->CNT);
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <EXTI0_IRQHandler+0x1c>)
 8000cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <EXTI0_IRQHandler+0x20>)
 8000cc4:	f000 f856 	bl	8000d74 <update_ultra>

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000cc8:	2001      	movs	r0, #1
 8000cca:	f000 fc05 	bl	80014d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40000400 	.word	0x40000400
 8000cd8:	200000d8 	.word	0x200000d8

08000cdc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	// Update ultrasonic index 1.
	update_ultra(ultras + 1, TIM3->CNT);
 8000ce0:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <EXTI1_IRQHandler+0x1c>)
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <EXTI1_IRQHandler+0x20>)
 8000ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4610      	mov	r0, r2
 8000cea:	f000 f843 	bl	8000d74 <update_ultra>

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000cee:	2002      	movs	r0, #2
 8000cf0:	f000 fbf2 	bl	80014d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	200000e0 	.word	0x200000e0
 8000cfc:	40000400 	.word	0x40000400

08000d00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <SystemInit+0x20>)
 8000d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0a:	4a05      	ldr	r2, [pc, #20]	; (8000d20 <SystemInit+0x20>)
 8000d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <get_ultra_distance_in>:
#include "ultrasonic.h"

float get_ultra_distance_in(unsigned int count_us) {
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	return ((float) count_us) / 144.0;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	ee07 3a90 	vmov	s15, r3
 8000d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d36:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000d50 <get_ultra_distance_in+0x2c>
 8000d3a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000d3e:	eef0 7a66 	vmov.f32	s15, s13
}
 8000d42:	eeb0 0a67 	vmov.f32	s0, s15
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	43100000 	.word	0x43100000

08000d54 <init_ultra>:

void init_ultra(ultra_t* ultra) {
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	ultra->off_table = 0;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
	ultra->count_of_echo_start = 0;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2200      	movs	r2, #0
 8000d66:	605a      	str	r2, [r3, #4]
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <update_ultra>:

void update_ultra(ultra_t* ultra, unsigned int current_count) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]

	// If we're at the beginning of an echo.
	if (ultra->count_of_echo_start == 0) {
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d103      	bne.n	8000d8e <update_ultra+0x1a>
		ultra->count_of_echo_start = current_count;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
		}

		// Reset count for beginning of next echo.
		ultra->count_of_echo_start = 0;
	}
}
 8000d8c:	e02f      	b.n	8000dee <update_ultra+0x7a>
	else if (current_count < ultra->count_of_echo_start) {
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d203      	bcs.n	8000da0 <update_ultra+0x2c>
		ultra->count_of_echo_start = 1;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	605a      	str	r2, [r3, #4]
}
 8000d9e:	e026      	b.n	8000dee <update_ultra+0x7a>
		unsigned int elapsed_counts = current_count - ultra->count_of_echo_start;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	683a      	ldr	r2, [r7, #0]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	60fb      	str	r3, [r7, #12]
		if (get_ultra_distance_in(elapsed_counts) > MAX_ON_TABLE_IN) {
 8000daa:	68f8      	ldr	r0, [r7, #12]
 8000dac:	f7ff ffba 	bl	8000d24 <get_ultra_distance_in>
 8000db0:	eef0 7a40 	vmov.f32	s15, s0
 8000db4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000db8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc0:	dd09      	ble.n	8000dd6 <update_ultra+0x62>
			if (ultra->off_table < 3) {
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d80e      	bhi.n	8000de8 <update_ultra+0x74>
				++ultra->off_table;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	1c5a      	adds	r2, r3, #1
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	e008      	b.n	8000de8 <update_ultra+0x74>
			if (ultra->off_table > 0) {
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d004      	beq.n	8000de8 <update_ultra+0x74>
				--ultra->off_table;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	1e5a      	subs	r2, r3, #1
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	601a      	str	r2, [r3, #0]
		ultra->count_of_echo_start = 0;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	605a      	str	r2, [r3, #4]
}
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dfc:	480d      	ldr	r0, [pc, #52]	; (8000e34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dfe:	490e      	ldr	r1, [pc, #56]	; (8000e38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e00:	4a0e      	ldr	r2, [pc, #56]	; (8000e3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e04:	e002      	b.n	8000e0c <LoopCopyDataInit>

08000e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0a:	3304      	adds	r3, #4

08000e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e10:	d3f9      	bcc.n	8000e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e12:	4a0b      	ldr	r2, [pc, #44]	; (8000e40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e14:	4c0b      	ldr	r4, [pc, #44]	; (8000e44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e18:	e001      	b.n	8000e1e <LoopFillZerobss>

08000e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e1c:	3204      	adds	r2, #4

08000e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e20:	d3fb      	bcc.n	8000e1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e22:	f7ff ff6d 	bl	8000d00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e26:	f001 fdf1 	bl	8002a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e2a:	f7ff fbc1 	bl	80005b0 <main>
  bx  lr    
 8000e2e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e38:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e3c:	08002a9c 	.word	0x08002a9c
  ldr r2, =_sbss
 8000e40:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e44:	200000ec 	.word	0x200000ec

08000e48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e48:	e7fe      	b.n	8000e48 <ADC_IRQHandler>
	...

08000e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e50:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0d      	ldr	r2, [pc, #52]	; (8000e8c <HAL_Init+0x40>)
 8000e56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <HAL_Init+0x40>)
 8000e62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <HAL_Init+0x40>)
 8000e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e74:	2003      	movs	r0, #3
 8000e76:	f000 f94f 	bl	8001118 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f000 f808 	bl	8000e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e80:	f7ff fe24 	bl	8000acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40023c00 	.word	0x40023c00

08000e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_InitTick+0x54>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_InitTick+0x58>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 f967 	bl	8001182 <HAL_SYSTICK_Config>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00e      	b.n	8000edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b0f      	cmp	r3, #15
 8000ec2:	d80a      	bhi.n	8000eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ecc:	f000 f92f 	bl	800112e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed0:	4a06      	ldr	r2, [pc, #24]	; (8000eec <HAL_InitTick+0x5c>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	e000      	b.n	8000edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	20000004 	.word	0x20000004

08000ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x20>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x24>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <HAL_IncTick+0x24>)
 8000f02:	6013      	str	r3, [r2, #0]
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000008 	.word	0x20000008
 8000f14:	200000e8 	.word	0x200000e8

08000f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <HAL_GetTick+0x14>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	200000e8 	.word	0x200000e8

08000f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f38:	f7ff ffee 	bl	8000f18 <HAL_GetTick>
 8000f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f48:	d005      	beq.n	8000f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <HAL_Delay+0x44>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4413      	add	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f56:	bf00      	nop
 8000f58:	f7ff ffde 	bl	8000f18 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d8f7      	bhi.n	8000f58 <HAL_Delay+0x28>
  {
  }
}
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000008 	.word	0x20000008

08000f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f94:	4013      	ands	r3, r2
 8000f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000faa:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	60d3      	str	r3, [r2, #12]
}
 8000fb0:	bf00      	nop
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	f003 0307 	and.w	r3, r3, #7
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	db0b      	blt.n	8001006 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	f003 021f 	and.w	r2, r3, #31
 8000ff4:	4907      	ldr	r1, [pc, #28]	; (8001014 <__NVIC_EnableIRQ+0x38>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	095b      	lsrs	r3, r3, #5
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8001002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000e100 	.word	0xe000e100

08001018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	6039      	str	r1, [r7, #0]
 8001022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001028:	2b00      	cmp	r3, #0
 800102a:	db0a      	blt.n	8001042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	b2da      	uxtb	r2, r3
 8001030:	490c      	ldr	r1, [pc, #48]	; (8001064 <__NVIC_SetPriority+0x4c>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	0112      	lsls	r2, r2, #4
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	440b      	add	r3, r1
 800103c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001040:	e00a      	b.n	8001058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4908      	ldr	r1, [pc, #32]	; (8001068 <__NVIC_SetPriority+0x50>)
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	3b04      	subs	r3, #4
 8001050:	0112      	lsls	r2, r2, #4
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	440b      	add	r3, r1
 8001056:	761a      	strb	r2, [r3, #24]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000e100 	.word	0xe000e100
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800106c:	b480      	push	{r7}
 800106e:	b089      	sub	sp, #36	; 0x24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f1c3 0307 	rsb	r3, r3, #7
 8001086:	2b04      	cmp	r3, #4
 8001088:	bf28      	it	cs
 800108a:	2304      	movcs	r3, #4
 800108c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3304      	adds	r3, #4
 8001092:	2b06      	cmp	r3, #6
 8001094:	d902      	bls.n	800109c <NVIC_EncodePriority+0x30>
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3b03      	subs	r3, #3
 800109a:	e000      	b.n	800109e <NVIC_EncodePriority+0x32>
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43da      	mvns	r2, r3
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	401a      	ands	r2, r3
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa01 f303 	lsl.w	r3, r1, r3
 80010be:	43d9      	mvns	r1, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	4313      	orrs	r3, r2
         );
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3724      	adds	r7, #36	; 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e4:	d301      	bcc.n	80010ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00f      	b.n	800110a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <SysTick_Config+0x40>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f2:	210f      	movs	r1, #15
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010f8:	f7ff ff8e 	bl	8001018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <SysTick_Config+0x40>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <SysTick_Config+0x40>)
 8001104:	2207      	movs	r2, #7
 8001106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	e000e010 	.word	0xe000e010

08001118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff29 	bl	8000f78 <__NVIC_SetPriorityGrouping>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800112e:	b580      	push	{r7, lr}
 8001130:	b086      	sub	sp, #24
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001140:	f7ff ff3e 	bl	8000fc0 <__NVIC_GetPriorityGrouping>
 8001144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	6978      	ldr	r0, [r7, #20]
 800114c:	f7ff ff8e 	bl	800106c <NVIC_EncodePriority>
 8001150:	4602      	mov	r2, r0
 8001152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001156:	4611      	mov	r1, r2
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff5d 	bl	8001018 <__NVIC_SetPriority>
}
 800115e:	bf00      	nop
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff ff31 	bl	8000fdc <__NVIC_EnableIRQ>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ffa2 	bl	80010d4 <SysTick_Config>
 8001190:	4603      	mov	r3, r0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
 80011b6:	e159      	b.n	800146c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011b8:	2201      	movs	r2, #1
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	f040 8148 	bne.w	8001466 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d005      	beq.n	80011ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d130      	bne.n	8001250 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	2203      	movs	r2, #3
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	68da      	ldr	r2, [r3, #12]
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001224:	2201      	movs	r2, #1
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	091b      	lsrs	r3, r3, #4
 800123a:	f003 0201 	and.w	r2, r3, #1
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	2b03      	cmp	r3, #3
 800125a:	d017      	beq.n	800128c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	2203      	movs	r2, #3
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d123      	bne.n	80012e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	08da      	lsrs	r2, r3, #3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3208      	adds	r2, #8
 80012a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	220f      	movs	r2, #15
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	691a      	ldr	r2, [r3, #16]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	08da      	lsrs	r2, r3, #3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3208      	adds	r2, #8
 80012da:	69b9      	ldr	r1, [r7, #24]
 80012dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	2203      	movs	r2, #3
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0203 	and.w	r2, r3, #3
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800131c:	2b00      	cmp	r3, #0
 800131e:	f000 80a2 	beq.w	8001466 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b57      	ldr	r3, [pc, #348]	; (8001484 <HAL_GPIO_Init+0x2e8>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	4a56      	ldr	r2, [pc, #344]	; (8001484 <HAL_GPIO_Init+0x2e8>)
 800132c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001330:	6453      	str	r3, [r2, #68]	; 0x44
 8001332:	4b54      	ldr	r3, [pc, #336]	; (8001484 <HAL_GPIO_Init+0x2e8>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800133e:	4a52      	ldr	r2, [pc, #328]	; (8001488 <HAL_GPIO_Init+0x2ec>)
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	089b      	lsrs	r3, r3, #2
 8001344:	3302      	adds	r3, #2
 8001346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f003 0303 	and.w	r3, r3, #3
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	220f      	movs	r2, #15
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a49      	ldr	r2, [pc, #292]	; (800148c <HAL_GPIO_Init+0x2f0>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d019      	beq.n	800139e <HAL_GPIO_Init+0x202>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a48      	ldr	r2, [pc, #288]	; (8001490 <HAL_GPIO_Init+0x2f4>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d013      	beq.n	800139a <HAL_GPIO_Init+0x1fe>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a47      	ldr	r2, [pc, #284]	; (8001494 <HAL_GPIO_Init+0x2f8>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d00d      	beq.n	8001396 <HAL_GPIO_Init+0x1fa>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a46      	ldr	r2, [pc, #280]	; (8001498 <HAL_GPIO_Init+0x2fc>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d007      	beq.n	8001392 <HAL_GPIO_Init+0x1f6>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a45      	ldr	r2, [pc, #276]	; (800149c <HAL_GPIO_Init+0x300>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d101      	bne.n	800138e <HAL_GPIO_Init+0x1f2>
 800138a:	2304      	movs	r3, #4
 800138c:	e008      	b.n	80013a0 <HAL_GPIO_Init+0x204>
 800138e:	2307      	movs	r3, #7
 8001390:	e006      	b.n	80013a0 <HAL_GPIO_Init+0x204>
 8001392:	2303      	movs	r3, #3
 8001394:	e004      	b.n	80013a0 <HAL_GPIO_Init+0x204>
 8001396:	2302      	movs	r3, #2
 8001398:	e002      	b.n	80013a0 <HAL_GPIO_Init+0x204>
 800139a:	2301      	movs	r3, #1
 800139c:	e000      	b.n	80013a0 <HAL_GPIO_Init+0x204>
 800139e:	2300      	movs	r3, #0
 80013a0:	69fa      	ldr	r2, [r7, #28]
 80013a2:	f002 0203 	and.w	r2, r2, #3
 80013a6:	0092      	lsls	r2, r2, #2
 80013a8:	4093      	lsls	r3, r2
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013b0:	4935      	ldr	r1, [pc, #212]	; (8001488 <HAL_GPIO_Init+0x2ec>)
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	089b      	lsrs	r3, r3, #2
 80013b6:	3302      	adds	r3, #2
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013be:	4b38      	ldr	r3, [pc, #224]	; (80014a0 <HAL_GPIO_Init+0x304>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013e2:	4a2f      	ldr	r2, [pc, #188]	; (80014a0 <HAL_GPIO_Init+0x304>)
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013e8:	4b2d      	ldr	r3, [pc, #180]	; (80014a0 <HAL_GPIO_Init+0x304>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800140c:	4a24      	ldr	r2, [pc, #144]	; (80014a0 <HAL_GPIO_Init+0x304>)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001412:	4b23      	ldr	r3, [pc, #140]	; (80014a0 <HAL_GPIO_Init+0x304>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	43db      	mvns	r3, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4013      	ands	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001436:	4a1a      	ldr	r2, [pc, #104]	; (80014a0 <HAL_GPIO_Init+0x304>)
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800143c:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <HAL_GPIO_Init+0x304>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	43db      	mvns	r3, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4013      	ands	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001460:	4a0f      	ldr	r2, [pc, #60]	; (80014a0 <HAL_GPIO_Init+0x304>)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3301      	adds	r3, #1
 800146a:	61fb      	str	r3, [r7, #28]
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	2b0f      	cmp	r3, #15
 8001470:	f67f aea2 	bls.w	80011b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001474:	bf00      	nop
 8001476:	bf00      	nop
 8001478:	3724      	adds	r7, #36	; 0x24
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40023800 	.word	0x40023800
 8001488:	40013800 	.word	0x40013800
 800148c:	40020000 	.word	0x40020000
 8001490:	40020400 	.word	0x40020400
 8001494:	40020800 	.word	0x40020800
 8001498:	40020c00 	.word	0x40020c00
 800149c:	40021000 	.word	0x40021000
 80014a0:	40013c00 	.word	0x40013c00

080014a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
 80014b0:	4613      	mov	r3, r2
 80014b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014b4:	787b      	ldrb	r3, [r7, #1]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ba:	887a      	ldrh	r2, [r7, #2]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014c0:	e003      	b.n	80014ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014c2:	887b      	ldrh	r3, [r7, #2]
 80014c4:	041a      	lsls	r2, r3, #16
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	619a      	str	r2, [r3, #24]
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014e4:	695a      	ldr	r2, [r3, #20]
 80014e6:	88fb      	ldrh	r3, [r7, #6]
 80014e8:	4013      	ands	r3, r2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d006      	beq.n	80014fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014ee:	4a05      	ldr	r2, [pc, #20]	; (8001504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014f0:	88fb      	ldrh	r3, [r7, #6]
 80014f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 f806 	bl	8001508 <HAL_GPIO_EXTI_Callback>
  }
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40013c00 	.word	0x40013c00

08001508 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e267      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	2b00      	cmp	r3, #0
 800153c:	d075      	beq.n	800162a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800153e:	4b88      	ldr	r3, [pc, #544]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 030c 	and.w	r3, r3, #12
 8001546:	2b04      	cmp	r3, #4
 8001548:	d00c      	beq.n	8001564 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800154a:	4b85      	ldr	r3, [pc, #532]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001552:	2b08      	cmp	r3, #8
 8001554:	d112      	bne.n	800157c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001556:	4b82      	ldr	r3, [pc, #520]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800155e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001562:	d10b      	bne.n	800157c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001564:	4b7e      	ldr	r3, [pc, #504]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d05b      	beq.n	8001628 <HAL_RCC_OscConfig+0x108>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d157      	bne.n	8001628 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e242      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001584:	d106      	bne.n	8001594 <HAL_RCC_OscConfig+0x74>
 8001586:	4b76      	ldr	r3, [pc, #472]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a75      	ldr	r2, [pc, #468]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 800158c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	e01d      	b.n	80015d0 <HAL_RCC_OscConfig+0xb0>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800159c:	d10c      	bne.n	80015b8 <HAL_RCC_OscConfig+0x98>
 800159e:	4b70      	ldr	r3, [pc, #448]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a6f      	ldr	r2, [pc, #444]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 80015a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	4b6d      	ldr	r3, [pc, #436]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a6c      	ldr	r2, [pc, #432]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 80015b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	e00b      	b.n	80015d0 <HAL_RCC_OscConfig+0xb0>
 80015b8:	4b69      	ldr	r3, [pc, #420]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a68      	ldr	r2, [pc, #416]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 80015be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	4b66      	ldr	r3, [pc, #408]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a65      	ldr	r2, [pc, #404]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 80015ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d013      	beq.n	8001600 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff fc9e 	bl	8000f18 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015e0:	f7ff fc9a 	bl	8000f18 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b64      	cmp	r3, #100	; 0x64
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e207      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f2:	4b5b      	ldr	r3, [pc, #364]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0f0      	beq.n	80015e0 <HAL_RCC_OscConfig+0xc0>
 80015fe:	e014      	b.n	800162a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001600:	f7ff fc8a 	bl	8000f18 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001608:	f7ff fc86 	bl	8000f18 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b64      	cmp	r3, #100	; 0x64
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e1f3      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800161a:	4b51      	ldr	r3, [pc, #324]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f0      	bne.n	8001608 <HAL_RCC_OscConfig+0xe8>
 8001626:	e000      	b.n	800162a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d063      	beq.n	80016fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001636:	4b4a      	ldr	r3, [pc, #296]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 030c 	and.w	r3, r3, #12
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00b      	beq.n	800165a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001642:	4b47      	ldr	r3, [pc, #284]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800164a:	2b08      	cmp	r3, #8
 800164c:	d11c      	bne.n	8001688 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800164e:	4b44      	ldr	r3, [pc, #272]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d116      	bne.n	8001688 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165a:	4b41      	ldr	r3, [pc, #260]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d005      	beq.n	8001672 <HAL_RCC_OscConfig+0x152>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d001      	beq.n	8001672 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e1c7      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001672:	4b3b      	ldr	r3, [pc, #236]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	4937      	ldr	r1, [pc, #220]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 8001682:	4313      	orrs	r3, r2
 8001684:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001686:	e03a      	b.n	80016fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d020      	beq.n	80016d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001690:	4b34      	ldr	r3, [pc, #208]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 8001692:	2201      	movs	r2, #1
 8001694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001696:	f7ff fc3f 	bl	8000f18 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800169e:	f7ff fc3b 	bl	8000f18 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e1a8      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b0:	4b2b      	ldr	r3, [pc, #172]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016bc:	4b28      	ldr	r3, [pc, #160]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	4925      	ldr	r1, [pc, #148]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	600b      	str	r3, [r1, #0]
 80016d0:	e015      	b.n	80016fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016d2:	4b24      	ldr	r3, [pc, #144]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d8:	f7ff fc1e 	bl	8000f18 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016e0:	f7ff fc1a 	bl	8000f18 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e187      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016f2:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f0      	bne.n	80016e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	2b00      	cmp	r3, #0
 8001708:	d036      	beq.n	8001778 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d016      	beq.n	8001740 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <HAL_RCC_OscConfig+0x248>)
 8001714:	2201      	movs	r2, #1
 8001716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001718:	f7ff fbfe 	bl	8000f18 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001720:	f7ff fbfa 	bl	8000f18 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e167      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 8001734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f0      	beq.n	8001720 <HAL_RCC_OscConfig+0x200>
 800173e:	e01b      	b.n	8001778 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <HAL_RCC_OscConfig+0x248>)
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001746:	f7ff fbe7 	bl	8000f18 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800174c:	e00e      	b.n	800176c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800174e:	f7ff fbe3 	bl	8000f18 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d907      	bls.n	800176c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e150      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
 8001760:	40023800 	.word	0x40023800
 8001764:	42470000 	.word	0x42470000
 8001768:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800176c:	4b88      	ldr	r3, [pc, #544]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 800176e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1ea      	bne.n	800174e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 8097 	beq.w	80018b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001786:	2300      	movs	r3, #0
 8001788:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800178a:	4b81      	ldr	r3, [pc, #516]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10f      	bne.n	80017b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	4b7d      	ldr	r3, [pc, #500]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	4a7c      	ldr	r2, [pc, #496]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 80017a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a4:	6413      	str	r3, [r2, #64]	; 0x40
 80017a6:	4b7a      	ldr	r3, [pc, #488]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017b2:	2301      	movs	r3, #1
 80017b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b6:	4b77      	ldr	r3, [pc, #476]	; (8001994 <HAL_RCC_OscConfig+0x474>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d118      	bne.n	80017f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017c2:	4b74      	ldr	r3, [pc, #464]	; (8001994 <HAL_RCC_OscConfig+0x474>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a73      	ldr	r2, [pc, #460]	; (8001994 <HAL_RCC_OscConfig+0x474>)
 80017c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ce:	f7ff fba3 	bl	8000f18 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d6:	f7ff fb9f 	bl	8000f18 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e10c      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e8:	4b6a      	ldr	r3, [pc, #424]	; (8001994 <HAL_RCC_OscConfig+0x474>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0f0      	beq.n	80017d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d106      	bne.n	800180a <HAL_RCC_OscConfig+0x2ea>
 80017fc:	4b64      	ldr	r3, [pc, #400]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 80017fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001800:	4a63      	ldr	r2, [pc, #396]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	6713      	str	r3, [r2, #112]	; 0x70
 8001808:	e01c      	b.n	8001844 <HAL_RCC_OscConfig+0x324>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	2b05      	cmp	r3, #5
 8001810:	d10c      	bne.n	800182c <HAL_RCC_OscConfig+0x30c>
 8001812:	4b5f      	ldr	r3, [pc, #380]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 8001814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001816:	4a5e      	ldr	r2, [pc, #376]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 8001818:	f043 0304 	orr.w	r3, r3, #4
 800181c:	6713      	str	r3, [r2, #112]	; 0x70
 800181e:	4b5c      	ldr	r3, [pc, #368]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 8001820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001822:	4a5b      	ldr	r2, [pc, #364]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6713      	str	r3, [r2, #112]	; 0x70
 800182a:	e00b      	b.n	8001844 <HAL_RCC_OscConfig+0x324>
 800182c:	4b58      	ldr	r3, [pc, #352]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 800182e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001830:	4a57      	ldr	r2, [pc, #348]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 8001832:	f023 0301 	bic.w	r3, r3, #1
 8001836:	6713      	str	r3, [r2, #112]	; 0x70
 8001838:	4b55      	ldr	r3, [pc, #340]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 800183a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183c:	4a54      	ldr	r2, [pc, #336]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 800183e:	f023 0304 	bic.w	r3, r3, #4
 8001842:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d015      	beq.n	8001878 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184c:	f7ff fb64 	bl	8000f18 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001852:	e00a      	b.n	800186a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001854:	f7ff fb60 	bl	8000f18 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001862:	4293      	cmp	r3, r2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e0cb      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186a:	4b49      	ldr	r3, [pc, #292]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 800186c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0ee      	beq.n	8001854 <HAL_RCC_OscConfig+0x334>
 8001876:	e014      	b.n	80018a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001878:	f7ff fb4e 	bl	8000f18 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800187e:	e00a      	b.n	8001896 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001880:	f7ff fb4a 	bl	8000f18 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	f241 3288 	movw	r2, #5000	; 0x1388
 800188e:	4293      	cmp	r3, r2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e0b5      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001896:	4b3e      	ldr	r3, [pc, #248]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 8001898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1ee      	bne.n	8001880 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018a2:	7dfb      	ldrb	r3, [r7, #23]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d105      	bne.n	80018b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a8:	4b39      	ldr	r3, [pc, #228]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	4a38      	ldr	r2, [pc, #224]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 80018ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 80a1 	beq.w	8001a00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018be:	4b34      	ldr	r3, [pc, #208]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 030c 	and.w	r3, r3, #12
 80018c6:	2b08      	cmp	r3, #8
 80018c8:	d05c      	beq.n	8001984 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d141      	bne.n	8001956 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d2:	4b31      	ldr	r3, [pc, #196]	; (8001998 <HAL_RCC_OscConfig+0x478>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d8:	f7ff fb1e 	bl	8000f18 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e0:	f7ff fb1a 	bl	8000f18 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e087      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f2:	4b27      	ldr	r3, [pc, #156]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	69da      	ldr	r2, [r3, #28]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	019b      	lsls	r3, r3, #6
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001914:	085b      	lsrs	r3, r3, #1
 8001916:	3b01      	subs	r3, #1
 8001918:	041b      	lsls	r3, r3, #16
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001920:	061b      	lsls	r3, r3, #24
 8001922:	491b      	ldr	r1, [pc, #108]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 8001924:	4313      	orrs	r3, r2
 8001926:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001928:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <HAL_RCC_OscConfig+0x478>)
 800192a:	2201      	movs	r2, #1
 800192c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192e:	f7ff faf3 	bl	8000f18 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001936:	f7ff faef 	bl	8000f18 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e05c      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001948:	4b11      	ldr	r3, [pc, #68]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0f0      	beq.n	8001936 <HAL_RCC_OscConfig+0x416>
 8001954:	e054      	b.n	8001a00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <HAL_RCC_OscConfig+0x478>)
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195c:	f7ff fadc 	bl	8000f18 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001964:	f7ff fad8 	bl	8000f18 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e045      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0x444>
 8001982:	e03d      	b.n	8001a00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d107      	bne.n	800199c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e038      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
 8001990:	40023800 	.word	0x40023800
 8001994:	40007000 	.word	0x40007000
 8001998:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800199c:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <HAL_RCC_OscConfig+0x4ec>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d028      	beq.n	80019fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d121      	bne.n	80019fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d11a      	bne.n	80019fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019cc:	4013      	ands	r3, r2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d111      	bne.n	80019fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e2:	085b      	lsrs	r3, r3, #1
 80019e4:	3b01      	subs	r3, #1
 80019e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d107      	bne.n	80019fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d001      	beq.n	8001a00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800

08001a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e0cc      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a24:	4b68      	ldr	r3, [pc, #416]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d90c      	bls.n	8001a4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a32:	4b65      	ldr	r3, [pc, #404]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3a:	4b63      	ldr	r3, [pc, #396]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e0b8      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d020      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a64:	4b59      	ldr	r3, [pc, #356]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	4a58      	ldr	r2, [pc, #352]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a7c:	4b53      	ldr	r3, [pc, #332]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	4a52      	ldr	r2, [pc, #328]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a88:	4b50      	ldr	r3, [pc, #320]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	494d      	ldr	r1, [pc, #308]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d044      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d107      	bne.n	8001abe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aae:	4b47      	ldr	r3, [pc, #284]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d119      	bne.n	8001aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e07f      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d003      	beq.n	8001ace <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	d107      	bne.n	8001ade <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ace:	4b3f      	ldr	r3, [pc, #252]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d109      	bne.n	8001aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e06f      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ade:	4b3b      	ldr	r3, [pc, #236]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e067      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aee:	4b37      	ldr	r3, [pc, #220]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f023 0203 	bic.w	r2, r3, #3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	4934      	ldr	r1, [pc, #208]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b00:	f7ff fa0a 	bl	8000f18 <HAL_GetTick>
 8001b04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b06:	e00a      	b.n	8001b1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b08:	f7ff fa06 	bl	8000f18 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e04f      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1e:	4b2b      	ldr	r3, [pc, #172]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 020c 	and.w	r2, r3, #12
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d1eb      	bne.n	8001b08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b30:	4b25      	ldr	r3, [pc, #148]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d20c      	bcs.n	8001b58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3e:	4b22      	ldr	r3, [pc, #136]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b46:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e032      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d008      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b64:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	4916      	ldr	r1, [pc, #88]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d009      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b82:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	490e      	ldr	r1, [pc, #56]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b96:	f000 f821 	bl	8001bdc <HAL_RCC_GetSysClockFreq>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	490a      	ldr	r1, [pc, #40]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba8:	5ccb      	ldrb	r3, [r1, r3]
 8001baa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bae:	4a09      	ldr	r2, [pc, #36]	; (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff f96a 	bl	8000e90 <HAL_InitTick>

  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40023c00 	.word	0x40023c00
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	08002a7c 	.word	0x08002a7c
 8001bd4:	20000000 	.word	0x20000000
 8001bd8:	20000004 	.word	0x20000004

08001bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001be0:	b094      	sub	sp, #80	; 0x50
 8001be2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	647b      	str	r3, [r7, #68]	; 0x44
 8001be8:	2300      	movs	r3, #0
 8001bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bec:	2300      	movs	r3, #0
 8001bee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bf4:	4b79      	ldr	r3, [pc, #484]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 030c 	and.w	r3, r3, #12
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	d00d      	beq.n	8001c1c <HAL_RCC_GetSysClockFreq+0x40>
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	f200 80e1 	bhi.w	8001dc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <HAL_RCC_GetSysClockFreq+0x34>
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	d003      	beq.n	8001c16 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c0e:	e0db      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c10:	4b73      	ldr	r3, [pc, #460]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c12:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c14:	e0db      	b.n	8001dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c16:	4b73      	ldr	r3, [pc, #460]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c1a:	e0d8      	b.n	8001dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c1c:	4b6f      	ldr	r3, [pc, #444]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c24:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c26:	4b6d      	ldr	r3, [pc, #436]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d063      	beq.n	8001cfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c32:	4b6a      	ldr	r3, [pc, #424]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	099b      	lsrs	r3, r3, #6
 8001c38:	2200      	movs	r2, #0
 8001c3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c44:	633b      	str	r3, [r7, #48]	; 0x30
 8001c46:	2300      	movs	r3, #0
 8001c48:	637b      	str	r3, [r7, #52]	; 0x34
 8001c4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c4e:	4622      	mov	r2, r4
 8001c50:	462b      	mov	r3, r5
 8001c52:	f04f 0000 	mov.w	r0, #0
 8001c56:	f04f 0100 	mov.w	r1, #0
 8001c5a:	0159      	lsls	r1, r3, #5
 8001c5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c60:	0150      	lsls	r0, r2, #5
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4621      	mov	r1, r4
 8001c68:	1a51      	subs	r1, r2, r1
 8001c6a:	6139      	str	r1, [r7, #16]
 8001c6c:	4629      	mov	r1, r5
 8001c6e:	eb63 0301 	sbc.w	r3, r3, r1
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	f04f 0300 	mov.w	r3, #0
 8001c7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c80:	4659      	mov	r1, fp
 8001c82:	018b      	lsls	r3, r1, #6
 8001c84:	4651      	mov	r1, sl
 8001c86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c8a:	4651      	mov	r1, sl
 8001c8c:	018a      	lsls	r2, r1, #6
 8001c8e:	4651      	mov	r1, sl
 8001c90:	ebb2 0801 	subs.w	r8, r2, r1
 8001c94:	4659      	mov	r1, fp
 8001c96:	eb63 0901 	sbc.w	r9, r3, r1
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ca6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001caa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cae:	4690      	mov	r8, r2
 8001cb0:	4699      	mov	r9, r3
 8001cb2:	4623      	mov	r3, r4
 8001cb4:	eb18 0303 	adds.w	r3, r8, r3
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	462b      	mov	r3, r5
 8001cbc:	eb49 0303 	adc.w	r3, r9, r3
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cce:	4629      	mov	r1, r5
 8001cd0:	024b      	lsls	r3, r1, #9
 8001cd2:	4621      	mov	r1, r4
 8001cd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cd8:	4621      	mov	r1, r4
 8001cda:	024a      	lsls	r2, r1, #9
 8001cdc:	4610      	mov	r0, r2
 8001cde:	4619      	mov	r1, r3
 8001ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ce6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ce8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001cec:	f7fe fa74 	bl	80001d8 <__aeabi_uldivmod>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cf8:	e058      	b.n	8001dac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cfa:	4b38      	ldr	r3, [pc, #224]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	099b      	lsrs	r3, r3, #6
 8001d00:	2200      	movs	r2, #0
 8001d02:	4618      	mov	r0, r3
 8001d04:	4611      	mov	r1, r2
 8001d06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d0a:	623b      	str	r3, [r7, #32]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d14:	4642      	mov	r2, r8
 8001d16:	464b      	mov	r3, r9
 8001d18:	f04f 0000 	mov.w	r0, #0
 8001d1c:	f04f 0100 	mov.w	r1, #0
 8001d20:	0159      	lsls	r1, r3, #5
 8001d22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d26:	0150      	lsls	r0, r2, #5
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4641      	mov	r1, r8
 8001d2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d32:	4649      	mov	r1, r9
 8001d34:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	f04f 0300 	mov.w	r3, #0
 8001d40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d4c:	ebb2 040a 	subs.w	r4, r2, sl
 8001d50:	eb63 050b 	sbc.w	r5, r3, fp
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	00eb      	lsls	r3, r5, #3
 8001d5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d62:	00e2      	lsls	r2, r4, #3
 8001d64:	4614      	mov	r4, r2
 8001d66:	461d      	mov	r5, r3
 8001d68:	4643      	mov	r3, r8
 8001d6a:	18e3      	adds	r3, r4, r3
 8001d6c:	603b      	str	r3, [r7, #0]
 8001d6e:	464b      	mov	r3, r9
 8001d70:	eb45 0303 	adc.w	r3, r5, r3
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d82:	4629      	mov	r1, r5
 8001d84:	028b      	lsls	r3, r1, #10
 8001d86:	4621      	mov	r1, r4
 8001d88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d8c:	4621      	mov	r1, r4
 8001d8e:	028a      	lsls	r2, r1, #10
 8001d90:	4610      	mov	r0, r2
 8001d92:	4619      	mov	r1, r3
 8001d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d96:	2200      	movs	r2, #0
 8001d98:	61bb      	str	r3, [r7, #24]
 8001d9a:	61fa      	str	r2, [r7, #28]
 8001d9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001da0:	f7fe fa1a 	bl	80001d8 <__aeabi_uldivmod>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4613      	mov	r3, r2
 8001daa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	0c1b      	lsrs	r3, r3, #16
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	3301      	adds	r3, #1
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001dbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dc6:	e002      	b.n	8001dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001dca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3750      	adds	r7, #80	; 0x50
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	00f42400 	.word	0x00f42400
 8001de4:	007a1200 	.word	0x007a1200

08001de8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e041      	b.n	8001e7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d106      	bne.n	8001e14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7fe fe84 	bl	8000b1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3304      	adds	r3, #4
 8001e24:	4619      	mov	r1, r3
 8001e26:	4610      	mov	r0, r2
 8001e28:	f000 fab6 	bl	8002398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e041      	b.n	8001f1c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d106      	bne.n	8001eb2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7fe fe57 	bl	8000b60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	f000 fa67 	bl	8002398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d109      	bne.n	8001f48 <HAL_TIM_PWM_Start+0x24>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	bf14      	ite	ne
 8001f40:	2301      	movne	r3, #1
 8001f42:	2300      	moveq	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	e022      	b.n	8001f8e <HAL_TIM_PWM_Start+0x6a>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	d109      	bne.n	8001f62 <HAL_TIM_PWM_Start+0x3e>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	bf14      	ite	ne
 8001f5a:	2301      	movne	r3, #1
 8001f5c:	2300      	moveq	r3, #0
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	e015      	b.n	8001f8e <HAL_TIM_PWM_Start+0x6a>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d109      	bne.n	8001f7c <HAL_TIM_PWM_Start+0x58>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	bf14      	ite	ne
 8001f74:	2301      	movne	r3, #1
 8001f76:	2300      	moveq	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	e008      	b.n	8001f8e <HAL_TIM_PWM_Start+0x6a>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	bf14      	ite	ne
 8001f88:	2301      	movne	r3, #1
 8001f8a:	2300      	moveq	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e068      	b.n	8002068 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d104      	bne.n	8001fa6 <HAL_TIM_PWM_Start+0x82>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fa4:	e013      	b.n	8001fce <HAL_TIM_PWM_Start+0xaa>
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	d104      	bne.n	8001fb6 <HAL_TIM_PWM_Start+0x92>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2202      	movs	r2, #2
 8001fb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fb4:	e00b      	b.n	8001fce <HAL_TIM_PWM_Start+0xaa>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d104      	bne.n	8001fc6 <HAL_TIM_PWM_Start+0xa2>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fc4:	e003      	b.n	8001fce <HAL_TIM_PWM_Start+0xaa>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2202      	movs	r2, #2
 8001fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	6839      	ldr	r1, [r7, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 fc84 	bl	80028e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a23      	ldr	r2, [pc, #140]	; (8002070 <HAL_TIM_PWM_Start+0x14c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d107      	bne.n	8001ff6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ff4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a1d      	ldr	r2, [pc, #116]	; (8002070 <HAL_TIM_PWM_Start+0x14c>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d018      	beq.n	8002032 <HAL_TIM_PWM_Start+0x10e>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002008:	d013      	beq.n	8002032 <HAL_TIM_PWM_Start+0x10e>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a19      	ldr	r2, [pc, #100]	; (8002074 <HAL_TIM_PWM_Start+0x150>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d00e      	beq.n	8002032 <HAL_TIM_PWM_Start+0x10e>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a17      	ldr	r2, [pc, #92]	; (8002078 <HAL_TIM_PWM_Start+0x154>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d009      	beq.n	8002032 <HAL_TIM_PWM_Start+0x10e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a16      	ldr	r2, [pc, #88]	; (800207c <HAL_TIM_PWM_Start+0x158>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d004      	beq.n	8002032 <HAL_TIM_PWM_Start+0x10e>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a14      	ldr	r2, [pc, #80]	; (8002080 <HAL_TIM_PWM_Start+0x15c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d111      	bne.n	8002056 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2b06      	cmp	r3, #6
 8002042:	d010      	beq.n	8002066 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0201 	orr.w	r2, r2, #1
 8002052:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002054:	e007      	b.n	8002066 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f042 0201 	orr.w	r2, r2, #1
 8002064:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40010000 	.word	0x40010000
 8002074:	40000400 	.word	0x40000400
 8002078:	40000800 	.word	0x40000800
 800207c:	40000c00 	.word	0x40000c00
 8002080:	40014000 	.word	0x40014000

08002084 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002090:	2300      	movs	r3, #0
 8002092:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800209a:	2b01      	cmp	r3, #1
 800209c:	d101      	bne.n	80020a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800209e:	2302      	movs	r3, #2
 80020a0:	e0ae      	b.n	8002200 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b0c      	cmp	r3, #12
 80020ae:	f200 809f 	bhi.w	80021f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80020b2:	a201      	add	r2, pc, #4	; (adr r2, 80020b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80020b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b8:	080020ed 	.word	0x080020ed
 80020bc:	080021f1 	.word	0x080021f1
 80020c0:	080021f1 	.word	0x080021f1
 80020c4:	080021f1 	.word	0x080021f1
 80020c8:	0800212d 	.word	0x0800212d
 80020cc:	080021f1 	.word	0x080021f1
 80020d0:	080021f1 	.word	0x080021f1
 80020d4:	080021f1 	.word	0x080021f1
 80020d8:	0800216f 	.word	0x0800216f
 80020dc:	080021f1 	.word	0x080021f1
 80020e0:	080021f1 	.word	0x080021f1
 80020e4:	080021f1 	.word	0x080021f1
 80020e8:	080021af 	.word	0x080021af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68b9      	ldr	r1, [r7, #8]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 f9d0 	bl	8002498 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699a      	ldr	r2, [r3, #24]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0208 	orr.w	r2, r2, #8
 8002106:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	699a      	ldr	r2, [r3, #24]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0204 	bic.w	r2, r2, #4
 8002116:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6999      	ldr	r1, [r3, #24]
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	691a      	ldr	r2, [r3, #16]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	619a      	str	r2, [r3, #24]
      break;
 800212a:	e064      	b.n	80021f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68b9      	ldr	r1, [r7, #8]
 8002132:	4618      	mov	r0, r3
 8002134:	f000 fa16 	bl	8002564 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699a      	ldr	r2, [r3, #24]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002146:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699a      	ldr	r2, [r3, #24]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002156:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6999      	ldr	r1, [r3, #24]
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	021a      	lsls	r2, r3, #8
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	619a      	str	r2, [r3, #24]
      break;
 800216c:	e043      	b.n	80021f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68b9      	ldr	r1, [r7, #8]
 8002174:	4618      	mov	r0, r3
 8002176:	f000 fa61 	bl	800263c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	69da      	ldr	r2, [r3, #28]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f042 0208 	orr.w	r2, r2, #8
 8002188:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	69da      	ldr	r2, [r3, #28]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0204 	bic.w	r2, r2, #4
 8002198:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	69d9      	ldr	r1, [r3, #28]
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	691a      	ldr	r2, [r3, #16]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	61da      	str	r2, [r3, #28]
      break;
 80021ac:	e023      	b.n	80021f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68b9      	ldr	r1, [r7, #8]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f000 faab 	bl	8002710 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	69da      	ldr	r2, [r3, #28]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	69da      	ldr	r2, [r3, #28]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	69d9      	ldr	r1, [r3, #28]
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	021a      	lsls	r2, r3, #8
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	61da      	str	r2, [r3, #28]
      break;
 80021ee:	e002      	b.n	80021f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	75fb      	strb	r3, [r7, #23]
      break;
 80021f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80021fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002212:	2300      	movs	r3, #0
 8002214:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800221c:	2b01      	cmp	r3, #1
 800221e:	d101      	bne.n	8002224 <HAL_TIM_ConfigClockSource+0x1c>
 8002220:	2302      	movs	r3, #2
 8002222:	e0b4      	b.n	800238e <HAL_TIM_ConfigClockSource+0x186>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002242:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800224a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800225c:	d03e      	beq.n	80022dc <HAL_TIM_ConfigClockSource+0xd4>
 800225e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002262:	f200 8087 	bhi.w	8002374 <HAL_TIM_ConfigClockSource+0x16c>
 8002266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800226a:	f000 8086 	beq.w	800237a <HAL_TIM_ConfigClockSource+0x172>
 800226e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002272:	d87f      	bhi.n	8002374 <HAL_TIM_ConfigClockSource+0x16c>
 8002274:	2b70      	cmp	r3, #112	; 0x70
 8002276:	d01a      	beq.n	80022ae <HAL_TIM_ConfigClockSource+0xa6>
 8002278:	2b70      	cmp	r3, #112	; 0x70
 800227a:	d87b      	bhi.n	8002374 <HAL_TIM_ConfigClockSource+0x16c>
 800227c:	2b60      	cmp	r3, #96	; 0x60
 800227e:	d050      	beq.n	8002322 <HAL_TIM_ConfigClockSource+0x11a>
 8002280:	2b60      	cmp	r3, #96	; 0x60
 8002282:	d877      	bhi.n	8002374 <HAL_TIM_ConfigClockSource+0x16c>
 8002284:	2b50      	cmp	r3, #80	; 0x50
 8002286:	d03c      	beq.n	8002302 <HAL_TIM_ConfigClockSource+0xfa>
 8002288:	2b50      	cmp	r3, #80	; 0x50
 800228a:	d873      	bhi.n	8002374 <HAL_TIM_ConfigClockSource+0x16c>
 800228c:	2b40      	cmp	r3, #64	; 0x40
 800228e:	d058      	beq.n	8002342 <HAL_TIM_ConfigClockSource+0x13a>
 8002290:	2b40      	cmp	r3, #64	; 0x40
 8002292:	d86f      	bhi.n	8002374 <HAL_TIM_ConfigClockSource+0x16c>
 8002294:	2b30      	cmp	r3, #48	; 0x30
 8002296:	d064      	beq.n	8002362 <HAL_TIM_ConfigClockSource+0x15a>
 8002298:	2b30      	cmp	r3, #48	; 0x30
 800229a:	d86b      	bhi.n	8002374 <HAL_TIM_ConfigClockSource+0x16c>
 800229c:	2b20      	cmp	r3, #32
 800229e:	d060      	beq.n	8002362 <HAL_TIM_ConfigClockSource+0x15a>
 80022a0:	2b20      	cmp	r3, #32
 80022a2:	d867      	bhi.n	8002374 <HAL_TIM_ConfigClockSource+0x16c>
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d05c      	beq.n	8002362 <HAL_TIM_ConfigClockSource+0x15a>
 80022a8:	2b10      	cmp	r3, #16
 80022aa:	d05a      	beq.n	8002362 <HAL_TIM_ConfigClockSource+0x15a>
 80022ac:	e062      	b.n	8002374 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6818      	ldr	r0, [r3, #0]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	6899      	ldr	r1, [r3, #8]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	f000 faf1 	bl	80028a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80022d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	609a      	str	r2, [r3, #8]
      break;
 80022da:	e04f      	b.n	800237c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	6899      	ldr	r1, [r3, #8]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	f000 fada 	bl	80028a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022fe:	609a      	str	r2, [r3, #8]
      break;
 8002300:	e03c      	b.n	800237c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6818      	ldr	r0, [r3, #0]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	6859      	ldr	r1, [r3, #4]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	461a      	mov	r2, r3
 8002310:	f000 fa4e 	bl	80027b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2150      	movs	r1, #80	; 0x50
 800231a:	4618      	mov	r0, r3
 800231c:	f000 faa7 	bl	800286e <TIM_ITRx_SetConfig>
      break;
 8002320:	e02c      	b.n	800237c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	6859      	ldr	r1, [r3, #4]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	461a      	mov	r2, r3
 8002330:	f000 fa6d 	bl	800280e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2160      	movs	r1, #96	; 0x60
 800233a:	4618      	mov	r0, r3
 800233c:	f000 fa97 	bl	800286e <TIM_ITRx_SetConfig>
      break;
 8002340:	e01c      	b.n	800237c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6818      	ldr	r0, [r3, #0]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	6859      	ldr	r1, [r3, #4]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	461a      	mov	r2, r3
 8002350:	f000 fa2e 	bl	80027b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2140      	movs	r1, #64	; 0x40
 800235a:	4618      	mov	r0, r3
 800235c:	f000 fa87 	bl	800286e <TIM_ITRx_SetConfig>
      break;
 8002360:	e00c      	b.n	800237c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4619      	mov	r1, r3
 800236c:	4610      	mov	r0, r2
 800236e:	f000 fa7e 	bl	800286e <TIM_ITRx_SetConfig>
      break;
 8002372:	e003      	b.n	800237c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	73fb      	strb	r3, [r7, #15]
      break;
 8002378:	e000      	b.n	800237c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800237a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800238c:	7bfb      	ldrb	r3, [r7, #15]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a34      	ldr	r2, [pc, #208]	; (800247c <TIM_Base_SetConfig+0xe4>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d00f      	beq.n	80023d0 <TIM_Base_SetConfig+0x38>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023b6:	d00b      	beq.n	80023d0 <TIM_Base_SetConfig+0x38>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a31      	ldr	r2, [pc, #196]	; (8002480 <TIM_Base_SetConfig+0xe8>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d007      	beq.n	80023d0 <TIM_Base_SetConfig+0x38>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a30      	ldr	r2, [pc, #192]	; (8002484 <TIM_Base_SetConfig+0xec>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d003      	beq.n	80023d0 <TIM_Base_SetConfig+0x38>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a2f      	ldr	r2, [pc, #188]	; (8002488 <TIM_Base_SetConfig+0xf0>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d108      	bne.n	80023e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	4313      	orrs	r3, r2
 80023e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a25      	ldr	r2, [pc, #148]	; (800247c <TIM_Base_SetConfig+0xe4>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d01b      	beq.n	8002422 <TIM_Base_SetConfig+0x8a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f0:	d017      	beq.n	8002422 <TIM_Base_SetConfig+0x8a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a22      	ldr	r2, [pc, #136]	; (8002480 <TIM_Base_SetConfig+0xe8>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d013      	beq.n	8002422 <TIM_Base_SetConfig+0x8a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a21      	ldr	r2, [pc, #132]	; (8002484 <TIM_Base_SetConfig+0xec>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d00f      	beq.n	8002422 <TIM_Base_SetConfig+0x8a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a20      	ldr	r2, [pc, #128]	; (8002488 <TIM_Base_SetConfig+0xf0>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d00b      	beq.n	8002422 <TIM_Base_SetConfig+0x8a>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a1f      	ldr	r2, [pc, #124]	; (800248c <TIM_Base_SetConfig+0xf4>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d007      	beq.n	8002422 <TIM_Base_SetConfig+0x8a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a1e      	ldr	r2, [pc, #120]	; (8002490 <TIM_Base_SetConfig+0xf8>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d003      	beq.n	8002422 <TIM_Base_SetConfig+0x8a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a1d      	ldr	r2, [pc, #116]	; (8002494 <TIM_Base_SetConfig+0xfc>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d108      	bne.n	8002434 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	4313      	orrs	r3, r2
 8002432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	4313      	orrs	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a08      	ldr	r2, [pc, #32]	; (800247c <TIM_Base_SetConfig+0xe4>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d103      	bne.n	8002468 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	691a      	ldr	r2, [r3, #16]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	615a      	str	r2, [r3, #20]
}
 800246e:	bf00      	nop
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	40010000 	.word	0x40010000
 8002480:	40000400 	.word	0x40000400
 8002484:	40000800 	.word	0x40000800
 8002488:	40000c00 	.word	0x40000c00
 800248c:	40014000 	.word	0x40014000
 8002490:	40014400 	.word	0x40014400
 8002494:	40014800 	.word	0x40014800

08002498 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	f023 0201 	bic.w	r2, r3, #1
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f023 0303 	bic.w	r3, r3, #3
 80024ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f023 0302 	bic.w	r3, r3, #2
 80024e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a1c      	ldr	r2, [pc, #112]	; (8002560 <TIM_OC1_SetConfig+0xc8>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d10c      	bne.n	800250e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f023 0308 	bic.w	r3, r3, #8
 80024fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	4313      	orrs	r3, r2
 8002504:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f023 0304 	bic.w	r3, r3, #4
 800250c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a13      	ldr	r2, [pc, #76]	; (8002560 <TIM_OC1_SetConfig+0xc8>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d111      	bne.n	800253a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800251c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002524:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	621a      	str	r2, [r3, #32]
}
 8002554:	bf00      	nop
 8002556:	371c      	adds	r7, #28
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	40010000 	.word	0x40010000

08002564 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002564:	b480      	push	{r7}
 8002566:	b087      	sub	sp, #28
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	f023 0210 	bic.w	r2, r3, #16
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800259a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	021b      	lsls	r3, r3, #8
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f023 0320 	bic.w	r3, r3, #32
 80025ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a1e      	ldr	r2, [pc, #120]	; (8002638 <TIM_OC2_SetConfig+0xd4>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d10d      	bne.n	80025e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a15      	ldr	r2, [pc, #84]	; (8002638 <TIM_OC2_SetConfig+0xd4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d113      	bne.n	8002610 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	4313      	orrs	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	621a      	str	r2, [r3, #32]
}
 800262a:	bf00      	nop
 800262c:	371c      	adds	r7, #28
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40010000 	.word	0x40010000

0800263c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800266a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f023 0303 	bic.w	r3, r3, #3
 8002672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	4313      	orrs	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002684:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	021b      	lsls	r3, r3, #8
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	4313      	orrs	r3, r2
 8002690:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a1d      	ldr	r2, [pc, #116]	; (800270c <TIM_OC3_SetConfig+0xd0>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d10d      	bne.n	80026b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	021b      	lsls	r3, r3, #8
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a14      	ldr	r2, [pc, #80]	; (800270c <TIM_OC3_SetConfig+0xd0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d113      	bne.n	80026e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	621a      	str	r2, [r3, #32]
}
 8002700:	bf00      	nop
 8002702:	371c      	adds	r7, #28
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	40010000 	.word	0x40010000

08002710 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002710:	b480      	push	{r7}
 8002712:	b087      	sub	sp, #28
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800273e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	021b      	lsls	r3, r3, #8
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	4313      	orrs	r3, r2
 8002752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800275a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	031b      	lsls	r3, r3, #12
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	4313      	orrs	r3, r2
 8002766:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a10      	ldr	r2, [pc, #64]	; (80027ac <TIM_OC4_SetConfig+0x9c>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d109      	bne.n	8002784 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002776:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	019b      	lsls	r3, r3, #6
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	4313      	orrs	r3, r2
 8002782:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	621a      	str	r2, [r3, #32]
}
 800279e:	bf00      	nop
 80027a0:	371c      	adds	r7, #28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	40010000 	.word	0x40010000

080027b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	f023 0201 	bic.w	r2, r3, #1
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f023 030a 	bic.w	r3, r3, #10
 80027ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	621a      	str	r2, [r3, #32]
}
 8002802:	bf00      	nop
 8002804:	371c      	adds	r7, #28
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800280e:	b480      	push	{r7}
 8002810:	b087      	sub	sp, #28
 8002812:	af00      	add	r7, sp, #0
 8002814:	60f8      	str	r0, [r7, #12]
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	f023 0210 	bic.w	r2, r3, #16
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002838:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	031b      	lsls	r3, r3, #12
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	4313      	orrs	r3, r2
 8002842:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800284a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4313      	orrs	r3, r2
 8002854:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	621a      	str	r2, [r3, #32]
}
 8002862:	bf00      	nop
 8002864:	371c      	adds	r7, #28
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800286e:	b480      	push	{r7}
 8002870:	b085      	sub	sp, #20
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002884:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4313      	orrs	r3, r2
 800288c:	f043 0307 	orr.w	r3, r3, #7
 8002890:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	609a      	str	r2, [r3, #8]
}
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b087      	sub	sp, #28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
 80028b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	021a      	lsls	r2, r3, #8
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	431a      	orrs	r2, r3
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	609a      	str	r2, [r3, #8]
}
 80028d8:	bf00      	nop
 80028da:	371c      	adds	r7, #28
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b087      	sub	sp, #28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	f003 031f 	and.w	r3, r3, #31
 80028f6:	2201      	movs	r2, #1
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6a1a      	ldr	r2, [r3, #32]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	43db      	mvns	r3, r3
 8002906:	401a      	ands	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a1a      	ldr	r2, [r3, #32]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	f003 031f 	and.w	r3, r3, #31
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	fa01 f303 	lsl.w	r3, r1, r3
 800291c:	431a      	orrs	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	621a      	str	r2, [r3, #32]
}
 8002922:	bf00      	nop
 8002924:	371c      	adds	r7, #28
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002944:	2302      	movs	r3, #2
 8002946:	e050      	b.n	80029ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800296e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	4313      	orrs	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a1c      	ldr	r2, [pc, #112]	; (80029f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d018      	beq.n	80029be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002994:	d013      	beq.n	80029be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a18      	ldr	r2, [pc, #96]	; (80029fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d00e      	beq.n	80029be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a16      	ldr	r2, [pc, #88]	; (8002a00 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d009      	beq.n	80029be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a15      	ldr	r2, [pc, #84]	; (8002a04 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d004      	beq.n	80029be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a13      	ldr	r2, [pc, #76]	; (8002a08 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d10c      	bne.n	80029d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	40010000 	.word	0x40010000
 80029fc:	40000400 	.word	0x40000400
 8002a00:	40000800 	.word	0x40000800
 8002a04:	40000c00 	.word	0x40000c00
 8002a08:	40014000 	.word	0x40014000

08002a0c <__libc_init_array>:
 8002a0c:	b570      	push	{r4, r5, r6, lr}
 8002a0e:	4d0d      	ldr	r5, [pc, #52]	; (8002a44 <__libc_init_array+0x38>)
 8002a10:	4c0d      	ldr	r4, [pc, #52]	; (8002a48 <__libc_init_array+0x3c>)
 8002a12:	1b64      	subs	r4, r4, r5
 8002a14:	10a4      	asrs	r4, r4, #2
 8002a16:	2600      	movs	r6, #0
 8002a18:	42a6      	cmp	r6, r4
 8002a1a:	d109      	bne.n	8002a30 <__libc_init_array+0x24>
 8002a1c:	4d0b      	ldr	r5, [pc, #44]	; (8002a4c <__libc_init_array+0x40>)
 8002a1e:	4c0c      	ldr	r4, [pc, #48]	; (8002a50 <__libc_init_array+0x44>)
 8002a20:	f000 f820 	bl	8002a64 <_init>
 8002a24:	1b64      	subs	r4, r4, r5
 8002a26:	10a4      	asrs	r4, r4, #2
 8002a28:	2600      	movs	r6, #0
 8002a2a:	42a6      	cmp	r6, r4
 8002a2c:	d105      	bne.n	8002a3a <__libc_init_array+0x2e>
 8002a2e:	bd70      	pop	{r4, r5, r6, pc}
 8002a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a34:	4798      	blx	r3
 8002a36:	3601      	adds	r6, #1
 8002a38:	e7ee      	b.n	8002a18 <__libc_init_array+0xc>
 8002a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a3e:	4798      	blx	r3
 8002a40:	3601      	adds	r6, #1
 8002a42:	e7f2      	b.n	8002a2a <__libc_init_array+0x1e>
 8002a44:	08002a94 	.word	0x08002a94
 8002a48:	08002a94 	.word	0x08002a94
 8002a4c:	08002a94 	.word	0x08002a94
 8002a50:	08002a98 	.word	0x08002a98

08002a54 <memset>:
 8002a54:	4402      	add	r2, r0
 8002a56:	4603      	mov	r3, r0
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d100      	bne.n	8002a5e <memset+0xa>
 8002a5c:	4770      	bx	lr
 8002a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a62:	e7f9      	b.n	8002a58 <memset+0x4>

08002a64 <_init>:
 8002a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a66:	bf00      	nop
 8002a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a6a:	bc08      	pop	{r3}
 8002a6c:	469e      	mov	lr, r3
 8002a6e:	4770      	bx	lr

08002a70 <_fini>:
 8002a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a72:	bf00      	nop
 8002a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a76:	bc08      	pop	{r3}
 8002a78:	469e      	mov	lr, r3
 8002a7a:	4770      	bx	lr
