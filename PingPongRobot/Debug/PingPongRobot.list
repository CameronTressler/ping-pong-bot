
PingPongRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cc8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  08008e88  08008e88  00018e88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092fc  080092fc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080092fc  080092fc  000192fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009304  08009304  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009304  08009304  00019304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009308  08009308  00019308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800930c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  200001dc  080094e8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  080094e8  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132b9  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002385  00000000  00000000  000334c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  00035850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f48  00000000  00000000  00036870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b3bb  00000000  00000000  000377b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012be1  00000000  00000000  00062b73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010af30  00000000  00000000  00075754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00180684  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054cc  00000000  00000000  001806d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008e70 	.word	0x08008e70

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	08008e70 	.word	0x08008e70

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000edc:	b590      	push	{r4, r7, lr}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee2:	f000 febc 	bl	8001c5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee6:	f000 f843 	bl	8000f70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eea:	f000 f9bb 	bl	8001264 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000eee:	f000 f8d1 	bl	8001094 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000ef2:	f000 f93f 	bl	8001174 <MX_TIM4_Init>
  MX_LPUART1_UART_Init();
 8000ef6:	f000 f881 	bl	8000ffc <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000efa:	2104      	movs	r1, #4
 8000efc:	4816      	ldr	r0, [pc, #88]	; (8000f58 <main+0x7c>)
 8000efe:	f002 ff43 	bl	8003d88 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000f02:	2100      	movs	r1, #0
 8000f04:	4815      	ldr	r0, [pc, #84]	; (8000f5c <main+0x80>)
 8000f06:	f003 f8a7 	bl	8004058 <HAL_TIM_IC_Start_IT>

  uint32_t* tim4_ccr2 = (uint32_t*) (TIM4_ADDR + TIM_CCR2_OFFSET);
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <main+0x84>)
 8000f0c:	607b      	str	r3, [r7, #4]

  *tim4_ccr2 &= ~CCR_MASK;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	0c1b      	lsrs	r3, r3, #16
 8000f14:	041b      	lsls	r3, r3, #16
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	6013      	str	r3, [r2, #0]
  *tim4_ccr2 |= 1;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f043 0201 	orr.w	r2, r3, #1
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  distance_in = ((float) count_us) / 144.0;
 8000f26:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <main+0x88>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	ee07 3a90 	vmov	s15, r3
 8000f2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f32:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8000f68 <main+0x8c>
 8000f36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f3a:	edc7 7a00 	vstr	s15, [r7]
	  printf("echo pulse = %i us, distance = %f inches\n\r", count_us, distance_in);
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <main+0x88>)
 8000f40:	681c      	ldr	r4, [r3, #0]
 8000f42:	6838      	ldr	r0, [r7, #0]
 8000f44:	f7ff fb18 	bl	8000578 <__aeabi_f2d>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4621      	mov	r1, r4
 8000f4e:	4807      	ldr	r0, [pc, #28]	; (8000f6c <main+0x90>)
 8000f50:	f005 feca 	bl	8006ce8 <iprintf>
	  distance_in = ((float) count_us) / 144.0;
 8000f54:	e7e7      	b.n	8000f26 <main+0x4a>
 8000f56:	bf00      	nop
 8000f58:	200002d4 	.word	0x200002d4
 8000f5c:	20000288 	.word	0x20000288
 8000f60:	40000838 	.word	0x40000838
 8000f64:	20000324 	.word	0x20000324
 8000f68:	43100000 	.word	0x43100000
 8000f6c:	08008e88 	.word	0x08008e88

08000f70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b096      	sub	sp, #88	; 0x58
 8000f74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	2244      	movs	r2, #68	; 0x44
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f005 fa40 	bl	8006404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f84:	463b      	mov	r3, r7
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
 8000f90:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f92:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f96:	f001 f99b 	bl	80022d0 <HAL_PWREx_ControlVoltageScaling>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fa0:	f000 fb70 	bl	8001684 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000fa4:	2310      	movs	r3, #16
 8000fa6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000fb0:	2360      	movs	r3, #96	; 0x60
 8000fb2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f001 fa3b 	bl	8002438 <HAL_RCC_OscConfig>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000fc8:	f000 fb5c 	bl	8001684 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fcc:	230f      	movs	r3, #15
 8000fce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f001 fe41 	bl	8002c6c <HAL_RCC_ClockConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000ff0:	f000 fb48 	bl	8001684 <Error_Handler>
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	3758      	adds	r7, #88	; 0x58
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001000:	4b22      	ldr	r3, [pc, #136]	; (800108c <MX_LPUART1_UART_Init+0x90>)
 8001002:	4a23      	ldr	r2, [pc, #140]	; (8001090 <MX_LPUART1_UART_Init+0x94>)
 8001004:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001006:	4b21      	ldr	r3, [pc, #132]	; (800108c <MX_LPUART1_UART_Init+0x90>)
 8001008:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800100c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800100e:	4b1f      	ldr	r3, [pc, #124]	; (800108c <MX_LPUART1_UART_Init+0x90>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001014:	4b1d      	ldr	r3, [pc, #116]	; (800108c <MX_LPUART1_UART_Init+0x90>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <MX_LPUART1_UART_Init+0x90>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001020:	4b1a      	ldr	r3, [pc, #104]	; (800108c <MX_LPUART1_UART_Init+0x90>)
 8001022:	220c      	movs	r2, #12
 8001024:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <MX_LPUART1_UART_Init+0x90>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800102c:	4b17      	ldr	r3, [pc, #92]	; (800108c <MX_LPUART1_UART_Init+0x90>)
 800102e:	2200      	movs	r2, #0
 8001030:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <MX_LPUART1_UART_Init+0x90>)
 8001034:	2200      	movs	r2, #0
 8001036:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001038:	4b14      	ldr	r3, [pc, #80]	; (800108c <MX_LPUART1_UART_Init+0x90>)
 800103a:	2200      	movs	r2, #0
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <MX_LPUART1_UART_Init+0x90>)
 8001040:	2200      	movs	r2, #0
 8001042:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001044:	4811      	ldr	r0, [pc, #68]	; (800108c <MX_LPUART1_UART_Init+0x90>)
 8001046:	f004 fb17 	bl	8005678 <HAL_UART_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001050:	f000 fb18 	bl	8001684 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001054:	2100      	movs	r1, #0
 8001056:	480d      	ldr	r0, [pc, #52]	; (800108c <MX_LPUART1_UART_Init+0x90>)
 8001058:	f005 f8e0 	bl	800621c <HAL_UARTEx_SetTxFifoThreshold>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001062:	f000 fb0f 	bl	8001684 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001066:	2100      	movs	r1, #0
 8001068:	4808      	ldr	r0, [pc, #32]	; (800108c <MX_LPUART1_UART_Init+0x90>)
 800106a:	f005 f915 	bl	8006298 <HAL_UARTEx_SetRxFifoThreshold>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001074:	f000 fb06 	bl	8001684 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001078:	4804      	ldr	r0, [pc, #16]	; (800108c <MX_LPUART1_UART_Init+0x90>)
 800107a:	f005 f896 	bl	80061aa <HAL_UARTEx_DisableFifoMode>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001084:	f000 fafe 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200001f8 	.word	0x200001f8
 8001090:	40008000 	.word	0x40008000

08001094 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08c      	sub	sp, #48	; 0x30
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800109a:	f107 0320 	add.w	r3, r7, #32
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010c0:	4b2b      	ldr	r3, [pc, #172]	; (8001170 <MX_TIM2_Init+0xdc>)
 80010c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 80010c8:	4b29      	ldr	r3, [pc, #164]	; (8001170 <MX_TIM2_Init+0xdc>)
 80010ca:	2203      	movs	r2, #3
 80010cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ce:	4b28      	ldr	r3, [pc, #160]	; (8001170 <MX_TIM2_Init+0xdc>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80010d4:	4b26      	ldr	r3, [pc, #152]	; (8001170 <MX_TIM2_Init+0xdc>)
 80010d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010dc:	4b24      	ldr	r3, [pc, #144]	; (8001170 <MX_TIM2_Init+0xdc>)
 80010de:	2200      	movs	r2, #0
 80010e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e2:	4b23      	ldr	r3, [pc, #140]	; (8001170 <MX_TIM2_Init+0xdc>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010e8:	4821      	ldr	r0, [pc, #132]	; (8001170 <MX_TIM2_Init+0xdc>)
 80010ea:	f002 fd95 	bl	8003c18 <HAL_TIM_Base_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80010f4:	f000 fac6 	bl	8001684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010fe:	f107 0320 	add.w	r3, r7, #32
 8001102:	4619      	mov	r1, r3
 8001104:	481a      	ldr	r0, [pc, #104]	; (8001170 <MX_TIM2_Init+0xdc>)
 8001106:	f003 fbc1 	bl	800488c <HAL_TIM_ConfigClockSource>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001110:	f000 fab8 	bl	8001684 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001114:	4816      	ldr	r0, [pc, #88]	; (8001170 <MX_TIM2_Init+0xdc>)
 8001116:	f002 ff3d 	bl	8003f94 <HAL_TIM_IC_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001120:	f000 fab0 	bl	8001684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	480f      	ldr	r0, [pc, #60]	; (8001170 <MX_TIM2_Init+0xdc>)
 8001134:	f004 f9fa 	bl	800552c <HAL_TIMEx_MasterConfigSynchronization>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800113e:	f000 faa1 	bl	8001684 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001146:	2301      	movs	r3, #1
 8001148:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2200      	movs	r2, #0
 8001156:	4619      	mov	r1, r3
 8001158:	4805      	ldr	r0, [pc, #20]	; (8001170 <MX_TIM2_Init+0xdc>)
 800115a:	f003 f9e6 	bl	800452a <HAL_TIM_IC_ConfigChannel>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001164:	f000 fa8e 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001168:	bf00      	nop
 800116a:	3730      	adds	r7, #48	; 0x30
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000288 	.word	0x20000288

08001174 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08e      	sub	sp, #56	; 0x38
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800117a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001194:	463b      	mov	r3, r7
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
 80011a0:	611a      	str	r2, [r3, #16]
 80011a2:	615a      	str	r2, [r3, #20]
 80011a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011a6:	4b2d      	ldr	r3, [pc, #180]	; (800125c <MX_TIM4_Init+0xe8>)
 80011a8:	4a2d      	ldr	r2, [pc, #180]	; (8001260 <MX_TIM4_Init+0xec>)
 80011aa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80011ac:	4b2b      	ldr	r3, [pc, #172]	; (800125c <MX_TIM4_Init+0xe8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b2:	4b2a      	ldr	r3, [pc, #168]	; (800125c <MX_TIM4_Init+0xe8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80011b8:	4b28      	ldr	r3, [pc, #160]	; (800125c <MX_TIM4_Init+0xe8>)
 80011ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011be:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c0:	4b26      	ldr	r3, [pc, #152]	; (800125c <MX_TIM4_Init+0xe8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c6:	4b25      	ldr	r3, [pc, #148]	; (800125c <MX_TIM4_Init+0xe8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011cc:	4823      	ldr	r0, [pc, #140]	; (800125c <MX_TIM4_Init+0xe8>)
 80011ce:	f002 fd23 	bl	8003c18 <HAL_TIM_Base_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80011d8:	f000 fa54 	bl	8001684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011e6:	4619      	mov	r1, r3
 80011e8:	481c      	ldr	r0, [pc, #112]	; (800125c <MX_TIM4_Init+0xe8>)
 80011ea:	f003 fb4f 	bl	800488c <HAL_TIM_ConfigClockSource>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80011f4:	f000 fa46 	bl	8001684 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80011f8:	4818      	ldr	r0, [pc, #96]	; (800125c <MX_TIM4_Init+0xe8>)
 80011fa:	f002 fd64 	bl	8003cc6 <HAL_TIM_PWM_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001204:	f000 fa3e 	bl	8001684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001210:	f107 031c 	add.w	r3, r7, #28
 8001214:	4619      	mov	r1, r3
 8001216:	4811      	ldr	r0, [pc, #68]	; (800125c <MX_TIM4_Init+0xe8>)
 8001218:	f004 f988 	bl	800552c <HAL_TIMEx_MasterConfigSynchronization>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001222:	f000 fa2f 	bl	8001684 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001226:	2360      	movs	r3, #96	; 0x60
 8001228:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001236:	463b      	mov	r3, r7
 8001238:	2204      	movs	r2, #4
 800123a:	4619      	mov	r1, r3
 800123c:	4807      	ldr	r0, [pc, #28]	; (800125c <MX_TIM4_Init+0xe8>)
 800123e:	f003 fa11 	bl	8004664 <HAL_TIM_PWM_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001248:	f000 fa1c 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800124c:	4803      	ldr	r0, [pc, #12]	; (800125c <MX_TIM4_Init+0xe8>)
 800124e:	f000 fb5b 	bl	8001908 <HAL_TIM_MspPostInit>

}
 8001252:	bf00      	nop
 8001254:	3738      	adds	r7, #56	; 0x38
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200002d4 	.word	0x200002d4
 8001260:	40000800 	.word	0x40000800

08001264 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08e      	sub	sp, #56	; 0x38
 8001268:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800127a:	4bb1      	ldr	r3, [pc, #708]	; (8001540 <MX_GPIO_Init+0x2dc>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	4ab0      	ldr	r2, [pc, #704]	; (8001540 <MX_GPIO_Init+0x2dc>)
 8001280:	f043 0310 	orr.w	r3, r3, #16
 8001284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001286:	4bae      	ldr	r3, [pc, #696]	; (8001540 <MX_GPIO_Init+0x2dc>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	f003 0310 	and.w	r3, r3, #16
 800128e:	623b      	str	r3, [r7, #32]
 8001290:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001292:	4bab      	ldr	r3, [pc, #684]	; (8001540 <MX_GPIO_Init+0x2dc>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	4aaa      	ldr	r2, [pc, #680]	; (8001540 <MX_GPIO_Init+0x2dc>)
 8001298:	f043 0304 	orr.w	r3, r3, #4
 800129c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129e:	4ba8      	ldr	r3, [pc, #672]	; (8001540 <MX_GPIO_Init+0x2dc>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a2:	f003 0304 	and.w	r3, r3, #4
 80012a6:	61fb      	str	r3, [r7, #28]
 80012a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012aa:	4ba5      	ldr	r3, [pc, #660]	; (8001540 <MX_GPIO_Init+0x2dc>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	4aa4      	ldr	r2, [pc, #656]	; (8001540 <MX_GPIO_Init+0x2dc>)
 80012b0:	f043 0320 	orr.w	r3, r3, #32
 80012b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b6:	4ba2      	ldr	r3, [pc, #648]	; (8001540 <MX_GPIO_Init+0x2dc>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ba:	f003 0320 	and.w	r3, r3, #32
 80012be:	61bb      	str	r3, [r7, #24]
 80012c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012c2:	4b9f      	ldr	r3, [pc, #636]	; (8001540 <MX_GPIO_Init+0x2dc>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c6:	4a9e      	ldr	r2, [pc, #632]	; (8001540 <MX_GPIO_Init+0x2dc>)
 80012c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ce:	4b9c      	ldr	r3, [pc, #624]	; (8001540 <MX_GPIO_Init+0x2dc>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	4b99      	ldr	r3, [pc, #612]	; (8001540 <MX_GPIO_Init+0x2dc>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012de:	4a98      	ldr	r2, [pc, #608]	; (8001540 <MX_GPIO_Init+0x2dc>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e6:	4b96      	ldr	r3, [pc, #600]	; (8001540 <MX_GPIO_Init+0x2dc>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	4b93      	ldr	r3, [pc, #588]	; (8001540 <MX_GPIO_Init+0x2dc>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f6:	4a92      	ldr	r2, [pc, #584]	; (8001540 <MX_GPIO_Init+0x2dc>)
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fe:	4b90      	ldr	r3, [pc, #576]	; (8001540 <MX_GPIO_Init+0x2dc>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800130a:	4b8d      	ldr	r3, [pc, #564]	; (8001540 <MX_GPIO_Init+0x2dc>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130e:	4a8c      	ldr	r2, [pc, #560]	; (8001540 <MX_GPIO_Init+0x2dc>)
 8001310:	f043 0308 	orr.w	r3, r3, #8
 8001314:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001316:	4b8a      	ldr	r3, [pc, #552]	; (8001540 <MX_GPIO_Init+0x2dc>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001322:	4b87      	ldr	r3, [pc, #540]	; (8001540 <MX_GPIO_Init+0x2dc>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001326:	4a86      	ldr	r2, [pc, #536]	; (8001540 <MX_GPIO_Init+0x2dc>)
 8001328:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800132c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132e:	4b84      	ldr	r3, [pc, #528]	; (8001540 <MX_GPIO_Init+0x2dc>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800133a:	f001 f86d 	bl	8002418 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800133e:	230c      	movs	r3, #12
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800134e:	230d      	movs	r3, #13
 8001350:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001356:	4619      	mov	r1, r3
 8001358:	487a      	ldr	r0, [pc, #488]	; (8001544 <MX_GPIO_Init+0x2e0>)
 800135a:	f000 fe07 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800135e:	2307      	movs	r3, #7
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001362:	2312      	movs	r3, #18
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136a:	2303      	movs	r3, #3
 800136c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800136e:	2304      	movs	r3, #4
 8001370:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001376:	4619      	mov	r1, r3
 8001378:	4873      	ldr	r0, [pc, #460]	; (8001548 <MX_GPIO_Init+0x2e4>)
 800137a:	f000 fdf7 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800137e:	2380      	movs	r3, #128	; 0x80
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800138e:	230d      	movs	r3, #13
 8001390:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001396:	4619      	mov	r1, r3
 8001398:	486b      	ldr	r0, [pc, #428]	; (8001548 <MX_GPIO_Init+0x2e4>)
 800139a:	f000 fde7 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800139e:	233f      	movs	r3, #63	; 0x3f
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013a2:	230b      	movs	r3, #11
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ae:	4619      	mov	r1, r3
 80013b0:	4866      	ldr	r0, [pc, #408]	; (800154c <MX_GPIO_Init+0x2e8>)
 80013b2:	f000 fddb 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80013b6:	230a      	movs	r3, #10
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013ba:	230b      	movs	r3, #11
 80013bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c6:	4619      	mov	r1, r3
 80013c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013cc:	f000 fdce 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013d0:	23f0      	movs	r3, #240	; 0xf0
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013dc:	2303      	movs	r3, #3
 80013de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013e0:	2305      	movs	r3, #5
 80013e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e8:	4619      	mov	r1, r3
 80013ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ee:	f000 fdbd 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013f2:	2301      	movs	r3, #1
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001402:	2302      	movs	r3, #2
 8001404:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140a:	4619      	mov	r1, r3
 800140c:	4850      	ldr	r0, [pc, #320]	; (8001550 <MX_GPIO_Init+0x2ec>)
 800140e:	f000 fdad 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001412:	2302      	movs	r3, #2
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001416:	230b      	movs	r3, #11
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001422:	4619      	mov	r1, r3
 8001424:	484a      	ldr	r0, [pc, #296]	; (8001550 <MX_GPIO_Init+0x2ec>)
 8001426:	f000 fda1 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 800142a:	2344      	movs	r3, #68	; 0x44
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800142e:	2303      	movs	r3, #3
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143a:	4619      	mov	r1, r3
 800143c:	4844      	ldr	r0, [pc, #272]	; (8001550 <MX_GPIO_Init+0x2ec>)
 800143e:	f000 fd95 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001442:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001448:	2302      	movs	r3, #2
 800144a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	2300      	movs	r3, #0
 8001452:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001454:	2301      	movs	r3, #1
 8001456:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145c:	4619      	mov	r1, r3
 800145e:	4839      	ldr	r0, [pc, #228]	; (8001544 <MX_GPIO_Init+0x2e0>)
 8001460:	f000 fd84 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001464:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001476:	2303      	movs	r3, #3
 8001478:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800147a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147e:	4619      	mov	r1, r3
 8001480:	4830      	ldr	r0, [pc, #192]	; (8001544 <MX_GPIO_Init+0x2e0>)
 8001482:	f000 fd73 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001486:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148c:	2302      	movs	r3, #2
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001498:	230d      	movs	r3, #13
 800149a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a0:	4619      	mov	r1, r3
 80014a2:	482b      	ldr	r0, [pc, #172]	; (8001550 <MX_GPIO_Init+0x2ec>)
 80014a4:	f000 fd62 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80014a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ae:	2302      	movs	r3, #2
 80014b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	2300      	movs	r3, #0
 80014b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80014ba:	230e      	movs	r3, #14
 80014bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c2:	4619      	mov	r1, r3
 80014c4:	4822      	ldr	r0, [pc, #136]	; (8001550 <MX_GPIO_Init+0x2ec>)
 80014c6:	f000 fd51 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d0:	2302      	movs	r3, #2
 80014d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d8:	2303      	movs	r3, #3
 80014da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014dc:	2307      	movs	r3, #7
 80014de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e4:	4619      	mov	r1, r3
 80014e6:	481b      	ldr	r0, [pc, #108]	; (8001554 <MX_GPIO_Init+0x2f0>)
 80014e8:	f000 fd40 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014ec:	2340      	movs	r3, #64	; 0x40
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80014fc:	230d      	movs	r3, #13
 80014fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001504:	4619      	mov	r1, r3
 8001506:	4811      	ldr	r0, [pc, #68]	; (800154c <MX_GPIO_Init+0x2e8>)
 8001508:	f000 fd30 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800150c:	2380      	movs	r3, #128	; 0x80
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2302      	movs	r3, #2
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	2300      	movs	r3, #0
 800151a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800151c:	2302      	movs	r3, #2
 800151e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001524:	4619      	mov	r1, r3
 8001526:	4809      	ldr	r0, [pc, #36]	; (800154c <MX_GPIO_Init+0x2e8>)
 8001528:	f000 fd20 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800152c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153a:	2303      	movs	r3, #3
 800153c:	633b      	str	r3, [r7, #48]	; 0x30
 800153e:	e00b      	b.n	8001558 <MX_GPIO_Init+0x2f4>
 8001540:	40021000 	.word	0x40021000
 8001544:	48001000 	.word	0x48001000
 8001548:	48001400 	.word	0x48001400
 800154c:	48000800 	.word	0x48000800
 8001550:	48000400 	.word	0x48000400
 8001554:	48000c00 	.word	0x48000c00
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001558:	230c      	movs	r3, #12
 800155a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800155c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001560:	4619      	mov	r1, r3
 8001562:	483c      	ldr	r0, [pc, #240]	; (8001654 <MX_GPIO_Init+0x3f0>)
 8001564:	f000 fd02 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001568:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800157a:	230a      	movs	r3, #10
 800157c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001582:	4619      	mov	r1, r3
 8001584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001588:	f000 fcf0 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800158c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001592:	2300      	movs	r3, #0
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159e:	4619      	mov	r1, r3
 80015a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a4:	f000 fce2 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015a8:	2301      	movs	r3, #1
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	2302      	movs	r3, #2
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b4:	2303      	movs	r3, #3
 80015b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80015b8:	2309      	movs	r3, #9
 80015ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c0:	4619      	mov	r1, r3
 80015c2:	4825      	ldr	r0, [pc, #148]	; (8001658 <MX_GPIO_Init+0x3f4>)
 80015c4:	f000 fcd2 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015c8:	2304      	movs	r3, #4
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d4:	2303      	movs	r3, #3
 80015d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80015d8:	230c      	movs	r3, #12
 80015da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e0:	4619      	mov	r1, r3
 80015e2:	481d      	ldr	r0, [pc, #116]	; (8001658 <MX_GPIO_Init+0x3f4>)
 80015e4:	f000 fcc2 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80015e8:	2378      	movs	r3, #120	; 0x78
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ec:	2302      	movs	r3, #2
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f4:	2303      	movs	r3, #3
 80015f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015f8:	2307      	movs	r3, #7
 80015fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001600:	4619      	mov	r1, r3
 8001602:	4815      	ldr	r0, [pc, #84]	; (8001658 <MX_GPIO_Init+0x3f4>)
 8001604:	f000 fcb2 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001608:	2338      	movs	r3, #56	; 0x38
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160c:	2302      	movs	r3, #2
 800160e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001614:	2303      	movs	r3, #3
 8001616:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001618:	2306      	movs	r3, #6
 800161a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001620:	4619      	mov	r1, r3
 8001622:	480e      	ldr	r0, [pc, #56]	; (800165c <MX_GPIO_Init+0x3f8>)
 8001624:	f000 fca2 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001628:	f44f 7340 	mov.w	r3, #768	; 0x300
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800162e:	2312      	movs	r3, #18
 8001630:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001636:	2303      	movs	r3, #3
 8001638:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800163a:	2304      	movs	r3, #4
 800163c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001642:	4619      	mov	r1, r3
 8001644:	4805      	ldr	r0, [pc, #20]	; (800165c <MX_GPIO_Init+0x3f8>)
 8001646:	f000 fc91 	bl	8001f6c <HAL_GPIO_Init>

}
 800164a:	bf00      	nop
 800164c:	3738      	adds	r7, #56	; 0x38
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	48000800 	.word	0x48000800
 8001658:	48000c00 	.word	0x48000c00
 800165c:	48000400 	.word	0x48000400

08001660 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001668:	1d39      	adds	r1, r7, #4
 800166a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800166e:	2201      	movs	r2, #1
 8001670:	4803      	ldr	r0, [pc, #12]	; (8001680 <__io_putchar+0x20>)
 8001672:	f004 f851 	bl	8005718 <HAL_UART_Transmit>
  return ch;
 8001676:	687b      	ldr	r3, [r7, #4]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	200001f8 	.word	0x200001f8

08001684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001688:	b672      	cpsid	i
}
 800168a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800168c:	e7fe      	b.n	800168c <Error_Handler+0x8>
	...

08001690 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <HAL_MspInit+0x44>)
 8001698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800169a:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <HAL_MspInit+0x44>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6613      	str	r3, [r2, #96]	; 0x60
 80016a2:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <HAL_MspInit+0x44>)
 80016a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <HAL_MspInit+0x44>)
 80016b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b2:	4a08      	ldr	r2, [pc, #32]	; (80016d4 <HAL_MspInit+0x44>)
 80016b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b8:	6593      	str	r3, [r2, #88]	; 0x58
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_MspInit+0x44>)
 80016bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c2:	603b      	str	r3, [r7, #0]
 80016c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	40021000 	.word	0x40021000

080016d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b0ae      	sub	sp, #184	; 0xb8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016f0:	f107 0310 	add.w	r3, r7, #16
 80016f4:	2294      	movs	r2, #148	; 0x94
 80016f6:	2100      	movs	r1, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f004 fe83 	bl	8006404 <memset>
  if(huart->Instance==LPUART1)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a22      	ldr	r2, [pc, #136]	; (800178c <HAL_UART_MspInit+0xb4>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d13d      	bne.n	8001784 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001708:	2320      	movs	r3, #32
 800170a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800170c:	2300      	movs	r3, #0
 800170e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001710:	f107 0310 	add.w	r3, r7, #16
 8001714:	4618      	mov	r0, r3
 8001716:	f001 fd67 	bl	80031e8 <HAL_RCCEx_PeriphCLKConfig>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001720:	f7ff ffb0 	bl	8001684 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001724:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <HAL_UART_MspInit+0xb8>)
 8001726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001728:	4a19      	ldr	r2, [pc, #100]	; (8001790 <HAL_UART_MspInit+0xb8>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001730:	4b17      	ldr	r3, [pc, #92]	; (8001790 <HAL_UART_MspInit+0xb8>)
 8001732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800173c:	4b14      	ldr	r3, [pc, #80]	; (8001790 <HAL_UART_MspInit+0xb8>)
 800173e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001740:	4a13      	ldr	r2, [pc, #76]	; (8001790 <HAL_UART_MspInit+0xb8>)
 8001742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001746:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001748:	4b11      	ldr	r3, [pc, #68]	; (8001790 <HAL_UART_MspInit+0xb8>)
 800174a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001754:	f000 fe60 	bl	8002418 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001758:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800175c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176c:	2303      	movs	r3, #3
 800176e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001772:	2308      	movs	r3, #8
 8001774:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001778:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800177c:	4619      	mov	r1, r3
 800177e:	4805      	ldr	r0, [pc, #20]	; (8001794 <HAL_UART_MspInit+0xbc>)
 8001780:	f000 fbf4 	bl	8001f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001784:	bf00      	nop
 8001786:	37b8      	adds	r7, #184	; 0xb8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40008000 	.word	0x40008000
 8001790:	40021000 	.word	0x40021000
 8001794:	48001800 	.word	0x48001800

08001798 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08e      	sub	sp, #56	; 0x38
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b8:	d14e      	bne.n	8001858 <HAL_TIM_Base_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ba:	4b4e      	ldr	r3, [pc, #312]	; (80018f4 <HAL_TIM_Base_MspInit+0x15c>)
 80017bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017be:	4a4d      	ldr	r2, [pc, #308]	; (80018f4 <HAL_TIM_Base_MspInit+0x15c>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6593      	str	r3, [r2, #88]	; 0x58
 80017c6:	4b4b      	ldr	r3, [pc, #300]	; (80018f4 <HAL_TIM_Base_MspInit+0x15c>)
 80017c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	623b      	str	r3, [r7, #32]
 80017d0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	4b48      	ldr	r3, [pc, #288]	; (80018f4 <HAL_TIM_Base_MspInit+0x15c>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	4a47      	ldr	r2, [pc, #284]	; (80018f4 <HAL_TIM_Base_MspInit+0x15c>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017de:	4b45      	ldr	r3, [pc, #276]	; (80018f4 <HAL_TIM_Base_MspInit+0x15c>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	61fb      	str	r3, [r7, #28]
 80017e8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ea:	4b42      	ldr	r3, [pc, #264]	; (80018f4 <HAL_TIM_Base_MspInit+0x15c>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ee:	4a41      	ldr	r2, [pc, #260]	; (80018f4 <HAL_TIM_Base_MspInit+0x15c>)
 80017f0:	f043 0302 	orr.w	r3, r3, #2
 80017f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f6:	4b3f      	ldr	r3, [pc, #252]	; (80018f4 <HAL_TIM_Base_MspInit+0x15c>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	61bb      	str	r3, [r7, #24]
 8001800:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001802:	2301      	movs	r3, #1
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001812:	2301      	movs	r3, #1
 8001814:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181a:	4619      	mov	r1, r3
 800181c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001820:	f000 fba4 	bl	8001f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001836:	2301      	movs	r3, #1
 8001838:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183e:	4619      	mov	r1, r3
 8001840:	482d      	ldr	r0, [pc, #180]	; (80018f8 <HAL_TIM_Base_MspInit+0x160>)
 8001842:	f000 fb93 	bl	8001f6c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2100      	movs	r1, #0
 800184a:	201c      	movs	r0, #28
 800184c:	f000 fb57 	bl	8001efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001850:	201c      	movs	r0, #28
 8001852:	f000 fb70 	bl	8001f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001856:	e049      	b.n	80018ec <HAL_TIM_Base_MspInit+0x154>
  else if(htim_base->Instance==TIM4)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a27      	ldr	r2, [pc, #156]	; (80018fc <HAL_TIM_Base_MspInit+0x164>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d144      	bne.n	80018ec <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001862:	4b24      	ldr	r3, [pc, #144]	; (80018f4 <HAL_TIM_Base_MspInit+0x15c>)
 8001864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001866:	4a23      	ldr	r2, [pc, #140]	; (80018f4 <HAL_TIM_Base_MspInit+0x15c>)
 8001868:	f043 0304 	orr.w	r3, r3, #4
 800186c:	6593      	str	r3, [r2, #88]	; 0x58
 800186e:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <HAL_TIM_Base_MspInit+0x15c>)
 8001870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800187a:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <HAL_TIM_Base_MspInit+0x15c>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187e:	4a1d      	ldr	r2, [pc, #116]	; (80018f4 <HAL_TIM_Base_MspInit+0x15c>)
 8001880:	f043 0308 	orr.w	r3, r3, #8
 8001884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001886:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <HAL_TIM_Base_MspInit+0x15c>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001892:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <HAL_TIM_Base_MspInit+0x15c>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001896:	4a17      	ldr	r2, [pc, #92]	; (80018f4 <HAL_TIM_Base_MspInit+0x15c>)
 8001898:	f043 0310 	orr.w	r3, r3, #16
 800189c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800189e:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <HAL_TIM_Base_MspInit+0x15c>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a2:	f003 0310 	and.w	r3, r3, #16
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80018aa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b0:	2302      	movs	r3, #2
 80018b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	2300      	movs	r3, #0
 80018ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018bc:	2302      	movs	r3, #2
 80018be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c4:	4619      	mov	r1, r3
 80018c6:	480e      	ldr	r0, [pc, #56]	; (8001900 <HAL_TIM_Base_MspInit+0x168>)
 80018c8:	f000 fb50 	bl	8001f6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018cc:	2301      	movs	r3, #1
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d0:	2302      	movs	r3, #2
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2300      	movs	r3, #0
 80018da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018dc:	2302      	movs	r3, #2
 80018de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e4:	4619      	mov	r1, r3
 80018e6:	4807      	ldr	r0, [pc, #28]	; (8001904 <HAL_TIM_Base_MspInit+0x16c>)
 80018e8:	f000 fb40 	bl	8001f6c <HAL_GPIO_Init>
}
 80018ec:	bf00      	nop
 80018ee:	3738      	adds	r7, #56	; 0x38
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40021000 	.word	0x40021000
 80018f8:	48000400 	.word	0x48000400
 80018fc:	40000800 	.word	0x40000800
 8001900:	48000c00 	.word	0x48000c00
 8001904:	48001000 	.word	0x48001000

08001908 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 030c 	add.w	r3, r7, #12
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a11      	ldr	r2, [pc, #68]	; (800196c <HAL_TIM_MspPostInit+0x64>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d11b      	bne.n	8001962 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800192a:	4b11      	ldr	r3, [pc, #68]	; (8001970 <HAL_TIM_MspPostInit+0x68>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	4a10      	ldr	r2, [pc, #64]	; (8001970 <HAL_TIM_MspPostInit+0x68>)
 8001930:	f043 0302 	orr.w	r3, r3, #2
 8001934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001936:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <HAL_TIM_MspPostInit+0x68>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001942:	2380      	movs	r3, #128	; 0x80
 8001944:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001946:	2302      	movs	r3, #2
 8001948:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194e:	2300      	movs	r3, #0
 8001950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001952:	2302      	movs	r3, #2
 8001954:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001956:	f107 030c 	add.w	r3, r7, #12
 800195a:	4619      	mov	r1, r3
 800195c:	4805      	ldr	r0, [pc, #20]	; (8001974 <HAL_TIM_MspPostInit+0x6c>)
 800195e:	f000 fb05 	bl	8001f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001962:	bf00      	nop
 8001964:	3720      	adds	r7, #32
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40000800 	.word	0x40000800
 8001970:	40021000 	.word	0x40021000
 8001974:	48000400 	.word	0x48000400

08001978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800197c:	e7fe      	b.n	800197c <NMI_Handler+0x4>

0800197e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001982:	e7fe      	b.n	8001982 <HardFault_Handler+0x4>

08001984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <MemManage_Handler+0x4>

0800198a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800198e:	e7fe      	b.n	800198e <BusFault_Handler+0x4>

08001990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001994:	e7fe      	b.n	8001994 <UsageFault_Handler+0x4>

08001996 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019c4:	f000 f9a0 	bl	8001d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}

080019cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	int count_us_local;

	if (is_high) {
 80019d2:	4b1f      	ldr	r3, [pc, #124]	; (8001a50 <TIM2_IRQHandler+0x84>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d01c      	beq.n	8001a14 <TIM2_IRQHandler+0x48>
		count_us = TIM2->CNT;
 80019da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b1c      	ldr	r3, [pc, #112]	; (8001a54 <TIM2_IRQHandler+0x88>)
 80019e4:	601a      	str	r2, [r3, #0]

		is_high = 0;
 80019e6:	4b1a      	ldr	r3, [pc, #104]	; (8001a50 <TIM2_IRQHandler+0x84>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
		TIM2->CCER &= ~(0b1 << 3);
 80019ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019f6:	f023 0308 	bic.w	r3, r3, #8
 80019fa:	6213      	str	r3, [r2, #32]
		TIM2->CCER &= ~(0b1 << 1);
 80019fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a06:	f023 0302 	bic.w	r3, r3, #2
 8001a0a:	6213      	str	r3, [r2, #32]

		count_us_local = count_us;
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <TIM2_IRQHandler+0x88>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	e016      	b.n	8001a42 <TIM2_IRQHandler+0x76>
	}
	else {
		TIM2->CNT = 0;
 8001a14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a18:	2200      	movs	r2, #0
 8001a1a:	625a      	str	r2, [r3, #36]	; 0x24

		is_high = 1;
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <TIM2_IRQHandler+0x84>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	601a      	str	r2, [r3, #0]
		TIM2->CCER &= ~(0b1 << 3);
 8001a22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a2c:	f023 0308 	bic.w	r3, r3, #8
 8001a30:	6213      	str	r3, [r2, #32]
		TIM2->CCER |= (0b1 << 1);
 8001a32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a3c:	f043 0302 	orr.w	r3, r3, #2
 8001a40:	6213      	str	r3, [r2, #32]
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a42:	4805      	ldr	r0, [pc, #20]	; (8001a58 <TIM2_IRQHandler+0x8c>)
 8001a44:	f002 fc52 	bl	80042ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000320 	.word	0x20000320
 8001a54:	20000324 	.word	0x20000324
 8001a58:	20000288 	.word	0x20000288

08001a5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
	return 1;
 8001a60:	2301      	movs	r3, #1
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <_kill>:

int _kill(int pid, int sig)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a76:	f004 fc9b 	bl	80063b0 <__errno>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2216      	movs	r2, #22
 8001a7e:	601a      	str	r2, [r3, #0]
	return -1;
 8001a80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <_exit>:

void _exit (int status)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ffe7 	bl	8001a6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a9e:	e7fe      	b.n	8001a9e <_exit+0x12>

08001aa0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	e00a      	b.n	8001ac8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ab2:	f3af 8000 	nop.w
 8001ab6:	4601      	mov	r1, r0
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	1c5a      	adds	r2, r3, #1
 8001abc:	60ba      	str	r2, [r7, #8]
 8001abe:	b2ca      	uxtb	r2, r1
 8001ac0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	dbf0      	blt.n	8001ab2 <_read+0x12>
	}

return len;
 8001ad0:	687b      	ldr	r3, [r7, #4]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b086      	sub	sp, #24
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	60f8      	str	r0, [r7, #12]
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	e009      	b.n	8001b00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	60ba      	str	r2, [r7, #8]
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fdb3 	bl	8001660 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	3301      	adds	r3, #1
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	dbf1      	blt.n	8001aec <_write+0x12>
	}
	return len;
 8001b08:	687b      	ldr	r3, [r7, #4]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <_close>:

int _close(int file)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
	return -1;
 8001b1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b3a:	605a      	str	r2, [r3, #4]
	return 0;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <_isatty>:

int _isatty(int file)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
	return 1;
 8001b52:	2301      	movs	r3, #1
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
	return 0;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
	...

08001b7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b84:	4a14      	ldr	r2, [pc, #80]	; (8001bd8 <_sbrk+0x5c>)
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <_sbrk+0x60>)
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b90:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <_sbrk+0x64>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d102      	bne.n	8001b9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b98:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <_sbrk+0x64>)
 8001b9a:	4a12      	ldr	r2, [pc, #72]	; (8001be4 <_sbrk+0x68>)
 8001b9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b9e:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <_sbrk+0x64>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d207      	bcs.n	8001bbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bac:	f004 fc00 	bl	80063b0 <__errno>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	220c      	movs	r2, #12
 8001bb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bba:	e009      	b.n	8001bd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <_sbrk+0x64>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bc2:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <_sbrk+0x64>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	4a05      	ldr	r2, [pc, #20]	; (8001be0 <_sbrk+0x64>)
 8001bcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bce:	68fb      	ldr	r3, [r7, #12]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	200a0000 	.word	0x200a0000
 8001bdc:	00000400 	.word	0x00000400
 8001be0:	20000328 	.word	0x20000328
 8001be4:	20000340 	.word	0x20000340

08001be8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <SystemInit+0x20>)
 8001bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bf2:	4a05      	ldr	r2, [pc, #20]	; (8001c08 <SystemInit+0x20>)
 8001bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c10:	f7ff ffea 	bl	8001be8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c14:	480c      	ldr	r0, [pc, #48]	; (8001c48 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c16:	490d      	ldr	r1, [pc, #52]	; (8001c4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c18:	4a0d      	ldr	r2, [pc, #52]	; (8001c50 <LoopForever+0xe>)
  movs r3, #0
 8001c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c1c:	e002      	b.n	8001c24 <LoopCopyDataInit>

08001c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c22:	3304      	adds	r3, #4

08001c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c28:	d3f9      	bcc.n	8001c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2a:	4a0a      	ldr	r2, [pc, #40]	; (8001c54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c2c:	4c0a      	ldr	r4, [pc, #40]	; (8001c58 <LoopForever+0x16>)
  movs r3, #0
 8001c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c30:	e001      	b.n	8001c36 <LoopFillZerobss>

08001c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c34:	3204      	adds	r2, #4

08001c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c38:	d3fb      	bcc.n	8001c32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c3a:	f004 fbbf 	bl	80063bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c3e:	f7ff f94d 	bl	8000edc <main>

08001c42 <LoopForever>:

LoopForever:
    b LoopForever
 8001c42:	e7fe      	b.n	8001c42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c44:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c4c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001c50:	0800930c 	.word	0x0800930c
  ldr r2, =_sbss
 8001c54:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001c58:	20000340 	.word	0x20000340

08001c5c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c5c:	e7fe      	b.n	8001c5c <ADC1_IRQHandler>

08001c5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c68:	2003      	movs	r0, #3
 8001c6a:	f000 f93d 	bl	8001ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f000 f80e 	bl	8001c90 <HAL_InitTick>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	71fb      	strb	r3, [r7, #7]
 8001c7e:	e001      	b.n	8001c84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c80:	f7ff fd06 	bl	8001690 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c84:	79fb      	ldrb	r3, [r7, #7]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
	...

08001c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c9c:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <HAL_InitTick+0x6c>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d023      	beq.n	8001cec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ca4:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <HAL_InitTick+0x70>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <HAL_InitTick+0x6c>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	4619      	mov	r1, r3
 8001cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 f949 	bl	8001f52 <HAL_SYSTICK_Config>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10f      	bne.n	8001ce6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b0f      	cmp	r3, #15
 8001cca:	d809      	bhi.n	8001ce0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cd4:	f000 f913 	bl	8001efe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cd8:	4a0a      	ldr	r2, [pc, #40]	; (8001d04 <HAL_InitTick+0x74>)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	e007      	b.n	8001cf0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	73fb      	strb	r3, [r7, #15]
 8001ce4:	e004      	b.n	8001cf0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	73fb      	strb	r3, [r7, #15]
 8001cea:	e001      	b.n	8001cf0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000008 	.word	0x20000008
 8001d00:	20000000 	.word	0x20000000
 8001d04:	20000004 	.word	0x20000004

08001d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_IncTick+0x20>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_IncTick+0x24>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4413      	add	r3, r2
 8001d18:	4a04      	ldr	r2, [pc, #16]	; (8001d2c <HAL_IncTick+0x24>)
 8001d1a:	6013      	str	r3, [r2, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	20000008 	.word	0x20000008
 8001d2c:	2000032c 	.word	0x2000032c

08001d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return uwTick;
 8001d34:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <HAL_GetTick+0x14>)
 8001d36:	681b      	ldr	r3, [r3, #0]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	2000032c 	.word	0x2000032c

08001d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <__NVIC_SetPriorityGrouping+0x44>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d64:	4013      	ands	r3, r2
 8001d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d7a:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <__NVIC_SetPriorityGrouping+0x44>)
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	60d3      	str	r3, [r2, #12]
}
 8001d80:	bf00      	nop
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d94:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <__NVIC_GetPriorityGrouping+0x18>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	0a1b      	lsrs	r3, r3, #8
 8001d9a:	f003 0307 	and.w	r3, r3, #7
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	db0b      	blt.n	8001dd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	f003 021f 	and.w	r2, r3, #31
 8001dc4:	4907      	ldr	r1, [pc, #28]	; (8001de4 <__NVIC_EnableIRQ+0x38>)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	095b      	lsrs	r3, r3, #5
 8001dcc:	2001      	movs	r0, #1
 8001dce:	fa00 f202 	lsl.w	r2, r0, r2
 8001dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000e100 	.word	0xe000e100

08001de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	6039      	str	r1, [r7, #0]
 8001df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	db0a      	blt.n	8001e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	490c      	ldr	r1, [pc, #48]	; (8001e34 <__NVIC_SetPriority+0x4c>)
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	0112      	lsls	r2, r2, #4
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e10:	e00a      	b.n	8001e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	4908      	ldr	r1, [pc, #32]	; (8001e38 <__NVIC_SetPriority+0x50>)
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	3b04      	subs	r3, #4
 8001e20:	0112      	lsls	r2, r2, #4
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	440b      	add	r3, r1
 8001e26:	761a      	strb	r2, [r3, #24]
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000e100 	.word	0xe000e100
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b089      	sub	sp, #36	; 0x24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f1c3 0307 	rsb	r3, r3, #7
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	bf28      	it	cs
 8001e5a:	2304      	movcs	r3, #4
 8001e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3304      	adds	r3, #4
 8001e62:	2b06      	cmp	r3, #6
 8001e64:	d902      	bls.n	8001e6c <NVIC_EncodePriority+0x30>
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3b03      	subs	r3, #3
 8001e6a:	e000      	b.n	8001e6e <NVIC_EncodePriority+0x32>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43da      	mvns	r2, r3
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	401a      	ands	r2, r3
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8e:	43d9      	mvns	r1, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e94:	4313      	orrs	r3, r2
         );
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3724      	adds	r7, #36	; 0x24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb4:	d301      	bcc.n	8001eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e00f      	b.n	8001eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eba:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <SysTick_Config+0x40>)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ec2:	210f      	movs	r1, #15
 8001ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ec8:	f7ff ff8e 	bl	8001de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <SysTick_Config+0x40>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ed2:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <SysTick_Config+0x40>)
 8001ed4:	2207      	movs	r2, #7
 8001ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	e000e010 	.word	0xe000e010

08001ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7ff ff29 	bl	8001d48 <__NVIC_SetPriorityGrouping>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b086      	sub	sp, #24
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	4603      	mov	r3, r0
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	607a      	str	r2, [r7, #4]
 8001f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f10:	f7ff ff3e 	bl	8001d90 <__NVIC_GetPriorityGrouping>
 8001f14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	68b9      	ldr	r1, [r7, #8]
 8001f1a:	6978      	ldr	r0, [r7, #20]
 8001f1c:	f7ff ff8e 	bl	8001e3c <NVIC_EncodePriority>
 8001f20:	4602      	mov	r2, r0
 8001f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff5d 	bl	8001de8 <__NVIC_SetPriority>
}
 8001f2e:	bf00      	nop
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff31 	bl	8001dac <__NVIC_EnableIRQ>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ffa2 	bl	8001ea4 <SysTick_Config>
 8001f60:	4603      	mov	r3, r0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b087      	sub	sp, #28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f7a:	e166      	b.n	800224a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	2101      	movs	r1, #1
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	fa01 f303 	lsl.w	r3, r1, r3
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 8158 	beq.w	8002244 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d005      	beq.n	8001fac <HAL_GPIO_Init+0x40>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d130      	bne.n	800200e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	091b      	lsrs	r3, r3, #4
 8001ff8:	f003 0201 	and.w	r2, r3, #1
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	2b03      	cmp	r3, #3
 8002018:	d017      	beq.n	800204a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	2203      	movs	r2, #3
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4013      	ands	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d123      	bne.n	800209e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	08da      	lsrs	r2, r3, #3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3208      	adds	r2, #8
 800205e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002062:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	220f      	movs	r2, #15
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4013      	ands	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	691a      	ldr	r2, [r3, #16]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4313      	orrs	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	08da      	lsrs	r2, r3, #3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3208      	adds	r2, #8
 8002098:	6939      	ldr	r1, [r7, #16]
 800209a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	2203      	movs	r2, #3
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4013      	ands	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 0203 	and.w	r2, r3, #3
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 80b2 	beq.w	8002244 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e0:	4b61      	ldr	r3, [pc, #388]	; (8002268 <HAL_GPIO_Init+0x2fc>)
 80020e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e4:	4a60      	ldr	r2, [pc, #384]	; (8002268 <HAL_GPIO_Init+0x2fc>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	6613      	str	r3, [r2, #96]	; 0x60
 80020ec:	4b5e      	ldr	r3, [pc, #376]	; (8002268 <HAL_GPIO_Init+0x2fc>)
 80020ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020f8:	4a5c      	ldr	r2, [pc, #368]	; (800226c <HAL_GPIO_Init+0x300>)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	089b      	lsrs	r3, r3, #2
 80020fe:	3302      	adds	r3, #2
 8002100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002104:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	220f      	movs	r2, #15
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002122:	d02b      	beq.n	800217c <HAL_GPIO_Init+0x210>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a52      	ldr	r2, [pc, #328]	; (8002270 <HAL_GPIO_Init+0x304>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d025      	beq.n	8002178 <HAL_GPIO_Init+0x20c>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a51      	ldr	r2, [pc, #324]	; (8002274 <HAL_GPIO_Init+0x308>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d01f      	beq.n	8002174 <HAL_GPIO_Init+0x208>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a50      	ldr	r2, [pc, #320]	; (8002278 <HAL_GPIO_Init+0x30c>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d019      	beq.n	8002170 <HAL_GPIO_Init+0x204>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a4f      	ldr	r2, [pc, #316]	; (800227c <HAL_GPIO_Init+0x310>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d013      	beq.n	800216c <HAL_GPIO_Init+0x200>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a4e      	ldr	r2, [pc, #312]	; (8002280 <HAL_GPIO_Init+0x314>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d00d      	beq.n	8002168 <HAL_GPIO_Init+0x1fc>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a4d      	ldr	r2, [pc, #308]	; (8002284 <HAL_GPIO_Init+0x318>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d007      	beq.n	8002164 <HAL_GPIO_Init+0x1f8>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a4c      	ldr	r2, [pc, #304]	; (8002288 <HAL_GPIO_Init+0x31c>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d101      	bne.n	8002160 <HAL_GPIO_Init+0x1f4>
 800215c:	2307      	movs	r3, #7
 800215e:	e00e      	b.n	800217e <HAL_GPIO_Init+0x212>
 8002160:	2308      	movs	r3, #8
 8002162:	e00c      	b.n	800217e <HAL_GPIO_Init+0x212>
 8002164:	2306      	movs	r3, #6
 8002166:	e00a      	b.n	800217e <HAL_GPIO_Init+0x212>
 8002168:	2305      	movs	r3, #5
 800216a:	e008      	b.n	800217e <HAL_GPIO_Init+0x212>
 800216c:	2304      	movs	r3, #4
 800216e:	e006      	b.n	800217e <HAL_GPIO_Init+0x212>
 8002170:	2303      	movs	r3, #3
 8002172:	e004      	b.n	800217e <HAL_GPIO_Init+0x212>
 8002174:	2302      	movs	r3, #2
 8002176:	e002      	b.n	800217e <HAL_GPIO_Init+0x212>
 8002178:	2301      	movs	r3, #1
 800217a:	e000      	b.n	800217e <HAL_GPIO_Init+0x212>
 800217c:	2300      	movs	r3, #0
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	f002 0203 	and.w	r2, r2, #3
 8002184:	0092      	lsls	r2, r2, #2
 8002186:	4093      	lsls	r3, r2
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4313      	orrs	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800218e:	4937      	ldr	r1, [pc, #220]	; (800226c <HAL_GPIO_Init+0x300>)
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	089b      	lsrs	r3, r3, #2
 8002194:	3302      	adds	r3, #2
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800219c:	4b3b      	ldr	r3, [pc, #236]	; (800228c <HAL_GPIO_Init+0x320>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	4013      	ands	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4313      	orrs	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021c0:	4a32      	ldr	r2, [pc, #200]	; (800228c <HAL_GPIO_Init+0x320>)
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021c6:	4b31      	ldr	r3, [pc, #196]	; (800228c <HAL_GPIO_Init+0x320>)
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	43db      	mvns	r3, r3
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4013      	ands	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021ea:	4a28      	ldr	r2, [pc, #160]	; (800228c <HAL_GPIO_Init+0x320>)
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021f0:	4b26      	ldr	r3, [pc, #152]	; (800228c <HAL_GPIO_Init+0x320>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	43db      	mvns	r3, r3
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4013      	ands	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4313      	orrs	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002214:	4a1d      	ldr	r2, [pc, #116]	; (800228c <HAL_GPIO_Init+0x320>)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800221a:	4b1c      	ldr	r3, [pc, #112]	; (800228c <HAL_GPIO_Init+0x320>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	43db      	mvns	r3, r3
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4013      	ands	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4313      	orrs	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800223e:	4a13      	ldr	r2, [pc, #76]	; (800228c <HAL_GPIO_Init+0x320>)
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	3301      	adds	r3, #1
 8002248:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	fa22 f303 	lsr.w	r3, r2, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	f47f ae91 	bne.w	8001f7c <HAL_GPIO_Init+0x10>
  }
}
 800225a:	bf00      	nop
 800225c:	bf00      	nop
 800225e:	371c      	adds	r7, #28
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	40021000 	.word	0x40021000
 800226c:	40010000 	.word	0x40010000
 8002270:	48000400 	.word	0x48000400
 8002274:	48000800 	.word	0x48000800
 8002278:	48000c00 	.word	0x48000c00
 800227c:	48001000 	.word	0x48001000
 8002280:	48001400 	.word	0x48001400
 8002284:	48001800 	.word	0x48001800
 8002288:	48001c00 	.word	0x48001c00
 800228c:	40010400 	.word	0x40010400

08002290 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002294:	4b0d      	ldr	r3, [pc, #52]	; (80022cc <HAL_PWREx_GetVoltageRange+0x3c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800229c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022a0:	d102      	bne.n	80022a8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80022a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022a6:	e00b      	b.n	80022c0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <HAL_PWREx_GetVoltageRange+0x3c>)
 80022aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022b6:	d102      	bne.n	80022be <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80022b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022bc:	e000      	b.n	80022c0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80022be:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	40007000 	.word	0x40007000

080022d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d141      	bne.n	8002362 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022de:	4b4b      	ldr	r3, [pc, #300]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ea:	d131      	bne.n	8002350 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022ec:	4b47      	ldr	r3, [pc, #284]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022f2:	4a46      	ldr	r2, [pc, #280]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022fc:	4b43      	ldr	r3, [pc, #268]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002304:	4a41      	ldr	r2, [pc, #260]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002306:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800230a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800230c:	4b40      	ldr	r3, [pc, #256]	; (8002410 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2232      	movs	r2, #50	; 0x32
 8002312:	fb02 f303 	mul.w	r3, r2, r3
 8002316:	4a3f      	ldr	r2, [pc, #252]	; (8002414 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002318:	fba2 2303 	umull	r2, r3, r2, r3
 800231c:	0c9b      	lsrs	r3, r3, #18
 800231e:	3301      	adds	r3, #1
 8002320:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002322:	e002      	b.n	800232a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	3b01      	subs	r3, #1
 8002328:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800232a:	4b38      	ldr	r3, [pc, #224]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002336:	d102      	bne.n	800233e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f2      	bne.n	8002324 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800233e:	4b33      	ldr	r3, [pc, #204]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800234a:	d158      	bne.n	80023fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e057      	b.n	8002400 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002350:	4b2e      	ldr	r3, [pc, #184]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002352:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002356:	4a2d      	ldr	r2, [pc, #180]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800235c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002360:	e04d      	b.n	80023fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002368:	d141      	bne.n	80023ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800236a:	4b28      	ldr	r3, [pc, #160]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002376:	d131      	bne.n	80023dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002378:	4b24      	ldr	r3, [pc, #144]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800237a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800237e:	4a23      	ldr	r2, [pc, #140]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002384:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002388:	4b20      	ldr	r3, [pc, #128]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002390:	4a1e      	ldr	r2, [pc, #120]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002396:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002398:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2232      	movs	r2, #50	; 0x32
 800239e:	fb02 f303 	mul.w	r3, r2, r3
 80023a2:	4a1c      	ldr	r2, [pc, #112]	; (8002414 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023a4:	fba2 2303 	umull	r2, r3, r2, r3
 80023a8:	0c9b      	lsrs	r3, r3, #18
 80023aa:	3301      	adds	r3, #1
 80023ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023ae:	e002      	b.n	80023b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023b6:	4b15      	ldr	r3, [pc, #84]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c2:	d102      	bne.n	80023ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f2      	bne.n	80023b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023d6:	d112      	bne.n	80023fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e011      	b.n	8002400 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023e2:	4a0a      	ldr	r2, [pc, #40]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80023ec:	e007      	b.n	80023fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023ee:	4b07      	ldr	r3, [pc, #28]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023f6:	4a05      	ldr	r2, [pc, #20]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023fc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	40007000 	.word	0x40007000
 8002410:	20000000 	.word	0x20000000
 8002414:	431bde83 	.word	0x431bde83

08002418 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800241c:	4b05      	ldr	r3, [pc, #20]	; (8002434 <HAL_PWREx_EnableVddIO2+0x1c>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	4a04      	ldr	r2, [pc, #16]	; (8002434 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002422:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002426:	6053      	str	r3, [r2, #4]
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40007000 	.word	0x40007000

08002438 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d102      	bne.n	800244c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	f000 bc08 	b.w	8002c5c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800244c:	4b96      	ldr	r3, [pc, #600]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 030c 	and.w	r3, r3, #12
 8002454:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002456:	4b94      	ldr	r3, [pc, #592]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0310 	and.w	r3, r3, #16
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 80e4 	beq.w	8002636 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d007      	beq.n	8002484 <HAL_RCC_OscConfig+0x4c>
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	2b0c      	cmp	r3, #12
 8002478:	f040 808b 	bne.w	8002592 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	2b01      	cmp	r3, #1
 8002480:	f040 8087 	bne.w	8002592 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002484:	4b88      	ldr	r3, [pc, #544]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_RCC_OscConfig+0x64>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e3df      	b.n	8002c5c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a1a      	ldr	r2, [r3, #32]
 80024a0:	4b81      	ldr	r3, [pc, #516]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0308 	and.w	r3, r3, #8
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d004      	beq.n	80024b6 <HAL_RCC_OscConfig+0x7e>
 80024ac:	4b7e      	ldr	r3, [pc, #504]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024b4:	e005      	b.n	80024c2 <HAL_RCC_OscConfig+0x8a>
 80024b6:	4b7c      	ldr	r3, [pc, #496]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 80024b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024bc:	091b      	lsrs	r3, r3, #4
 80024be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d223      	bcs.n	800250e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 fdcc 	bl	8003068 <RCC_SetFlashLatencyFromMSIRange>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e3c0      	b.n	8002c5c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024da:	4b73      	ldr	r3, [pc, #460]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a72      	ldr	r2, [pc, #456]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 80024e0:	f043 0308 	orr.w	r3, r3, #8
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	4b70      	ldr	r3, [pc, #448]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	496d      	ldr	r1, [pc, #436]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024f8:	4b6b      	ldr	r3, [pc, #428]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	021b      	lsls	r3, r3, #8
 8002506:	4968      	ldr	r1, [pc, #416]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 8002508:	4313      	orrs	r3, r2
 800250a:	604b      	str	r3, [r1, #4]
 800250c:	e025      	b.n	800255a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800250e:	4b66      	ldr	r3, [pc, #408]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a65      	ldr	r2, [pc, #404]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 8002514:	f043 0308 	orr.w	r3, r3, #8
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	4b63      	ldr	r3, [pc, #396]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	4960      	ldr	r1, [pc, #384]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 8002528:	4313      	orrs	r3, r2
 800252a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800252c:	4b5e      	ldr	r3, [pc, #376]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	021b      	lsls	r3, r3, #8
 800253a:	495b      	ldr	r1, [pc, #364]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 800253c:	4313      	orrs	r3, r2
 800253e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d109      	bne.n	800255a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	4618      	mov	r0, r3
 800254c:	f000 fd8c 	bl	8003068 <RCC_SetFlashLatencyFromMSIRange>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e380      	b.n	8002c5c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800255a:	f000 fcc1 	bl	8002ee0 <HAL_RCC_GetSysClockFreq>
 800255e:	4602      	mov	r2, r0
 8002560:	4b51      	ldr	r3, [pc, #324]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	091b      	lsrs	r3, r3, #4
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	4950      	ldr	r1, [pc, #320]	; (80026ac <HAL_RCC_OscConfig+0x274>)
 800256c:	5ccb      	ldrb	r3, [r1, r3]
 800256e:	f003 031f 	and.w	r3, r3, #31
 8002572:	fa22 f303 	lsr.w	r3, r2, r3
 8002576:	4a4e      	ldr	r2, [pc, #312]	; (80026b0 <HAL_RCC_OscConfig+0x278>)
 8002578:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800257a:	4b4e      	ldr	r3, [pc, #312]	; (80026b4 <HAL_RCC_OscConfig+0x27c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff fb86 	bl	8001c90 <HAL_InitTick>
 8002584:	4603      	mov	r3, r0
 8002586:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002588:	7bfb      	ldrb	r3, [r7, #15]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d052      	beq.n	8002634 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	e364      	b.n	8002c5c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d032      	beq.n	8002600 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800259a:	4b43      	ldr	r3, [pc, #268]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a42      	ldr	r2, [pc, #264]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025a6:	f7ff fbc3 	bl	8001d30 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025ae:	f7ff fbbf 	bl	8001d30 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e34d      	b.n	8002c5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025c0:	4b39      	ldr	r3, [pc, #228]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0f0      	beq.n	80025ae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025cc:	4b36      	ldr	r3, [pc, #216]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a35      	ldr	r2, [pc, #212]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 80025d2:	f043 0308 	orr.w	r3, r3, #8
 80025d6:	6013      	str	r3, [r2, #0]
 80025d8:	4b33      	ldr	r3, [pc, #204]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	4930      	ldr	r1, [pc, #192]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025ea:	4b2f      	ldr	r3, [pc, #188]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	021b      	lsls	r3, r3, #8
 80025f8:	492b      	ldr	r1, [pc, #172]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	604b      	str	r3, [r1, #4]
 80025fe:	e01a      	b.n	8002636 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002600:	4b29      	ldr	r3, [pc, #164]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a28      	ldr	r2, [pc, #160]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 8002606:	f023 0301 	bic.w	r3, r3, #1
 800260a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800260c:	f7ff fb90 	bl	8001d30 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002614:	f7ff fb8c 	bl	8001d30 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e31a      	b.n	8002c5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002626:	4b20      	ldr	r3, [pc, #128]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x1dc>
 8002632:	e000      	b.n	8002636 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002634:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d073      	beq.n	800272a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	2b08      	cmp	r3, #8
 8002646:	d005      	beq.n	8002654 <HAL_RCC_OscConfig+0x21c>
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	2b0c      	cmp	r3, #12
 800264c:	d10e      	bne.n	800266c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	2b03      	cmp	r3, #3
 8002652:	d10b      	bne.n	800266c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002654:	4b14      	ldr	r3, [pc, #80]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d063      	beq.n	8002728 <HAL_RCC_OscConfig+0x2f0>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d15f      	bne.n	8002728 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e2f7      	b.n	8002c5c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002674:	d106      	bne.n	8002684 <HAL_RCC_OscConfig+0x24c>
 8002676:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a0b      	ldr	r2, [pc, #44]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 800267c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	e025      	b.n	80026d0 <HAL_RCC_OscConfig+0x298>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800268c:	d114      	bne.n	80026b8 <HAL_RCC_OscConfig+0x280>
 800268e:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a05      	ldr	r2, [pc, #20]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 8002694:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	4b03      	ldr	r3, [pc, #12]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a02      	ldr	r2, [pc, #8]	; (80026a8 <HAL_RCC_OscConfig+0x270>)
 80026a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	e013      	b.n	80026d0 <HAL_RCC_OscConfig+0x298>
 80026a8:	40021000 	.word	0x40021000
 80026ac:	08008eb4 	.word	0x08008eb4
 80026b0:	20000000 	.word	0x20000000
 80026b4:	20000004 	.word	0x20000004
 80026b8:	4ba0      	ldr	r3, [pc, #640]	; (800293c <HAL_RCC_OscConfig+0x504>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a9f      	ldr	r2, [pc, #636]	; (800293c <HAL_RCC_OscConfig+0x504>)
 80026be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	4b9d      	ldr	r3, [pc, #628]	; (800293c <HAL_RCC_OscConfig+0x504>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a9c      	ldr	r2, [pc, #624]	; (800293c <HAL_RCC_OscConfig+0x504>)
 80026ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d013      	beq.n	8002700 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d8:	f7ff fb2a 	bl	8001d30 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e0:	f7ff fb26 	bl	8001d30 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b64      	cmp	r3, #100	; 0x64
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e2b4      	b.n	8002c5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026f2:	4b92      	ldr	r3, [pc, #584]	; (800293c <HAL_RCC_OscConfig+0x504>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0x2a8>
 80026fe:	e014      	b.n	800272a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002700:	f7ff fb16 	bl	8001d30 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002708:	f7ff fb12 	bl	8001d30 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b64      	cmp	r3, #100	; 0x64
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e2a0      	b.n	8002c5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800271a:	4b88      	ldr	r3, [pc, #544]	; (800293c <HAL_RCC_OscConfig+0x504>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <HAL_RCC_OscConfig+0x2d0>
 8002726:	e000      	b.n	800272a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d060      	beq.n	80027f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	2b04      	cmp	r3, #4
 800273a:	d005      	beq.n	8002748 <HAL_RCC_OscConfig+0x310>
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	2b0c      	cmp	r3, #12
 8002740:	d119      	bne.n	8002776 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	2b02      	cmp	r3, #2
 8002746:	d116      	bne.n	8002776 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002748:	4b7c      	ldr	r3, [pc, #496]	; (800293c <HAL_RCC_OscConfig+0x504>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002750:	2b00      	cmp	r3, #0
 8002752:	d005      	beq.n	8002760 <HAL_RCC_OscConfig+0x328>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e27d      	b.n	8002c5c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002760:	4b76      	ldr	r3, [pc, #472]	; (800293c <HAL_RCC_OscConfig+0x504>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	061b      	lsls	r3, r3, #24
 800276e:	4973      	ldr	r1, [pc, #460]	; (800293c <HAL_RCC_OscConfig+0x504>)
 8002770:	4313      	orrs	r3, r2
 8002772:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002774:	e040      	b.n	80027f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d023      	beq.n	80027c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800277e:	4b6f      	ldr	r3, [pc, #444]	; (800293c <HAL_RCC_OscConfig+0x504>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a6e      	ldr	r2, [pc, #440]	; (800293c <HAL_RCC_OscConfig+0x504>)
 8002784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002788:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278a:	f7ff fad1 	bl	8001d30 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002792:	f7ff facd 	bl	8001d30 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e25b      	b.n	8002c5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027a4:	4b65      	ldr	r3, [pc, #404]	; (800293c <HAL_RCC_OscConfig+0x504>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0f0      	beq.n	8002792 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b0:	4b62      	ldr	r3, [pc, #392]	; (800293c <HAL_RCC_OscConfig+0x504>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	061b      	lsls	r3, r3, #24
 80027be:	495f      	ldr	r1, [pc, #380]	; (800293c <HAL_RCC_OscConfig+0x504>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	604b      	str	r3, [r1, #4]
 80027c4:	e018      	b.n	80027f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027c6:	4b5d      	ldr	r3, [pc, #372]	; (800293c <HAL_RCC_OscConfig+0x504>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a5c      	ldr	r2, [pc, #368]	; (800293c <HAL_RCC_OscConfig+0x504>)
 80027cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d2:	f7ff faad 	bl	8001d30 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027da:	f7ff faa9 	bl	8001d30 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e237      	b.n	8002c5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027ec:	4b53      	ldr	r3, [pc, #332]	; (800293c <HAL_RCC_OscConfig+0x504>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1f0      	bne.n	80027da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0308 	and.w	r3, r3, #8
 8002800:	2b00      	cmp	r3, #0
 8002802:	d03c      	beq.n	800287e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d01c      	beq.n	8002846 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800280c:	4b4b      	ldr	r3, [pc, #300]	; (800293c <HAL_RCC_OscConfig+0x504>)
 800280e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002812:	4a4a      	ldr	r2, [pc, #296]	; (800293c <HAL_RCC_OscConfig+0x504>)
 8002814:	f043 0301 	orr.w	r3, r3, #1
 8002818:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281c:	f7ff fa88 	bl	8001d30 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002824:	f7ff fa84 	bl	8001d30 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e212      	b.n	8002c5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002836:	4b41      	ldr	r3, [pc, #260]	; (800293c <HAL_RCC_OscConfig+0x504>)
 8002838:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0ef      	beq.n	8002824 <HAL_RCC_OscConfig+0x3ec>
 8002844:	e01b      	b.n	800287e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002846:	4b3d      	ldr	r3, [pc, #244]	; (800293c <HAL_RCC_OscConfig+0x504>)
 8002848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800284c:	4a3b      	ldr	r2, [pc, #236]	; (800293c <HAL_RCC_OscConfig+0x504>)
 800284e:	f023 0301 	bic.w	r3, r3, #1
 8002852:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002856:	f7ff fa6b 	bl	8001d30 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800285e:	f7ff fa67 	bl	8001d30 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e1f5      	b.n	8002c5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002870:	4b32      	ldr	r3, [pc, #200]	; (800293c <HAL_RCC_OscConfig+0x504>)
 8002872:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1ef      	bne.n	800285e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0304 	and.w	r3, r3, #4
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 80a6 	beq.w	80029d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800288c:	2300      	movs	r3, #0
 800288e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002890:	4b2a      	ldr	r3, [pc, #168]	; (800293c <HAL_RCC_OscConfig+0x504>)
 8002892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10d      	bne.n	80028b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800289c:	4b27      	ldr	r3, [pc, #156]	; (800293c <HAL_RCC_OscConfig+0x504>)
 800289e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a0:	4a26      	ldr	r2, [pc, #152]	; (800293c <HAL_RCC_OscConfig+0x504>)
 80028a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a6:	6593      	str	r3, [r2, #88]	; 0x58
 80028a8:	4b24      	ldr	r3, [pc, #144]	; (800293c <HAL_RCC_OscConfig+0x504>)
 80028aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028b4:	2301      	movs	r3, #1
 80028b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028b8:	4b21      	ldr	r3, [pc, #132]	; (8002940 <HAL_RCC_OscConfig+0x508>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d118      	bne.n	80028f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028c4:	4b1e      	ldr	r3, [pc, #120]	; (8002940 <HAL_RCC_OscConfig+0x508>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a1d      	ldr	r2, [pc, #116]	; (8002940 <HAL_RCC_OscConfig+0x508>)
 80028ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028d0:	f7ff fa2e 	bl	8001d30 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d8:	f7ff fa2a 	bl	8001d30 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e1b8      	b.n	8002c5c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ea:	4b15      	ldr	r3, [pc, #84]	; (8002940 <HAL_RCC_OscConfig+0x508>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0f0      	beq.n	80028d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d108      	bne.n	8002910 <HAL_RCC_OscConfig+0x4d8>
 80028fe:	4b0f      	ldr	r3, [pc, #60]	; (800293c <HAL_RCC_OscConfig+0x504>)
 8002900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002904:	4a0d      	ldr	r2, [pc, #52]	; (800293c <HAL_RCC_OscConfig+0x504>)
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800290e:	e029      	b.n	8002964 <HAL_RCC_OscConfig+0x52c>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	2b05      	cmp	r3, #5
 8002916:	d115      	bne.n	8002944 <HAL_RCC_OscConfig+0x50c>
 8002918:	4b08      	ldr	r3, [pc, #32]	; (800293c <HAL_RCC_OscConfig+0x504>)
 800291a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291e:	4a07      	ldr	r2, [pc, #28]	; (800293c <HAL_RCC_OscConfig+0x504>)
 8002920:	f043 0304 	orr.w	r3, r3, #4
 8002924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002928:	4b04      	ldr	r3, [pc, #16]	; (800293c <HAL_RCC_OscConfig+0x504>)
 800292a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800292e:	4a03      	ldr	r2, [pc, #12]	; (800293c <HAL_RCC_OscConfig+0x504>)
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002938:	e014      	b.n	8002964 <HAL_RCC_OscConfig+0x52c>
 800293a:	bf00      	nop
 800293c:	40021000 	.word	0x40021000
 8002940:	40007000 	.word	0x40007000
 8002944:	4b9d      	ldr	r3, [pc, #628]	; (8002bbc <HAL_RCC_OscConfig+0x784>)
 8002946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294a:	4a9c      	ldr	r2, [pc, #624]	; (8002bbc <HAL_RCC_OscConfig+0x784>)
 800294c:	f023 0301 	bic.w	r3, r3, #1
 8002950:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002954:	4b99      	ldr	r3, [pc, #612]	; (8002bbc <HAL_RCC_OscConfig+0x784>)
 8002956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295a:	4a98      	ldr	r2, [pc, #608]	; (8002bbc <HAL_RCC_OscConfig+0x784>)
 800295c:	f023 0304 	bic.w	r3, r3, #4
 8002960:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d016      	beq.n	800299a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296c:	f7ff f9e0 	bl	8001d30 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002972:	e00a      	b.n	800298a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002974:	f7ff f9dc 	bl	8001d30 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002982:	4293      	cmp	r3, r2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e168      	b.n	8002c5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800298a:	4b8c      	ldr	r3, [pc, #560]	; (8002bbc <HAL_RCC_OscConfig+0x784>)
 800298c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d0ed      	beq.n	8002974 <HAL_RCC_OscConfig+0x53c>
 8002998:	e015      	b.n	80029c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299a:	f7ff f9c9 	bl	8001d30 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029a0:	e00a      	b.n	80029b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a2:	f7ff f9c5 	bl	8001d30 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e151      	b.n	8002c5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029b8:	4b80      	ldr	r3, [pc, #512]	; (8002bbc <HAL_RCC_OscConfig+0x784>)
 80029ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1ed      	bne.n	80029a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029c6:	7ffb      	ldrb	r3, [r7, #31]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d105      	bne.n	80029d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029cc:	4b7b      	ldr	r3, [pc, #492]	; (8002bbc <HAL_RCC_OscConfig+0x784>)
 80029ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d0:	4a7a      	ldr	r2, [pc, #488]	; (8002bbc <HAL_RCC_OscConfig+0x784>)
 80029d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029d6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0320 	and.w	r3, r3, #32
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d03c      	beq.n	8002a5e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d01c      	beq.n	8002a26 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029ec:	4b73      	ldr	r3, [pc, #460]	; (8002bbc <HAL_RCC_OscConfig+0x784>)
 80029ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029f2:	4a72      	ldr	r2, [pc, #456]	; (8002bbc <HAL_RCC_OscConfig+0x784>)
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fc:	f7ff f998 	bl	8001d30 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a04:	f7ff f994 	bl	8001d30 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e122      	b.n	8002c5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a16:	4b69      	ldr	r3, [pc, #420]	; (8002bbc <HAL_RCC_OscConfig+0x784>)
 8002a18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0ef      	beq.n	8002a04 <HAL_RCC_OscConfig+0x5cc>
 8002a24:	e01b      	b.n	8002a5e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a26:	4b65      	ldr	r3, [pc, #404]	; (8002bbc <HAL_RCC_OscConfig+0x784>)
 8002a28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a2c:	4a63      	ldr	r2, [pc, #396]	; (8002bbc <HAL_RCC_OscConfig+0x784>)
 8002a2e:	f023 0301 	bic.w	r3, r3, #1
 8002a32:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a36:	f7ff f97b 	bl	8001d30 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a3e:	f7ff f977 	bl	8001d30 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e105      	b.n	8002c5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a50:	4b5a      	ldr	r3, [pc, #360]	; (8002bbc <HAL_RCC_OscConfig+0x784>)
 8002a52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1ef      	bne.n	8002a3e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 80f9 	beq.w	8002c5a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	f040 80cf 	bne.w	8002c10 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a72:	4b52      	ldr	r3, [pc, #328]	; (8002bbc <HAL_RCC_OscConfig+0x784>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f003 0203 	and.w	r2, r3, #3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d12c      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a90:	3b01      	subs	r3, #1
 8002a92:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d123      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d11b      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d113      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac2:	085b      	lsrs	r3, r3, #1
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d109      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	085b      	lsrs	r3, r3, #1
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d071      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	2b0c      	cmp	r3, #12
 8002ae4:	d068      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ae6:	4b35      	ldr	r3, [pc, #212]	; (8002bbc <HAL_RCC_OscConfig+0x784>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d105      	bne.n	8002afe <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002af2:	4b32      	ldr	r3, [pc, #200]	; (8002bbc <HAL_RCC_OscConfig+0x784>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e0ac      	b.n	8002c5c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b02:	4b2e      	ldr	r3, [pc, #184]	; (8002bbc <HAL_RCC_OscConfig+0x784>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a2d      	ldr	r2, [pc, #180]	; (8002bbc <HAL_RCC_OscConfig+0x784>)
 8002b08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b0c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b0e:	f7ff f90f 	bl	8001d30 <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b16:	f7ff f90b 	bl	8001d30 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e099      	b.n	8002c5c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b28:	4b24      	ldr	r3, [pc, #144]	; (8002bbc <HAL_RCC_OscConfig+0x784>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1f0      	bne.n	8002b16 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b34:	4b21      	ldr	r3, [pc, #132]	; (8002bbc <HAL_RCC_OscConfig+0x784>)
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	4b21      	ldr	r3, [pc, #132]	; (8002bc0 <HAL_RCC_OscConfig+0x788>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b44:	3a01      	subs	r2, #1
 8002b46:	0112      	lsls	r2, r2, #4
 8002b48:	4311      	orrs	r1, r2
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b4e:	0212      	lsls	r2, r2, #8
 8002b50:	4311      	orrs	r1, r2
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b56:	0852      	lsrs	r2, r2, #1
 8002b58:	3a01      	subs	r2, #1
 8002b5a:	0552      	lsls	r2, r2, #21
 8002b5c:	4311      	orrs	r1, r2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b62:	0852      	lsrs	r2, r2, #1
 8002b64:	3a01      	subs	r2, #1
 8002b66:	0652      	lsls	r2, r2, #25
 8002b68:	4311      	orrs	r1, r2
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b6e:	06d2      	lsls	r2, r2, #27
 8002b70:	430a      	orrs	r2, r1
 8002b72:	4912      	ldr	r1, [pc, #72]	; (8002bbc <HAL_RCC_OscConfig+0x784>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b78:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <HAL_RCC_OscConfig+0x784>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a0f      	ldr	r2, [pc, #60]	; (8002bbc <HAL_RCC_OscConfig+0x784>)
 8002b7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b84:	4b0d      	ldr	r3, [pc, #52]	; (8002bbc <HAL_RCC_OscConfig+0x784>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	4a0c      	ldr	r2, [pc, #48]	; (8002bbc <HAL_RCC_OscConfig+0x784>)
 8002b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b90:	f7ff f8ce 	bl	8001d30 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b98:	f7ff f8ca 	bl	8001d30 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e058      	b.n	8002c5c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002baa:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <HAL_RCC_OscConfig+0x784>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0f0      	beq.n	8002b98 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bb6:	e050      	b.n	8002c5a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e04f      	b.n	8002c5c <HAL_RCC_OscConfig+0x824>
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bc4:	4b27      	ldr	r3, [pc, #156]	; (8002c64 <HAL_RCC_OscConfig+0x82c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d144      	bne.n	8002c5a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002bd0:	4b24      	ldr	r3, [pc, #144]	; (8002c64 <HAL_RCC_OscConfig+0x82c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a23      	ldr	r2, [pc, #140]	; (8002c64 <HAL_RCC_OscConfig+0x82c>)
 8002bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bda:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bdc:	4b21      	ldr	r3, [pc, #132]	; (8002c64 <HAL_RCC_OscConfig+0x82c>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	4a20      	ldr	r2, [pc, #128]	; (8002c64 <HAL_RCC_OscConfig+0x82c>)
 8002be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002be6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002be8:	f7ff f8a2 	bl	8001d30 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf0:	f7ff f89e 	bl	8001d30 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e02c      	b.n	8002c5c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c02:	4b18      	ldr	r3, [pc, #96]	; (8002c64 <HAL_RCC_OscConfig+0x82c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x7b8>
 8002c0e:	e024      	b.n	8002c5a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	2b0c      	cmp	r3, #12
 8002c14:	d01f      	beq.n	8002c56 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c16:	4b13      	ldr	r3, [pc, #76]	; (8002c64 <HAL_RCC_OscConfig+0x82c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a12      	ldr	r2, [pc, #72]	; (8002c64 <HAL_RCC_OscConfig+0x82c>)
 8002c1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c22:	f7ff f885 	bl	8001d30 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2a:	f7ff f881 	bl	8001d30 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e00f      	b.n	8002c5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c3c:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <HAL_RCC_OscConfig+0x82c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1f0      	bne.n	8002c2a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c48:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <HAL_RCC_OscConfig+0x82c>)
 8002c4a:	68da      	ldr	r2, [r3, #12]
 8002c4c:	4905      	ldr	r1, [pc, #20]	; (8002c64 <HAL_RCC_OscConfig+0x82c>)
 8002c4e:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <HAL_RCC_OscConfig+0x830>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	60cb      	str	r3, [r1, #12]
 8002c54:	e001      	b.n	8002c5a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3720      	adds	r7, #32
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40021000 	.word	0x40021000
 8002c68:	feeefffc 	.word	0xfeeefffc

08002c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002c76:	2300      	movs	r3, #0
 8002c78:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e11d      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c84:	4b90      	ldr	r3, [pc, #576]	; (8002ec8 <HAL_RCC_ClockConfig+0x25c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 030f 	and.w	r3, r3, #15
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d910      	bls.n	8002cb4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c92:	4b8d      	ldr	r3, [pc, #564]	; (8002ec8 <HAL_RCC_ClockConfig+0x25c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 020f 	bic.w	r2, r3, #15
 8002c9a:	498b      	ldr	r1, [pc, #556]	; (8002ec8 <HAL_RCC_ClockConfig+0x25c>)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca2:	4b89      	ldr	r3, [pc, #548]	; (8002ec8 <HAL_RCC_ClockConfig+0x25c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e105      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d010      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	4b81      	ldr	r3, [pc, #516]	; (8002ecc <HAL_RCC_ClockConfig+0x260>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d908      	bls.n	8002ce2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd0:	4b7e      	ldr	r3, [pc, #504]	; (8002ecc <HAL_RCC_ClockConfig+0x260>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	497b      	ldr	r1, [pc, #492]	; (8002ecc <HAL_RCC_ClockConfig+0x260>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d079      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	d11e      	bne.n	8002d34 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf6:	4b75      	ldr	r3, [pc, #468]	; (8002ecc <HAL_RCC_ClockConfig+0x260>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e0dc      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002d06:	f000 fa09 	bl	800311c <RCC_GetSysClockFreqFromPLLSource>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	4a70      	ldr	r2, [pc, #448]	; (8002ed0 <HAL_RCC_ClockConfig+0x264>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d946      	bls.n	8002da0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002d12:	4b6e      	ldr	r3, [pc, #440]	; (8002ecc <HAL_RCC_ClockConfig+0x260>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d140      	bne.n	8002da0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d1e:	4b6b      	ldr	r3, [pc, #428]	; (8002ecc <HAL_RCC_ClockConfig+0x260>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d26:	4a69      	ldr	r2, [pc, #420]	; (8002ecc <HAL_RCC_ClockConfig+0x260>)
 8002d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d2c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d2e:	2380      	movs	r3, #128	; 0x80
 8002d30:	617b      	str	r3, [r7, #20]
 8002d32:	e035      	b.n	8002da0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d107      	bne.n	8002d4c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d3c:	4b63      	ldr	r3, [pc, #396]	; (8002ecc <HAL_RCC_ClockConfig+0x260>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d115      	bne.n	8002d74 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e0b9      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d107      	bne.n	8002d64 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d54:	4b5d      	ldr	r3, [pc, #372]	; (8002ecc <HAL_RCC_ClockConfig+0x260>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d109      	bne.n	8002d74 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e0ad      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d64:	4b59      	ldr	r3, [pc, #356]	; (8002ecc <HAL_RCC_ClockConfig+0x260>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e0a5      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002d74:	f000 f8b4 	bl	8002ee0 <HAL_RCC_GetSysClockFreq>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	4a55      	ldr	r2, [pc, #340]	; (8002ed0 <HAL_RCC_ClockConfig+0x264>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d90f      	bls.n	8002da0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002d80:	4b52      	ldr	r3, [pc, #328]	; (8002ecc <HAL_RCC_ClockConfig+0x260>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d109      	bne.n	8002da0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d8c:	4b4f      	ldr	r3, [pc, #316]	; (8002ecc <HAL_RCC_ClockConfig+0x260>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d94:	4a4d      	ldr	r2, [pc, #308]	; (8002ecc <HAL_RCC_ClockConfig+0x260>)
 8002d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d9a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d9c:	2380      	movs	r3, #128	; 0x80
 8002d9e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002da0:	4b4a      	ldr	r3, [pc, #296]	; (8002ecc <HAL_RCC_ClockConfig+0x260>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f023 0203 	bic.w	r2, r3, #3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	4947      	ldr	r1, [pc, #284]	; (8002ecc <HAL_RCC_ClockConfig+0x260>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db2:	f7fe ffbd 	bl	8001d30 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db8:	e00a      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dba:	f7fe ffb9 	bl	8001d30 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e077      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd0:	4b3e      	ldr	r3, [pc, #248]	; (8002ecc <HAL_RCC_ClockConfig+0x260>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 020c 	and.w	r2, r3, #12
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d1eb      	bne.n	8002dba <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2b80      	cmp	r3, #128	; 0x80
 8002de6:	d105      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002de8:	4b38      	ldr	r3, [pc, #224]	; (8002ecc <HAL_RCC_ClockConfig+0x260>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	4a37      	ldr	r2, [pc, #220]	; (8002ecc <HAL_RCC_ClockConfig+0x260>)
 8002dee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002df2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d010      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	4b31      	ldr	r3, [pc, #196]	; (8002ecc <HAL_RCC_ClockConfig+0x260>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d208      	bcs.n	8002e22 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e10:	4b2e      	ldr	r3, [pc, #184]	; (8002ecc <HAL_RCC_ClockConfig+0x260>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	492b      	ldr	r1, [pc, #172]	; (8002ecc <HAL_RCC_ClockConfig+0x260>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e22:	4b29      	ldr	r3, [pc, #164]	; (8002ec8 <HAL_RCC_ClockConfig+0x25c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 030f 	and.w	r3, r3, #15
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d210      	bcs.n	8002e52 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e30:	4b25      	ldr	r3, [pc, #148]	; (8002ec8 <HAL_RCC_ClockConfig+0x25c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f023 020f 	bic.w	r2, r3, #15
 8002e38:	4923      	ldr	r1, [pc, #140]	; (8002ec8 <HAL_RCC_ClockConfig+0x25c>)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e40:	4b21      	ldr	r3, [pc, #132]	; (8002ec8 <HAL_RCC_ClockConfig+0x25c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d001      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e036      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0304 	and.w	r3, r3, #4
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d008      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ecc <HAL_RCC_ClockConfig+0x260>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	4918      	ldr	r1, [pc, #96]	; (8002ecc <HAL_RCC_ClockConfig+0x260>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0308 	and.w	r3, r3, #8
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d009      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e7c:	4b13      	ldr	r3, [pc, #76]	; (8002ecc <HAL_RCC_ClockConfig+0x260>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	4910      	ldr	r1, [pc, #64]	; (8002ecc <HAL_RCC_ClockConfig+0x260>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e90:	f000 f826 	bl	8002ee0 <HAL_RCC_GetSysClockFreq>
 8002e94:	4602      	mov	r2, r0
 8002e96:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <HAL_RCC_ClockConfig+0x260>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	091b      	lsrs	r3, r3, #4
 8002e9c:	f003 030f 	and.w	r3, r3, #15
 8002ea0:	490c      	ldr	r1, [pc, #48]	; (8002ed4 <HAL_RCC_ClockConfig+0x268>)
 8002ea2:	5ccb      	ldrb	r3, [r1, r3]
 8002ea4:	f003 031f 	and.w	r3, r3, #31
 8002ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8002eac:	4a0a      	ldr	r2, [pc, #40]	; (8002ed8 <HAL_RCC_ClockConfig+0x26c>)
 8002eae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002eb0:	4b0a      	ldr	r3, [pc, #40]	; (8002edc <HAL_RCC_ClockConfig+0x270>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fe feeb 	bl	8001c90 <HAL_InitTick>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	73fb      	strb	r3, [r7, #15]

  return status;
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40022000 	.word	0x40022000
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	04c4b400 	.word	0x04c4b400
 8002ed4:	08008eb4 	.word	0x08008eb4
 8002ed8:	20000000 	.word	0x20000000
 8002edc:	20000004 	.word	0x20000004

08002ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b089      	sub	sp, #36	; 0x24
 8002ee4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61fb      	str	r3, [r7, #28]
 8002eea:	2300      	movs	r3, #0
 8002eec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eee:	4b3e      	ldr	r3, [pc, #248]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 030c 	and.w	r3, r3, #12
 8002ef6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ef8:	4b3b      	ldr	r3, [pc, #236]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f003 0303 	and.w	r3, r3, #3
 8002f00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <HAL_RCC_GetSysClockFreq+0x34>
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	2b0c      	cmp	r3, #12
 8002f0c:	d121      	bne.n	8002f52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d11e      	bne.n	8002f52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f14:	4b34      	ldr	r3, [pc, #208]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d107      	bne.n	8002f30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f20:	4b31      	ldr	r3, [pc, #196]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f26:	0a1b      	lsrs	r3, r3, #8
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	61fb      	str	r3, [r7, #28]
 8002f2e:	e005      	b.n	8002f3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f30:	4b2d      	ldr	r3, [pc, #180]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	091b      	lsrs	r3, r3, #4
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f3c:	4a2b      	ldr	r2, [pc, #172]	; (8002fec <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10d      	bne.n	8002f68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f50:	e00a      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d102      	bne.n	8002f5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f58:	4b25      	ldr	r3, [pc, #148]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f5a:	61bb      	str	r3, [r7, #24]
 8002f5c:	e004      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d101      	bne.n	8002f68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f64:	4b23      	ldr	r3, [pc, #140]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	2b0c      	cmp	r3, #12
 8002f6c:	d134      	bne.n	8002fd8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f6e:	4b1e      	ldr	r3, [pc, #120]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d003      	beq.n	8002f86 <HAL_RCC_GetSysClockFreq+0xa6>
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2b03      	cmp	r3, #3
 8002f82:	d003      	beq.n	8002f8c <HAL_RCC_GetSysClockFreq+0xac>
 8002f84:	e005      	b.n	8002f92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f86:	4b1a      	ldr	r3, [pc, #104]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f88:	617b      	str	r3, [r7, #20]
      break;
 8002f8a:	e005      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f8c:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f8e:	617b      	str	r3, [r7, #20]
      break;
 8002f90:	e002      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	617b      	str	r3, [r7, #20]
      break;
 8002f96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f98:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	091b      	lsrs	r3, r3, #4
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002fa6:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	0a1b      	lsrs	r3, r3, #8
 8002fac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	fb03 f202 	mul.w	r2, r3, r2
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fbe:	4b0a      	ldr	r3, [pc, #40]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	0e5b      	lsrs	r3, r3, #25
 8002fc4:	f003 0303 	and.w	r3, r3, #3
 8002fc8:	3301      	adds	r3, #1
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fd8:	69bb      	ldr	r3, [r7, #24]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3724      	adds	r7, #36	; 0x24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	08008ecc 	.word	0x08008ecc
 8002ff0:	00f42400 	.word	0x00f42400
 8002ff4:	007a1200 	.word	0x007a1200

08002ff8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ffc:	4b03      	ldr	r3, [pc, #12]	; (800300c <HAL_RCC_GetHCLKFreq+0x14>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
}
 8003000:	4618      	mov	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	20000000 	.word	0x20000000

08003010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003014:	f7ff fff0 	bl	8002ff8 <HAL_RCC_GetHCLKFreq>
 8003018:	4602      	mov	r2, r0
 800301a:	4b06      	ldr	r3, [pc, #24]	; (8003034 <HAL_RCC_GetPCLK1Freq+0x24>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	0a1b      	lsrs	r3, r3, #8
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	4904      	ldr	r1, [pc, #16]	; (8003038 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003026:	5ccb      	ldrb	r3, [r1, r3]
 8003028:	f003 031f 	and.w	r3, r3, #31
 800302c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003030:	4618      	mov	r0, r3
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40021000 	.word	0x40021000
 8003038:	08008ec4 	.word	0x08008ec4

0800303c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003040:	f7ff ffda 	bl	8002ff8 <HAL_RCC_GetHCLKFreq>
 8003044:	4602      	mov	r2, r0
 8003046:	4b06      	ldr	r3, [pc, #24]	; (8003060 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	0adb      	lsrs	r3, r3, #11
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	4904      	ldr	r1, [pc, #16]	; (8003064 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003052:	5ccb      	ldrb	r3, [r1, r3]
 8003054:	f003 031f 	and.w	r3, r3, #31
 8003058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800305c:	4618      	mov	r0, r3
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40021000 	.word	0x40021000
 8003064:	08008ec4 	.word	0x08008ec4

08003068 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003070:	2300      	movs	r3, #0
 8003072:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003074:	4b27      	ldr	r3, [pc, #156]	; (8003114 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003080:	f7ff f906 	bl	8002290 <HAL_PWREx_GetVoltageRange>
 8003084:	6178      	str	r0, [r7, #20]
 8003086:	e014      	b.n	80030b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003088:	4b22      	ldr	r3, [pc, #136]	; (8003114 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800308a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308c:	4a21      	ldr	r2, [pc, #132]	; (8003114 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800308e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003092:	6593      	str	r3, [r2, #88]	; 0x58
 8003094:	4b1f      	ldr	r3, [pc, #124]	; (8003114 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030a0:	f7ff f8f6 	bl	8002290 <HAL_PWREx_GetVoltageRange>
 80030a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030a6:	4b1b      	ldr	r3, [pc, #108]	; (8003114 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030aa:	4a1a      	ldr	r2, [pc, #104]	; (8003114 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030b8:	d10b      	bne.n	80030d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b80      	cmp	r3, #128	; 0x80
 80030be:	d913      	bls.n	80030e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2ba0      	cmp	r3, #160	; 0xa0
 80030c4:	d902      	bls.n	80030cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030c6:	2302      	movs	r3, #2
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	e00d      	b.n	80030e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030cc:	2301      	movs	r3, #1
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	e00a      	b.n	80030e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b7f      	cmp	r3, #127	; 0x7f
 80030d6:	d902      	bls.n	80030de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80030d8:	2302      	movs	r3, #2
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	e004      	b.n	80030e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b70      	cmp	r3, #112	; 0x70
 80030e2:	d101      	bne.n	80030e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030e4:	2301      	movs	r3, #1
 80030e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030e8:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f023 020f 	bic.w	r2, r3, #15
 80030f0:	4909      	ldr	r1, [pc, #36]	; (8003118 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030f8:	4b07      	ldr	r3, [pc, #28]	; (8003118 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 030f 	and.w	r3, r3, #15
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	429a      	cmp	r2, r3
 8003104:	d001      	beq.n	800310a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40021000 	.word	0x40021000
 8003118:	40022000 	.word	0x40022000

0800311c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800311c:	b480      	push	{r7}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003122:	4b2d      	ldr	r3, [pc, #180]	; (80031d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2b03      	cmp	r3, #3
 8003130:	d00b      	beq.n	800314a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2b03      	cmp	r3, #3
 8003136:	d825      	bhi.n	8003184 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d008      	beq.n	8003150 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2b02      	cmp	r3, #2
 8003142:	d11f      	bne.n	8003184 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003144:	4b25      	ldr	r3, [pc, #148]	; (80031dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003146:	613b      	str	r3, [r7, #16]
    break;
 8003148:	e01f      	b.n	800318a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800314a:	4b25      	ldr	r3, [pc, #148]	; (80031e0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800314c:	613b      	str	r3, [r7, #16]
    break;
 800314e:	e01c      	b.n	800318a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003150:	4b21      	ldr	r3, [pc, #132]	; (80031d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0308 	and.w	r3, r3, #8
 8003158:	2b00      	cmp	r3, #0
 800315a:	d107      	bne.n	800316c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800315c:	4b1e      	ldr	r3, [pc, #120]	; (80031d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800315e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003162:	0a1b      	lsrs	r3, r3, #8
 8003164:	f003 030f 	and.w	r3, r3, #15
 8003168:	617b      	str	r3, [r7, #20]
 800316a:	e005      	b.n	8003178 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800316c:	4b1a      	ldr	r3, [pc, #104]	; (80031d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	091b      	lsrs	r3, r3, #4
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003178:	4a1a      	ldr	r2, [pc, #104]	; (80031e4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003180:	613b      	str	r3, [r7, #16]
    break;
 8003182:	e002      	b.n	800318a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003184:	2300      	movs	r3, #0
 8003186:	613b      	str	r3, [r7, #16]
    break;
 8003188:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800318a:	4b13      	ldr	r3, [pc, #76]	; (80031d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	091b      	lsrs	r3, r3, #4
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	3301      	adds	r3, #1
 8003196:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003198:	4b0f      	ldr	r3, [pc, #60]	; (80031d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	0a1b      	lsrs	r3, r3, #8
 800319e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	fb03 f202 	mul.w	r2, r3, r2
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ae:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031b0:	4b09      	ldr	r3, [pc, #36]	; (80031d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	0e5b      	lsrs	r3, r3, #25
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	3301      	adds	r3, #1
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80031ca:	683b      	ldr	r3, [r7, #0]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	371c      	adds	r7, #28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	40021000 	.word	0x40021000
 80031dc:	00f42400 	.word	0x00f42400
 80031e0:	007a1200 	.word	0x007a1200
 80031e4:	08008ecc 	.word	0x08008ecc

080031e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031f0:	2300      	movs	r3, #0
 80031f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031f4:	2300      	movs	r3, #0
 80031f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003200:	2b00      	cmp	r3, #0
 8003202:	d040      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003208:	2b80      	cmp	r3, #128	; 0x80
 800320a:	d02a      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800320c:	2b80      	cmp	r3, #128	; 0x80
 800320e:	d825      	bhi.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003210:	2b60      	cmp	r3, #96	; 0x60
 8003212:	d026      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003214:	2b60      	cmp	r3, #96	; 0x60
 8003216:	d821      	bhi.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003218:	2b40      	cmp	r3, #64	; 0x40
 800321a:	d006      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800321c:	2b40      	cmp	r3, #64	; 0x40
 800321e:	d81d      	bhi.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003220:	2b00      	cmp	r3, #0
 8003222:	d009      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003224:	2b20      	cmp	r3, #32
 8003226:	d010      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003228:	e018      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800322a:	4b89      	ldr	r3, [pc, #548]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	4a88      	ldr	r2, [pc, #544]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003234:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003236:	e015      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3304      	adds	r3, #4
 800323c:	2100      	movs	r1, #0
 800323e:	4618      	mov	r0, r3
 8003240:	f000 fb02 	bl	8003848 <RCCEx_PLLSAI1_Config>
 8003244:	4603      	mov	r3, r0
 8003246:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003248:	e00c      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3320      	adds	r3, #32
 800324e:	2100      	movs	r1, #0
 8003250:	4618      	mov	r0, r3
 8003252:	f000 fbed 	bl	8003a30 <RCCEx_PLLSAI2_Config>
 8003256:	4603      	mov	r3, r0
 8003258:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800325a:	e003      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	74fb      	strb	r3, [r7, #19]
      break;
 8003260:	e000      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003262:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003264:	7cfb      	ldrb	r3, [r7, #19]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10b      	bne.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800326a:	4b79      	ldr	r3, [pc, #484]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800326c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003270:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003278:	4975      	ldr	r1, [pc, #468]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800327a:	4313      	orrs	r3, r2
 800327c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003280:	e001      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003282:	7cfb      	ldrb	r3, [r7, #19]
 8003284:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d047      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800329a:	d030      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x116>
 800329c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a0:	d82a      	bhi.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80032a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032a6:	d02a      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x116>
 80032a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032ac:	d824      	bhi.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80032ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032b2:	d008      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80032b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032b8:	d81e      	bhi.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00a      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80032be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032c2:	d010      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80032c4:	e018      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032c6:	4b62      	ldr	r3, [pc, #392]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	4a61      	ldr	r2, [pc, #388]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032d2:	e015      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3304      	adds	r3, #4
 80032d8:	2100      	movs	r1, #0
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 fab4 	bl	8003848 <RCCEx_PLLSAI1_Config>
 80032e0:	4603      	mov	r3, r0
 80032e2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032e4:	e00c      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3320      	adds	r3, #32
 80032ea:	2100      	movs	r1, #0
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 fb9f 	bl	8003a30 <RCCEx_PLLSAI2_Config>
 80032f2:	4603      	mov	r3, r0
 80032f4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032f6:	e003      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	74fb      	strb	r3, [r7, #19]
      break;
 80032fc:	e000      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80032fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003300:	7cfb      	ldrb	r3, [r7, #19]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10b      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003306:	4b52      	ldr	r3, [pc, #328]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003308:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800330c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003314:	494e      	ldr	r1, [pc, #312]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003316:	4313      	orrs	r3, r2
 8003318:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800331c:	e001      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800331e:	7cfb      	ldrb	r3, [r7, #19]
 8003320:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 809f 	beq.w	800346e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003330:	2300      	movs	r3, #0
 8003332:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003334:	4b46      	ldr	r3, [pc, #280]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003344:	2300      	movs	r3, #0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00d      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800334a:	4b41      	ldr	r3, [pc, #260]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800334c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334e:	4a40      	ldr	r2, [pc, #256]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003354:	6593      	str	r3, [r2, #88]	; 0x58
 8003356:	4b3e      	ldr	r3, [pc, #248]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335e:	60bb      	str	r3, [r7, #8]
 8003360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003362:	2301      	movs	r3, #1
 8003364:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003366:	4b3b      	ldr	r3, [pc, #236]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a3a      	ldr	r2, [pc, #232]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800336c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003370:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003372:	f7fe fcdd 	bl	8001d30 <HAL_GetTick>
 8003376:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003378:	e009      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800337a:	f7fe fcd9 	bl	8001d30 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d902      	bls.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	74fb      	strb	r3, [r7, #19]
        break;
 800338c:	e005      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800338e:	4b31      	ldr	r3, [pc, #196]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0ef      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800339a:	7cfb      	ldrb	r3, [r7, #19]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d15b      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033a0:	4b2b      	ldr	r3, [pc, #172]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033aa:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d01f      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d019      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033be:	4b24      	ldr	r3, [pc, #144]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033c8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033ca:	4b21      	ldr	r3, [pc, #132]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d0:	4a1f      	ldr	r2, [pc, #124]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033da:	4b1d      	ldr	r3, [pc, #116]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e0:	4a1b      	ldr	r2, [pc, #108]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033ea:	4a19      	ldr	r2, [pc, #100]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d016      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fc:	f7fe fc98 	bl	8001d30 <HAL_GetTick>
 8003400:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003402:	e00b      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003404:	f7fe fc94 	bl	8001d30 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003412:	4293      	cmp	r3, r2
 8003414:	d902      	bls.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	74fb      	strb	r3, [r7, #19]
            break;
 800341a:	e006      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800341c:	4b0c      	ldr	r3, [pc, #48]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800341e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0ec      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800342a:	7cfb      	ldrb	r3, [r7, #19]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10c      	bne.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003430:	4b07      	ldr	r3, [pc, #28]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003436:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003440:	4903      	ldr	r1, [pc, #12]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003448:	e008      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800344a:	7cfb      	ldrb	r3, [r7, #19]
 800344c:	74bb      	strb	r3, [r7, #18]
 800344e:	e005      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003450:	40021000 	.word	0x40021000
 8003454:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003458:	7cfb      	ldrb	r3, [r7, #19]
 800345a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800345c:	7c7b      	ldrb	r3, [r7, #17]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d105      	bne.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003462:	4ba0      	ldr	r3, [pc, #640]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003466:	4a9f      	ldr	r2, [pc, #636]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800346c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800347a:	4b9a      	ldr	r3, [pc, #616]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800347c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003480:	f023 0203 	bic.w	r2, r3, #3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003488:	4996      	ldr	r1, [pc, #600]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800348a:	4313      	orrs	r3, r2
 800348c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00a      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800349c:	4b91      	ldr	r3, [pc, #580]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800349e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a2:	f023 020c 	bic.w	r2, r3, #12
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	498e      	ldr	r1, [pc, #568]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034be:	4b89      	ldr	r3, [pc, #548]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034cc:	4985      	ldr	r1, [pc, #532]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00a      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034e0:	4b80      	ldr	r3, [pc, #512]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ee:	497d      	ldr	r1, [pc, #500]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003502:	4b78      	ldr	r3, [pc, #480]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003508:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003510:	4974      	ldr	r1, [pc, #464]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0320 	and.w	r3, r3, #32
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003524:	4b6f      	ldr	r3, [pc, #444]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003532:	496c      	ldr	r1, [pc, #432]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003546:	4b67      	ldr	r3, [pc, #412]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003554:	4963      	ldr	r1, [pc, #396]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00a      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003568:	4b5e      	ldr	r3, [pc, #376]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800356a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003576:	495b      	ldr	r1, [pc, #364]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003578:	4313      	orrs	r3, r2
 800357a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800358a:	4b56      	ldr	r3, [pc, #344]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800358c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003590:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003598:	4952      	ldr	r1, [pc, #328]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800359a:	4313      	orrs	r3, r2
 800359c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035ac:	4b4d      	ldr	r3, [pc, #308]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ba:	494a      	ldr	r1, [pc, #296]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035ce:	4b45      	ldr	r3, [pc, #276]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035dc:	4941      	ldr	r1, [pc, #260]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00a      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035f0:	4b3c      	ldr	r3, [pc, #240]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035f6:	f023 0203 	bic.w	r2, r3, #3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035fe:	4939      	ldr	r1, [pc, #228]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003600:	4313      	orrs	r3, r2
 8003602:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d028      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003612:	4b34      	ldr	r3, [pc, #208]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003618:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003620:	4930      	ldr	r1, [pc, #192]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003622:	4313      	orrs	r3, r2
 8003624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800362c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003630:	d106      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003632:	4b2c      	ldr	r3, [pc, #176]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	4a2b      	ldr	r2, [pc, #172]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003638:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800363c:	60d3      	str	r3, [r2, #12]
 800363e:	e011      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003644:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003648:	d10c      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3304      	adds	r3, #4
 800364e:	2101      	movs	r1, #1
 8003650:	4618      	mov	r0, r3
 8003652:	f000 f8f9 	bl	8003848 <RCCEx_PLLSAI1_Config>
 8003656:	4603      	mov	r3, r0
 8003658:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800365a:	7cfb      	ldrb	r3, [r7, #19]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003660:	7cfb      	ldrb	r3, [r7, #19]
 8003662:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d04d      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003674:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003678:	d108      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800367a:	4b1a      	ldr	r3, [pc, #104]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800367c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003680:	4a18      	ldr	r2, [pc, #96]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003686:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800368a:	e012      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800368c:	4b15      	ldr	r3, [pc, #84]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800368e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003692:	4a14      	ldr	r2, [pc, #80]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003694:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003698:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800369c:	4b11      	ldr	r3, [pc, #68]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800369e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036aa:	490e      	ldr	r1, [pc, #56]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036ba:	d106      	bne.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036bc:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	4a08      	ldr	r2, [pc, #32]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036c6:	60d3      	str	r3, [r2, #12]
 80036c8:	e020      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036d2:	d109      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036d4:	4b03      	ldr	r3, [pc, #12]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	4a02      	ldr	r2, [pc, #8]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036de:	60d3      	str	r3, [r2, #12]
 80036e0:	e014      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80036e2:	bf00      	nop
 80036e4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036f0:	d10c      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	3304      	adds	r3, #4
 80036f6:	2101      	movs	r1, #1
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 f8a5 	bl	8003848 <RCCEx_PLLSAI1_Config>
 80036fe:	4603      	mov	r3, r0
 8003700:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003702:	7cfb      	ldrb	r3, [r7, #19]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003708:	7cfb      	ldrb	r3, [r7, #19]
 800370a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d028      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003718:	4b4a      	ldr	r3, [pc, #296]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800371a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003726:	4947      	ldr	r1, [pc, #284]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003728:	4313      	orrs	r3, r2
 800372a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003732:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003736:	d106      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003738:	4b42      	ldr	r3, [pc, #264]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	4a41      	ldr	r2, [pc, #260]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800373e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003742:	60d3      	str	r3, [r2, #12]
 8003744:	e011      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800374a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800374e:	d10c      	bne.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3304      	adds	r3, #4
 8003754:	2101      	movs	r1, #1
 8003756:	4618      	mov	r0, r3
 8003758:	f000 f876 	bl	8003848 <RCCEx_PLLSAI1_Config>
 800375c:	4603      	mov	r3, r0
 800375e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003760:	7cfb      	ldrb	r3, [r7, #19]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003766:	7cfb      	ldrb	r3, [r7, #19]
 8003768:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d01e      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003776:	4b33      	ldr	r3, [pc, #204]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003786:	492f      	ldr	r1, [pc, #188]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003794:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003798:	d10c      	bne.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	3304      	adds	r3, #4
 800379e:	2102      	movs	r1, #2
 80037a0:	4618      	mov	r0, r3
 80037a2:	f000 f851 	bl	8003848 <RCCEx_PLLSAI1_Config>
 80037a6:	4603      	mov	r3, r0
 80037a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037aa:	7cfb      	ldrb	r3, [r7, #19]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80037b0:	7cfb      	ldrb	r3, [r7, #19]
 80037b2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00b      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037c0:	4b20      	ldr	r3, [pc, #128]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037c6:	f023 0204 	bic.w	r2, r3, #4
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037d0:	491c      	ldr	r1, [pc, #112]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00b      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80037e4:	4b17      	ldr	r3, [pc, #92]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037ea:	f023 0218 	bic.w	r2, r3, #24
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f4:	4913      	ldr	r1, [pc, #76]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d017      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003808:	4b0e      	ldr	r3, [pc, #56]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800380a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800380e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003818:	490a      	ldr	r1, [pc, #40]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800381a:	4313      	orrs	r3, r2
 800381c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003826:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800382a:	d105      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800382c:	4b05      	ldr	r3, [pc, #20]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	4a04      	ldr	r2, [pc, #16]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003832:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003836:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003838:	7cbb      	ldrb	r3, [r7, #18]
}
 800383a:	4618      	mov	r0, r3
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40021000 	.word	0x40021000

08003848 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003856:	4b72      	ldr	r3, [pc, #456]	; (8003a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00e      	beq.n	8003880 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003862:	4b6f      	ldr	r3, [pc, #444]	; (8003a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f003 0203 	and.w	r2, r3, #3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d103      	bne.n	800387a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
       ||
 8003876:	2b00      	cmp	r3, #0
 8003878:	d142      	bne.n	8003900 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	73fb      	strb	r3, [r7, #15]
 800387e:	e03f      	b.n	8003900 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b03      	cmp	r3, #3
 8003886:	d018      	beq.n	80038ba <RCCEx_PLLSAI1_Config+0x72>
 8003888:	2b03      	cmp	r3, #3
 800388a:	d825      	bhi.n	80038d8 <RCCEx_PLLSAI1_Config+0x90>
 800388c:	2b01      	cmp	r3, #1
 800388e:	d002      	beq.n	8003896 <RCCEx_PLLSAI1_Config+0x4e>
 8003890:	2b02      	cmp	r3, #2
 8003892:	d009      	beq.n	80038a8 <RCCEx_PLLSAI1_Config+0x60>
 8003894:	e020      	b.n	80038d8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003896:	4b62      	ldr	r3, [pc, #392]	; (8003a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d11d      	bne.n	80038de <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a6:	e01a      	b.n	80038de <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038a8:	4b5d      	ldr	r3, [pc, #372]	; (8003a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d116      	bne.n	80038e2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038b8:	e013      	b.n	80038e2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038ba:	4b59      	ldr	r3, [pc, #356]	; (8003a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10f      	bne.n	80038e6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038c6:	4b56      	ldr	r3, [pc, #344]	; (8003a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d109      	bne.n	80038e6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038d6:	e006      	b.n	80038e6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	73fb      	strb	r3, [r7, #15]
      break;
 80038dc:	e004      	b.n	80038e8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80038de:	bf00      	nop
 80038e0:	e002      	b.n	80038e8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80038e2:	bf00      	nop
 80038e4:	e000      	b.n	80038e8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80038e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d108      	bne.n	8003900 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80038ee:	4b4c      	ldr	r3, [pc, #304]	; (8003a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	f023 0203 	bic.w	r2, r3, #3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4949      	ldr	r1, [pc, #292]	; (8003a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003900:	7bfb      	ldrb	r3, [r7, #15]
 8003902:	2b00      	cmp	r3, #0
 8003904:	f040 8086 	bne.w	8003a14 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003908:	4b45      	ldr	r3, [pc, #276]	; (8003a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a44      	ldr	r2, [pc, #272]	; (8003a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 800390e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003912:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003914:	f7fe fa0c 	bl	8001d30 <HAL_GetTick>
 8003918:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800391a:	e009      	b.n	8003930 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800391c:	f7fe fa08 	bl	8001d30 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d902      	bls.n	8003930 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	73fb      	strb	r3, [r7, #15]
        break;
 800392e:	e005      	b.n	800393c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003930:	4b3b      	ldr	r3, [pc, #236]	; (8003a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1ef      	bne.n	800391c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800393c:	7bfb      	ldrb	r3, [r7, #15]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d168      	bne.n	8003a14 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d113      	bne.n	8003970 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003948:	4b35      	ldr	r3, [pc, #212]	; (8003a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	4b35      	ldr	r3, [pc, #212]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1dc>)
 800394e:	4013      	ands	r3, r2
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6892      	ldr	r2, [r2, #8]
 8003954:	0211      	lsls	r1, r2, #8
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	68d2      	ldr	r2, [r2, #12]
 800395a:	06d2      	lsls	r2, r2, #27
 800395c:	4311      	orrs	r1, r2
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6852      	ldr	r2, [r2, #4]
 8003962:	3a01      	subs	r2, #1
 8003964:	0112      	lsls	r2, r2, #4
 8003966:	430a      	orrs	r2, r1
 8003968:	492d      	ldr	r1, [pc, #180]	; (8003a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 800396a:	4313      	orrs	r3, r2
 800396c:	610b      	str	r3, [r1, #16]
 800396e:	e02d      	b.n	80039cc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d115      	bne.n	80039a2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003976:	4b2a      	ldr	r3, [pc, #168]	; (8003a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003978:	691a      	ldr	r2, [r3, #16]
 800397a:	4b2b      	ldr	r3, [pc, #172]	; (8003a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 800397c:	4013      	ands	r3, r2
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6892      	ldr	r2, [r2, #8]
 8003982:	0211      	lsls	r1, r2, #8
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6912      	ldr	r2, [r2, #16]
 8003988:	0852      	lsrs	r2, r2, #1
 800398a:	3a01      	subs	r2, #1
 800398c:	0552      	lsls	r2, r2, #21
 800398e:	4311      	orrs	r1, r2
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6852      	ldr	r2, [r2, #4]
 8003994:	3a01      	subs	r2, #1
 8003996:	0112      	lsls	r2, r2, #4
 8003998:	430a      	orrs	r2, r1
 800399a:	4921      	ldr	r1, [pc, #132]	; (8003a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 800399c:	4313      	orrs	r3, r2
 800399e:	610b      	str	r3, [r1, #16]
 80039a0:	e014      	b.n	80039cc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039a2:	4b1f      	ldr	r3, [pc, #124]	; (8003a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039a4:	691a      	ldr	r2, [r3, #16]
 80039a6:	4b21      	ldr	r3, [pc, #132]	; (8003a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a8:	4013      	ands	r3, r2
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6892      	ldr	r2, [r2, #8]
 80039ae:	0211      	lsls	r1, r2, #8
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6952      	ldr	r2, [r2, #20]
 80039b4:	0852      	lsrs	r2, r2, #1
 80039b6:	3a01      	subs	r2, #1
 80039b8:	0652      	lsls	r2, r2, #25
 80039ba:	4311      	orrs	r1, r2
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6852      	ldr	r2, [r2, #4]
 80039c0:	3a01      	subs	r2, #1
 80039c2:	0112      	lsls	r2, r2, #4
 80039c4:	430a      	orrs	r2, r1
 80039c6:	4916      	ldr	r1, [pc, #88]	; (8003a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039cc:	4b14      	ldr	r3, [pc, #80]	; (8003a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a13      	ldr	r2, [pc, #76]	; (8003a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d8:	f7fe f9aa 	bl	8001d30 <HAL_GetTick>
 80039dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039de:	e009      	b.n	80039f4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039e0:	f7fe f9a6 	bl	8001d30 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d902      	bls.n	80039f4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	73fb      	strb	r3, [r7, #15]
          break;
 80039f2:	e005      	b.n	8003a00 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039f4:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0ef      	beq.n	80039e0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a06:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a08:	691a      	ldr	r2, [r3, #16]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	4904      	ldr	r1, [pc, #16]	; (8003a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40021000 	.word	0x40021000
 8003a24:	07ff800f 	.word	0x07ff800f
 8003a28:	ff9f800f 	.word	0xff9f800f
 8003a2c:	f9ff800f 	.word	0xf9ff800f

08003a30 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a3e:	4b72      	ldr	r3, [pc, #456]	; (8003c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00e      	beq.n	8003a68 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a4a:	4b6f      	ldr	r3, [pc, #444]	; (8003c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f003 0203 	and.w	r2, r3, #3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d103      	bne.n	8003a62 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
       ||
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d142      	bne.n	8003ae8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	73fb      	strb	r3, [r7, #15]
 8003a66:	e03f      	b.n	8003ae8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d018      	beq.n	8003aa2 <RCCEx_PLLSAI2_Config+0x72>
 8003a70:	2b03      	cmp	r3, #3
 8003a72:	d825      	bhi.n	8003ac0 <RCCEx_PLLSAI2_Config+0x90>
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d002      	beq.n	8003a7e <RCCEx_PLLSAI2_Config+0x4e>
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d009      	beq.n	8003a90 <RCCEx_PLLSAI2_Config+0x60>
 8003a7c:	e020      	b.n	8003ac0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a7e:	4b62      	ldr	r3, [pc, #392]	; (8003c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d11d      	bne.n	8003ac6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a8e:	e01a      	b.n	8003ac6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a90:	4b5d      	ldr	r3, [pc, #372]	; (8003c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d116      	bne.n	8003aca <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aa0:	e013      	b.n	8003aca <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003aa2:	4b59      	ldr	r3, [pc, #356]	; (8003c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10f      	bne.n	8003ace <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003aae:	4b56      	ldr	r3, [pc, #344]	; (8003c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d109      	bne.n	8003ace <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003abe:	e006      	b.n	8003ace <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac4:	e004      	b.n	8003ad0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003ac6:	bf00      	nop
 8003ac8:	e002      	b.n	8003ad0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003aca:	bf00      	nop
 8003acc:	e000      	b.n	8003ad0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003ace:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d108      	bne.n	8003ae8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003ad6:	4b4c      	ldr	r3, [pc, #304]	; (8003c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f023 0203 	bic.w	r2, r3, #3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4949      	ldr	r1, [pc, #292]	; (8003c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f040 8086 	bne.w	8003bfc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003af0:	4b45      	ldr	r3, [pc, #276]	; (8003c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a44      	ldr	r2, [pc, #272]	; (8003c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003af6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003afa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003afc:	f7fe f918 	bl	8001d30 <HAL_GetTick>
 8003b00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b02:	e009      	b.n	8003b18 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b04:	f7fe f914 	bl	8001d30 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d902      	bls.n	8003b18 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	73fb      	strb	r3, [r7, #15]
        break;
 8003b16:	e005      	b.n	8003b24 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b18:	4b3b      	ldr	r3, [pc, #236]	; (8003c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1ef      	bne.n	8003b04 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d168      	bne.n	8003bfc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d113      	bne.n	8003b58 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b30:	4b35      	ldr	r3, [pc, #212]	; (8003c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b32:	695a      	ldr	r2, [r3, #20]
 8003b34:	4b35      	ldr	r3, [pc, #212]	; (8003c0c <RCCEx_PLLSAI2_Config+0x1dc>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6892      	ldr	r2, [r2, #8]
 8003b3c:	0211      	lsls	r1, r2, #8
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	68d2      	ldr	r2, [r2, #12]
 8003b42:	06d2      	lsls	r2, r2, #27
 8003b44:	4311      	orrs	r1, r2
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6852      	ldr	r2, [r2, #4]
 8003b4a:	3a01      	subs	r2, #1
 8003b4c:	0112      	lsls	r2, r2, #4
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	492d      	ldr	r1, [pc, #180]	; (8003c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	614b      	str	r3, [r1, #20]
 8003b56:	e02d      	b.n	8003bb4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d115      	bne.n	8003b8a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b5e:	4b2a      	ldr	r3, [pc, #168]	; (8003c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b60:	695a      	ldr	r2, [r3, #20]
 8003b62:	4b2b      	ldr	r3, [pc, #172]	; (8003c10 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003b64:	4013      	ands	r3, r2
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6892      	ldr	r2, [r2, #8]
 8003b6a:	0211      	lsls	r1, r2, #8
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6912      	ldr	r2, [r2, #16]
 8003b70:	0852      	lsrs	r2, r2, #1
 8003b72:	3a01      	subs	r2, #1
 8003b74:	0552      	lsls	r2, r2, #21
 8003b76:	4311      	orrs	r1, r2
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6852      	ldr	r2, [r2, #4]
 8003b7c:	3a01      	subs	r2, #1
 8003b7e:	0112      	lsls	r2, r2, #4
 8003b80:	430a      	orrs	r2, r1
 8003b82:	4921      	ldr	r1, [pc, #132]	; (8003c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	614b      	str	r3, [r1, #20]
 8003b88:	e014      	b.n	8003bb4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b8a:	4b1f      	ldr	r3, [pc, #124]	; (8003c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b8c:	695a      	ldr	r2, [r3, #20]
 8003b8e:	4b21      	ldr	r3, [pc, #132]	; (8003c14 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003b90:	4013      	ands	r3, r2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6892      	ldr	r2, [r2, #8]
 8003b96:	0211      	lsls	r1, r2, #8
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6952      	ldr	r2, [r2, #20]
 8003b9c:	0852      	lsrs	r2, r2, #1
 8003b9e:	3a01      	subs	r2, #1
 8003ba0:	0652      	lsls	r2, r2, #25
 8003ba2:	4311      	orrs	r1, r2
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6852      	ldr	r2, [r2, #4]
 8003ba8:	3a01      	subs	r2, #1
 8003baa:	0112      	lsls	r2, r2, #4
 8003bac:	430a      	orrs	r2, r1
 8003bae:	4916      	ldr	r1, [pc, #88]	; (8003c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003bb4:	4b14      	ldr	r3, [pc, #80]	; (8003c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a13      	ldr	r2, [pc, #76]	; (8003c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bbe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc0:	f7fe f8b6 	bl	8001d30 <HAL_GetTick>
 8003bc4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bc6:	e009      	b.n	8003bdc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bc8:	f7fe f8b2 	bl	8001d30 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d902      	bls.n	8003bdc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	73fb      	strb	r3, [r7, #15]
          break;
 8003bda:	e005      	b.n	8003be8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bdc:	4b0a      	ldr	r3, [pc, #40]	; (8003c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0ef      	beq.n	8003bc8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d106      	bne.n	8003bfc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003bee:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bf0:	695a      	ldr	r2, [r3, #20]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	4904      	ldr	r1, [pc, #16]	; (8003c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	07ff800f 	.word	0x07ff800f
 8003c10:	ff9f800f 	.word	0xff9f800f
 8003c14:	f9ff800f 	.word	0xf9ff800f

08003c18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e049      	b.n	8003cbe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7fd fdaa 	bl	8001798 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3304      	adds	r3, #4
 8003c54:	4619      	mov	r1, r3
 8003c56:	4610      	mov	r0, r2
 8003c58:	f000 ff14 	bl	8004a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b082      	sub	sp, #8
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e049      	b.n	8003d6c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d106      	bne.n	8003cf2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f841 	bl	8003d74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	3304      	adds	r3, #4
 8003d02:	4619      	mov	r1, r3
 8003d04:	4610      	mov	r0, r2
 8003d06:	f000 febd 	bl	8004a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d109      	bne.n	8003dac <HAL_TIM_PWM_Start+0x24>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	bf14      	ite	ne
 8003da4:	2301      	movne	r3, #1
 8003da6:	2300      	moveq	r3, #0
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	e03c      	b.n	8003e26 <HAL_TIM_PWM_Start+0x9e>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d109      	bne.n	8003dc6 <HAL_TIM_PWM_Start+0x3e>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	bf14      	ite	ne
 8003dbe:	2301      	movne	r3, #1
 8003dc0:	2300      	moveq	r3, #0
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	e02f      	b.n	8003e26 <HAL_TIM_PWM_Start+0x9e>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d109      	bne.n	8003de0 <HAL_TIM_PWM_Start+0x58>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	bf14      	ite	ne
 8003dd8:	2301      	movne	r3, #1
 8003dda:	2300      	moveq	r3, #0
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	e022      	b.n	8003e26 <HAL_TIM_PWM_Start+0x9e>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2b0c      	cmp	r3, #12
 8003de4:	d109      	bne.n	8003dfa <HAL_TIM_PWM_Start+0x72>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	bf14      	ite	ne
 8003df2:	2301      	movne	r3, #1
 8003df4:	2300      	moveq	r3, #0
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	e015      	b.n	8003e26 <HAL_TIM_PWM_Start+0x9e>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b10      	cmp	r3, #16
 8003dfe:	d109      	bne.n	8003e14 <HAL_TIM_PWM_Start+0x8c>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	bf14      	ite	ne
 8003e0c:	2301      	movne	r3, #1
 8003e0e:	2300      	moveq	r3, #0
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	e008      	b.n	8003e26 <HAL_TIM_PWM_Start+0x9e>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	bf14      	ite	ne
 8003e20:	2301      	movne	r3, #1
 8003e22:	2300      	moveq	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e09c      	b.n	8003f68 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d104      	bne.n	8003e3e <HAL_TIM_PWM_Start+0xb6>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e3c:	e023      	b.n	8003e86 <HAL_TIM_PWM_Start+0xfe>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d104      	bne.n	8003e4e <HAL_TIM_PWM_Start+0xc6>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e4c:	e01b      	b.n	8003e86 <HAL_TIM_PWM_Start+0xfe>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d104      	bne.n	8003e5e <HAL_TIM_PWM_Start+0xd6>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e5c:	e013      	b.n	8003e86 <HAL_TIM_PWM_Start+0xfe>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b0c      	cmp	r3, #12
 8003e62:	d104      	bne.n	8003e6e <HAL_TIM_PWM_Start+0xe6>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e6c:	e00b      	b.n	8003e86 <HAL_TIM_PWM_Start+0xfe>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b10      	cmp	r3, #16
 8003e72:	d104      	bne.n	8003e7e <HAL_TIM_PWM_Start+0xf6>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e7c:	e003      	b.n	8003e86 <HAL_TIM_PWM_Start+0xfe>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2202      	movs	r2, #2
 8003e82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	6839      	ldr	r1, [r7, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f001 fb26 	bl	80054e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a35      	ldr	r2, [pc, #212]	; (8003f70 <HAL_TIM_PWM_Start+0x1e8>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d013      	beq.n	8003ec6 <HAL_TIM_PWM_Start+0x13e>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a34      	ldr	r2, [pc, #208]	; (8003f74 <HAL_TIM_PWM_Start+0x1ec>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d00e      	beq.n	8003ec6 <HAL_TIM_PWM_Start+0x13e>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a32      	ldr	r2, [pc, #200]	; (8003f78 <HAL_TIM_PWM_Start+0x1f0>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d009      	beq.n	8003ec6 <HAL_TIM_PWM_Start+0x13e>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a31      	ldr	r2, [pc, #196]	; (8003f7c <HAL_TIM_PWM_Start+0x1f4>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d004      	beq.n	8003ec6 <HAL_TIM_PWM_Start+0x13e>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a2f      	ldr	r2, [pc, #188]	; (8003f80 <HAL_TIM_PWM_Start+0x1f8>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d101      	bne.n	8003eca <HAL_TIM_PWM_Start+0x142>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e000      	b.n	8003ecc <HAL_TIM_PWM_Start+0x144>
 8003eca:	2300      	movs	r3, #0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d007      	beq.n	8003ee0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ede:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a22      	ldr	r2, [pc, #136]	; (8003f70 <HAL_TIM_PWM_Start+0x1e8>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d01d      	beq.n	8003f26 <HAL_TIM_PWM_Start+0x19e>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef2:	d018      	beq.n	8003f26 <HAL_TIM_PWM_Start+0x19e>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a22      	ldr	r2, [pc, #136]	; (8003f84 <HAL_TIM_PWM_Start+0x1fc>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d013      	beq.n	8003f26 <HAL_TIM_PWM_Start+0x19e>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a21      	ldr	r2, [pc, #132]	; (8003f88 <HAL_TIM_PWM_Start+0x200>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d00e      	beq.n	8003f26 <HAL_TIM_PWM_Start+0x19e>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a1f      	ldr	r2, [pc, #124]	; (8003f8c <HAL_TIM_PWM_Start+0x204>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d009      	beq.n	8003f26 <HAL_TIM_PWM_Start+0x19e>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a17      	ldr	r2, [pc, #92]	; (8003f74 <HAL_TIM_PWM_Start+0x1ec>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d004      	beq.n	8003f26 <HAL_TIM_PWM_Start+0x19e>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a15      	ldr	r2, [pc, #84]	; (8003f78 <HAL_TIM_PWM_Start+0x1f0>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d115      	bne.n	8003f52 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	4b18      	ldr	r3, [pc, #96]	; (8003f90 <HAL_TIM_PWM_Start+0x208>)
 8003f2e:	4013      	ands	r3, r2
 8003f30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2b06      	cmp	r3, #6
 8003f36:	d015      	beq.n	8003f64 <HAL_TIM_PWM_Start+0x1dc>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f3e:	d011      	beq.n	8003f64 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0201 	orr.w	r2, r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f50:	e008      	b.n	8003f64 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f042 0201 	orr.w	r2, r2, #1
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	e000      	b.n	8003f66 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f64:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40012c00 	.word	0x40012c00
 8003f74:	40013400 	.word	0x40013400
 8003f78:	40014000 	.word	0x40014000
 8003f7c:	40014400 	.word	0x40014400
 8003f80:	40014800 	.word	0x40014800
 8003f84:	40000400 	.word	0x40000400
 8003f88:	40000800 	.word	0x40000800
 8003f8c:	40000c00 	.word	0x40000c00
 8003f90:	00010007 	.word	0x00010007

08003f94 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e049      	b.n	800403a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d106      	bne.n	8003fc0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f841 	bl	8004042 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	f000 fd56 	bl	8004a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
	...

08004058 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d104      	bne.n	8004076 <HAL_TIM_IC_Start_IT+0x1e>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004072:	b2db      	uxtb	r3, r3
 8004074:	e023      	b.n	80040be <HAL_TIM_IC_Start_IT+0x66>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2b04      	cmp	r3, #4
 800407a:	d104      	bne.n	8004086 <HAL_TIM_IC_Start_IT+0x2e>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004082:	b2db      	uxtb	r3, r3
 8004084:	e01b      	b.n	80040be <HAL_TIM_IC_Start_IT+0x66>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b08      	cmp	r3, #8
 800408a:	d104      	bne.n	8004096 <HAL_TIM_IC_Start_IT+0x3e>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004092:	b2db      	uxtb	r3, r3
 8004094:	e013      	b.n	80040be <HAL_TIM_IC_Start_IT+0x66>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b0c      	cmp	r3, #12
 800409a:	d104      	bne.n	80040a6 <HAL_TIM_IC_Start_IT+0x4e>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	e00b      	b.n	80040be <HAL_TIM_IC_Start_IT+0x66>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b10      	cmp	r3, #16
 80040aa:	d104      	bne.n	80040b6 <HAL_TIM_IC_Start_IT+0x5e>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	e003      	b.n	80040be <HAL_TIM_IC_Start_IT+0x66>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d104      	bne.n	80040d0 <HAL_TIM_IC_Start_IT+0x78>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	e013      	b.n	80040f8 <HAL_TIM_IC_Start_IT+0xa0>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d104      	bne.n	80040e0 <HAL_TIM_IC_Start_IT+0x88>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	e00b      	b.n	80040f8 <HAL_TIM_IC_Start_IT+0xa0>
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	d104      	bne.n	80040f0 <HAL_TIM_IC_Start_IT+0x98>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	e003      	b.n	80040f8 <HAL_TIM_IC_Start_IT+0xa0>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80040fa:	7bbb      	ldrb	r3, [r7, #14]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d102      	bne.n	8004106 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004100:	7b7b      	ldrb	r3, [r7, #13]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d001      	beq.n	800410a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e0dd      	b.n	80042c6 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d104      	bne.n	800411a <HAL_TIM_IC_Start_IT+0xc2>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004118:	e023      	b.n	8004162 <HAL_TIM_IC_Start_IT+0x10a>
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2b04      	cmp	r3, #4
 800411e:	d104      	bne.n	800412a <HAL_TIM_IC_Start_IT+0xd2>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004128:	e01b      	b.n	8004162 <HAL_TIM_IC_Start_IT+0x10a>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b08      	cmp	r3, #8
 800412e:	d104      	bne.n	800413a <HAL_TIM_IC_Start_IT+0xe2>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004138:	e013      	b.n	8004162 <HAL_TIM_IC_Start_IT+0x10a>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b0c      	cmp	r3, #12
 800413e:	d104      	bne.n	800414a <HAL_TIM_IC_Start_IT+0xf2>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004148:	e00b      	b.n	8004162 <HAL_TIM_IC_Start_IT+0x10a>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b10      	cmp	r3, #16
 800414e:	d104      	bne.n	800415a <HAL_TIM_IC_Start_IT+0x102>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004158:	e003      	b.n	8004162 <HAL_TIM_IC_Start_IT+0x10a>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2202      	movs	r2, #2
 800415e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d104      	bne.n	8004172 <HAL_TIM_IC_Start_IT+0x11a>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004170:	e013      	b.n	800419a <HAL_TIM_IC_Start_IT+0x142>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b04      	cmp	r3, #4
 8004176:	d104      	bne.n	8004182 <HAL_TIM_IC_Start_IT+0x12a>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004180:	e00b      	b.n	800419a <HAL_TIM_IC_Start_IT+0x142>
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	2b08      	cmp	r3, #8
 8004186:	d104      	bne.n	8004192 <HAL_TIM_IC_Start_IT+0x13a>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004190:	e003      	b.n	800419a <HAL_TIM_IC_Start_IT+0x142>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2202      	movs	r2, #2
 8004196:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2b0c      	cmp	r3, #12
 800419e:	d841      	bhi.n	8004224 <HAL_TIM_IC_Start_IT+0x1cc>
 80041a0:	a201      	add	r2, pc, #4	; (adr r2, 80041a8 <HAL_TIM_IC_Start_IT+0x150>)
 80041a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a6:	bf00      	nop
 80041a8:	080041dd 	.word	0x080041dd
 80041ac:	08004225 	.word	0x08004225
 80041b0:	08004225 	.word	0x08004225
 80041b4:	08004225 	.word	0x08004225
 80041b8:	080041ef 	.word	0x080041ef
 80041bc:	08004225 	.word	0x08004225
 80041c0:	08004225 	.word	0x08004225
 80041c4:	08004225 	.word	0x08004225
 80041c8:	08004201 	.word	0x08004201
 80041cc:	08004225 	.word	0x08004225
 80041d0:	08004225 	.word	0x08004225
 80041d4:	08004225 	.word	0x08004225
 80041d8:	08004213 	.word	0x08004213
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0202 	orr.w	r2, r2, #2
 80041ea:	60da      	str	r2, [r3, #12]
      break;
 80041ec:	e01d      	b.n	800422a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f042 0204 	orr.w	r2, r2, #4
 80041fc:	60da      	str	r2, [r3, #12]
      break;
 80041fe:	e014      	b.n	800422a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68da      	ldr	r2, [r3, #12]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0208 	orr.w	r2, r2, #8
 800420e:	60da      	str	r2, [r3, #12]
      break;
 8004210:	e00b      	b.n	800422a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f042 0210 	orr.w	r2, r2, #16
 8004220:	60da      	str	r2, [r3, #12]
      break;
 8004222:	e002      	b.n	800422a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	73fb      	strb	r3, [r7, #15]
      break;
 8004228:	bf00      	nop
  }

  if (status == HAL_OK)
 800422a:	7bfb      	ldrb	r3, [r7, #15]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d149      	bne.n	80042c4 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2201      	movs	r2, #1
 8004236:	6839      	ldr	r1, [r7, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f001 f951 	bl	80054e0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a23      	ldr	r2, [pc, #140]	; (80042d0 <HAL_TIM_IC_Start_IT+0x278>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d01d      	beq.n	8004284 <HAL_TIM_IC_Start_IT+0x22c>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004250:	d018      	beq.n	8004284 <HAL_TIM_IC_Start_IT+0x22c>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a1f      	ldr	r2, [pc, #124]	; (80042d4 <HAL_TIM_IC_Start_IT+0x27c>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d013      	beq.n	8004284 <HAL_TIM_IC_Start_IT+0x22c>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a1d      	ldr	r2, [pc, #116]	; (80042d8 <HAL_TIM_IC_Start_IT+0x280>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d00e      	beq.n	8004284 <HAL_TIM_IC_Start_IT+0x22c>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a1c      	ldr	r2, [pc, #112]	; (80042dc <HAL_TIM_IC_Start_IT+0x284>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d009      	beq.n	8004284 <HAL_TIM_IC_Start_IT+0x22c>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a1a      	ldr	r2, [pc, #104]	; (80042e0 <HAL_TIM_IC_Start_IT+0x288>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d004      	beq.n	8004284 <HAL_TIM_IC_Start_IT+0x22c>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a19      	ldr	r2, [pc, #100]	; (80042e4 <HAL_TIM_IC_Start_IT+0x28c>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d115      	bne.n	80042b0 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689a      	ldr	r2, [r3, #8]
 800428a:	4b17      	ldr	r3, [pc, #92]	; (80042e8 <HAL_TIM_IC_Start_IT+0x290>)
 800428c:	4013      	ands	r3, r2
 800428e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	2b06      	cmp	r3, #6
 8004294:	d015      	beq.n	80042c2 <HAL_TIM_IC_Start_IT+0x26a>
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800429c:	d011      	beq.n	80042c2 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f042 0201 	orr.w	r2, r2, #1
 80042ac:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ae:	e008      	b.n	80042c2 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0201 	orr.w	r2, r2, #1
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	e000      	b.n	80042c4 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40012c00 	.word	0x40012c00
 80042d4:	40000400 	.word	0x40000400
 80042d8:	40000800 	.word	0x40000800
 80042dc:	40000c00 	.word	0x40000c00
 80042e0:	40013400 	.word	0x40013400
 80042e4:	40014000 	.word	0x40014000
 80042e8:	00010007 	.word	0x00010007

080042ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d122      	bne.n	8004348 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b02      	cmp	r3, #2
 800430e:	d11b      	bne.n	8004348 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f06f 0202 	mvn.w	r2, #2
 8004318:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	f003 0303 	and.w	r3, r3, #3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 fb89 	bl	8004a46 <HAL_TIM_IC_CaptureCallback>
 8004334:	e005      	b.n	8004342 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 fb7b 	bl	8004a32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 fb8c 	bl	8004a5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	f003 0304 	and.w	r3, r3, #4
 8004352:	2b04      	cmp	r3, #4
 8004354:	d122      	bne.n	800439c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	2b04      	cmp	r3, #4
 8004362:	d11b      	bne.n	800439c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f06f 0204 	mvn.w	r2, #4
 800436c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2202      	movs	r2, #2
 8004372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 fb5f 	bl	8004a46 <HAL_TIM_IC_CaptureCallback>
 8004388:	e005      	b.n	8004396 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fb51 	bl	8004a32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 fb62 	bl	8004a5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d122      	bne.n	80043f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f003 0308 	and.w	r3, r3, #8
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d11b      	bne.n	80043f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f06f 0208 	mvn.w	r2, #8
 80043c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2204      	movs	r2, #4
 80043c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	f003 0303 	and.w	r3, r3, #3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 fb35 	bl	8004a46 <HAL_TIM_IC_CaptureCallback>
 80043dc:	e005      	b.n	80043ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 fb27 	bl	8004a32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 fb38 	bl	8004a5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	f003 0310 	and.w	r3, r3, #16
 80043fa:	2b10      	cmp	r3, #16
 80043fc:	d122      	bne.n	8004444 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	2b10      	cmp	r3, #16
 800440a:	d11b      	bne.n	8004444 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f06f 0210 	mvn.w	r2, #16
 8004414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2208      	movs	r2, #8
 800441a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 fb0b 	bl	8004a46 <HAL_TIM_IC_CaptureCallback>
 8004430:	e005      	b.n	800443e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 fafd 	bl	8004a32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 fb0e 	bl	8004a5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b01      	cmp	r3, #1
 8004450:	d10e      	bne.n	8004470 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b01      	cmp	r3, #1
 800445e:	d107      	bne.n	8004470 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f06f 0201 	mvn.w	r2, #1
 8004468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fad7 	bl	8004a1e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447a:	2b80      	cmp	r3, #128	; 0x80
 800447c:	d10e      	bne.n	800449c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004488:	2b80      	cmp	r3, #128	; 0x80
 800448a:	d107      	bne.n	800449c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f001 f8da 	bl	8005650 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044aa:	d10e      	bne.n	80044ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b6:	2b80      	cmp	r3, #128	; 0x80
 80044b8:	d107      	bne.n	80044ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f001 f8cd 	bl	8005664 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d4:	2b40      	cmp	r3, #64	; 0x40
 80044d6:	d10e      	bne.n	80044f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e2:	2b40      	cmp	r3, #64	; 0x40
 80044e4:	d107      	bne.n	80044f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 fabc 	bl	8004a6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	f003 0320 	and.w	r3, r3, #32
 8004500:	2b20      	cmp	r3, #32
 8004502:	d10e      	bne.n	8004522 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f003 0320 	and.w	r3, r3, #32
 800450e:	2b20      	cmp	r3, #32
 8004510:	d107      	bne.n	8004522 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f06f 0220 	mvn.w	r2, #32
 800451a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f001 f88d 	bl	800563c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004522:	bf00      	nop
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b086      	sub	sp, #24
 800452e:	af00      	add	r7, sp, #0
 8004530:	60f8      	str	r0, [r7, #12]
 8004532:	60b9      	str	r1, [r7, #8]
 8004534:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004536:	2300      	movs	r3, #0
 8004538:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004540:	2b01      	cmp	r3, #1
 8004542:	d101      	bne.n	8004548 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004544:	2302      	movs	r3, #2
 8004546:	e088      	b.n	800465a <HAL_TIM_IC_ConfigChannel+0x130>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d11b      	bne.n	800458e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6818      	ldr	r0, [r3, #0]
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	6819      	ldr	r1, [r3, #0]
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f000 fdfd 	bl	8005164 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	699a      	ldr	r2, [r3, #24]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 020c 	bic.w	r2, r2, #12
 8004578:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6999      	ldr	r1, [r3, #24]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	619a      	str	r2, [r3, #24]
 800458c:	e060      	b.n	8004650 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b04      	cmp	r3, #4
 8004592:	d11c      	bne.n	80045ce <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6818      	ldr	r0, [r3, #0]
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	6819      	ldr	r1, [r3, #0]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f000 fe7b 	bl	800529e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699a      	ldr	r2, [r3, #24]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80045b6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6999      	ldr	r1, [r3, #24]
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	021a      	lsls	r2, r3, #8
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	619a      	str	r2, [r3, #24]
 80045cc:	e040      	b.n	8004650 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d11b      	bne.n	800460c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6818      	ldr	r0, [r3, #0]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	6819      	ldr	r1, [r3, #0]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f000 fec8 	bl	8005378 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	69da      	ldr	r2, [r3, #28]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 020c 	bic.w	r2, r2, #12
 80045f6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	69d9      	ldr	r1, [r3, #28]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	689a      	ldr	r2, [r3, #8]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	61da      	str	r2, [r3, #28]
 800460a:	e021      	b.n	8004650 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b0c      	cmp	r3, #12
 8004610:	d11c      	bne.n	800464c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6818      	ldr	r0, [r3, #0]
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	6819      	ldr	r1, [r3, #0]
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f000 fee5 	bl	80053f0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69da      	ldr	r2, [r3, #28]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004634:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	69d9      	ldr	r1, [r3, #28]
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	021a      	lsls	r2, r3, #8
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	61da      	str	r2, [r3, #28]
 800464a:	e001      	b.n	8004650 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004658:	7dfb      	ldrb	r3, [r7, #23]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3718      	adds	r7, #24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
	...

08004664 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004670:	2300      	movs	r3, #0
 8004672:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800467a:	2b01      	cmp	r3, #1
 800467c:	d101      	bne.n	8004682 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800467e:	2302      	movs	r3, #2
 8004680:	e0ff      	b.n	8004882 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b14      	cmp	r3, #20
 800468e:	f200 80f0 	bhi.w	8004872 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004692:	a201      	add	r2, pc, #4	; (adr r2, 8004698 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004698:	080046ed 	.word	0x080046ed
 800469c:	08004873 	.word	0x08004873
 80046a0:	08004873 	.word	0x08004873
 80046a4:	08004873 	.word	0x08004873
 80046a8:	0800472d 	.word	0x0800472d
 80046ac:	08004873 	.word	0x08004873
 80046b0:	08004873 	.word	0x08004873
 80046b4:	08004873 	.word	0x08004873
 80046b8:	0800476f 	.word	0x0800476f
 80046bc:	08004873 	.word	0x08004873
 80046c0:	08004873 	.word	0x08004873
 80046c4:	08004873 	.word	0x08004873
 80046c8:	080047af 	.word	0x080047af
 80046cc:	08004873 	.word	0x08004873
 80046d0:	08004873 	.word	0x08004873
 80046d4:	08004873 	.word	0x08004873
 80046d8:	080047f1 	.word	0x080047f1
 80046dc:	08004873 	.word	0x08004873
 80046e0:	08004873 	.word	0x08004873
 80046e4:	08004873 	.word	0x08004873
 80046e8:	08004831 	.word	0x08004831
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68b9      	ldr	r1, [r7, #8]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 fa60 	bl	8004bb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699a      	ldr	r2, [r3, #24]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0208 	orr.w	r2, r2, #8
 8004706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699a      	ldr	r2, [r3, #24]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0204 	bic.w	r2, r2, #4
 8004716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6999      	ldr	r1, [r3, #24]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	691a      	ldr	r2, [r3, #16]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	619a      	str	r2, [r3, #24]
      break;
 800472a:	e0a5      	b.n	8004878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68b9      	ldr	r1, [r7, #8]
 8004732:	4618      	mov	r0, r3
 8004734:	f000 fad0 	bl	8004cd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699a      	ldr	r2, [r3, #24]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6999      	ldr	r1, [r3, #24]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	021a      	lsls	r2, r3, #8
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	619a      	str	r2, [r3, #24]
      break;
 800476c:	e084      	b.n	8004878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68b9      	ldr	r1, [r7, #8]
 8004774:	4618      	mov	r0, r3
 8004776:	f000 fb39 	bl	8004dec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69da      	ldr	r2, [r3, #28]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f042 0208 	orr.w	r2, r2, #8
 8004788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69da      	ldr	r2, [r3, #28]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 0204 	bic.w	r2, r2, #4
 8004798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69d9      	ldr	r1, [r3, #28]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	691a      	ldr	r2, [r3, #16]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	61da      	str	r2, [r3, #28]
      break;
 80047ac:	e064      	b.n	8004878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68b9      	ldr	r1, [r7, #8]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 fba1 	bl	8004efc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	69da      	ldr	r2, [r3, #28]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69da      	ldr	r2, [r3, #28]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69d9      	ldr	r1, [r3, #28]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	021a      	lsls	r2, r3, #8
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	61da      	str	r2, [r3, #28]
      break;
 80047ee:	e043      	b.n	8004878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68b9      	ldr	r1, [r7, #8]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 fbea 	bl	8004fd0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 0208 	orr.w	r2, r2, #8
 800480a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0204 	bic.w	r2, r2, #4
 800481a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	691a      	ldr	r2, [r3, #16]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800482e:	e023      	b.n	8004878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68b9      	ldr	r1, [r7, #8]
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fc2e 	bl	8005098 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800484a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800485a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	021a      	lsls	r2, r3, #8
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004870:	e002      	b.n	8004878 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	75fb      	strb	r3, [r7, #23]
      break;
 8004876:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004880:	7dfb      	ldrb	r3, [r7, #23]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3718      	adds	r7, #24
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop

0800488c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d101      	bne.n	80048a8 <HAL_TIM_ConfigClockSource+0x1c>
 80048a4:	2302      	movs	r3, #2
 80048a6:	e0b6      	b.n	8004a16 <HAL_TIM_ConfigClockSource+0x18a>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048e4:	d03e      	beq.n	8004964 <HAL_TIM_ConfigClockSource+0xd8>
 80048e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ea:	f200 8087 	bhi.w	80049fc <HAL_TIM_ConfigClockSource+0x170>
 80048ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f2:	f000 8086 	beq.w	8004a02 <HAL_TIM_ConfigClockSource+0x176>
 80048f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048fa:	d87f      	bhi.n	80049fc <HAL_TIM_ConfigClockSource+0x170>
 80048fc:	2b70      	cmp	r3, #112	; 0x70
 80048fe:	d01a      	beq.n	8004936 <HAL_TIM_ConfigClockSource+0xaa>
 8004900:	2b70      	cmp	r3, #112	; 0x70
 8004902:	d87b      	bhi.n	80049fc <HAL_TIM_ConfigClockSource+0x170>
 8004904:	2b60      	cmp	r3, #96	; 0x60
 8004906:	d050      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0x11e>
 8004908:	2b60      	cmp	r3, #96	; 0x60
 800490a:	d877      	bhi.n	80049fc <HAL_TIM_ConfigClockSource+0x170>
 800490c:	2b50      	cmp	r3, #80	; 0x50
 800490e:	d03c      	beq.n	800498a <HAL_TIM_ConfigClockSource+0xfe>
 8004910:	2b50      	cmp	r3, #80	; 0x50
 8004912:	d873      	bhi.n	80049fc <HAL_TIM_ConfigClockSource+0x170>
 8004914:	2b40      	cmp	r3, #64	; 0x40
 8004916:	d058      	beq.n	80049ca <HAL_TIM_ConfigClockSource+0x13e>
 8004918:	2b40      	cmp	r3, #64	; 0x40
 800491a:	d86f      	bhi.n	80049fc <HAL_TIM_ConfigClockSource+0x170>
 800491c:	2b30      	cmp	r3, #48	; 0x30
 800491e:	d064      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0x15e>
 8004920:	2b30      	cmp	r3, #48	; 0x30
 8004922:	d86b      	bhi.n	80049fc <HAL_TIM_ConfigClockSource+0x170>
 8004924:	2b20      	cmp	r3, #32
 8004926:	d060      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0x15e>
 8004928:	2b20      	cmp	r3, #32
 800492a:	d867      	bhi.n	80049fc <HAL_TIM_ConfigClockSource+0x170>
 800492c:	2b00      	cmp	r3, #0
 800492e:	d05c      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0x15e>
 8004930:	2b10      	cmp	r3, #16
 8004932:	d05a      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0x15e>
 8004934:	e062      	b.n	80049fc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6818      	ldr	r0, [r3, #0]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	6899      	ldr	r1, [r3, #8]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f000 fdab 	bl	80054a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004958:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	609a      	str	r2, [r3, #8]
      break;
 8004962:	e04f      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6818      	ldr	r0, [r3, #0]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	6899      	ldr	r1, [r3, #8]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f000 fd94 	bl	80054a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004986:	609a      	str	r2, [r3, #8]
      break;
 8004988:	e03c      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6818      	ldr	r0, [r3, #0]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	6859      	ldr	r1, [r3, #4]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	461a      	mov	r2, r3
 8004998:	f000 fc52 	bl	8005240 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2150      	movs	r1, #80	; 0x50
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fd61 	bl	800546a <TIM_ITRx_SetConfig>
      break;
 80049a8:	e02c      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6818      	ldr	r0, [r3, #0]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	6859      	ldr	r1, [r3, #4]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	461a      	mov	r2, r3
 80049b8:	f000 fcae 	bl	8005318 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2160      	movs	r1, #96	; 0x60
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 fd51 	bl	800546a <TIM_ITRx_SetConfig>
      break;
 80049c8:	e01c      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6818      	ldr	r0, [r3, #0]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	6859      	ldr	r1, [r3, #4]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	461a      	mov	r2, r3
 80049d8:	f000 fc32 	bl	8005240 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2140      	movs	r1, #64	; 0x40
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 fd41 	bl	800546a <TIM_ITRx_SetConfig>
      break;
 80049e8:	e00c      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4619      	mov	r1, r3
 80049f4:	4610      	mov	r0, r2
 80049f6:	f000 fd38 	bl	800546a <TIM_ITRx_SetConfig>
      break;
 80049fa:	e003      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004a00:	e000      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004a02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b083      	sub	sp, #12
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
	...

08004a84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a40      	ldr	r2, [pc, #256]	; (8004b98 <TIM_Base_SetConfig+0x114>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d013      	beq.n	8004ac4 <TIM_Base_SetConfig+0x40>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa2:	d00f      	beq.n	8004ac4 <TIM_Base_SetConfig+0x40>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a3d      	ldr	r2, [pc, #244]	; (8004b9c <TIM_Base_SetConfig+0x118>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d00b      	beq.n	8004ac4 <TIM_Base_SetConfig+0x40>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a3c      	ldr	r2, [pc, #240]	; (8004ba0 <TIM_Base_SetConfig+0x11c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d007      	beq.n	8004ac4 <TIM_Base_SetConfig+0x40>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a3b      	ldr	r2, [pc, #236]	; (8004ba4 <TIM_Base_SetConfig+0x120>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d003      	beq.n	8004ac4 <TIM_Base_SetConfig+0x40>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a3a      	ldr	r2, [pc, #232]	; (8004ba8 <TIM_Base_SetConfig+0x124>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d108      	bne.n	8004ad6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a2f      	ldr	r2, [pc, #188]	; (8004b98 <TIM_Base_SetConfig+0x114>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d01f      	beq.n	8004b1e <TIM_Base_SetConfig+0x9a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae4:	d01b      	beq.n	8004b1e <TIM_Base_SetConfig+0x9a>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a2c      	ldr	r2, [pc, #176]	; (8004b9c <TIM_Base_SetConfig+0x118>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d017      	beq.n	8004b1e <TIM_Base_SetConfig+0x9a>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a2b      	ldr	r2, [pc, #172]	; (8004ba0 <TIM_Base_SetConfig+0x11c>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d013      	beq.n	8004b1e <TIM_Base_SetConfig+0x9a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a2a      	ldr	r2, [pc, #168]	; (8004ba4 <TIM_Base_SetConfig+0x120>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d00f      	beq.n	8004b1e <TIM_Base_SetConfig+0x9a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a29      	ldr	r2, [pc, #164]	; (8004ba8 <TIM_Base_SetConfig+0x124>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00b      	beq.n	8004b1e <TIM_Base_SetConfig+0x9a>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a28      	ldr	r2, [pc, #160]	; (8004bac <TIM_Base_SetConfig+0x128>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d007      	beq.n	8004b1e <TIM_Base_SetConfig+0x9a>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a27      	ldr	r2, [pc, #156]	; (8004bb0 <TIM_Base_SetConfig+0x12c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d003      	beq.n	8004b1e <TIM_Base_SetConfig+0x9a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a26      	ldr	r2, [pc, #152]	; (8004bb4 <TIM_Base_SetConfig+0x130>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d108      	bne.n	8004b30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a10      	ldr	r2, [pc, #64]	; (8004b98 <TIM_Base_SetConfig+0x114>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d00f      	beq.n	8004b7c <TIM_Base_SetConfig+0xf8>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a12      	ldr	r2, [pc, #72]	; (8004ba8 <TIM_Base_SetConfig+0x124>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d00b      	beq.n	8004b7c <TIM_Base_SetConfig+0xf8>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a11      	ldr	r2, [pc, #68]	; (8004bac <TIM_Base_SetConfig+0x128>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d007      	beq.n	8004b7c <TIM_Base_SetConfig+0xf8>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a10      	ldr	r2, [pc, #64]	; (8004bb0 <TIM_Base_SetConfig+0x12c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d003      	beq.n	8004b7c <TIM_Base_SetConfig+0xf8>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a0f      	ldr	r2, [pc, #60]	; (8004bb4 <TIM_Base_SetConfig+0x130>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d103      	bne.n	8004b84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	691a      	ldr	r2, [r3, #16]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	615a      	str	r2, [r3, #20]
}
 8004b8a:	bf00      	nop
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	40012c00 	.word	0x40012c00
 8004b9c:	40000400 	.word	0x40000400
 8004ba0:	40000800 	.word	0x40000800
 8004ba4:	40000c00 	.word	0x40000c00
 8004ba8:	40013400 	.word	0x40013400
 8004bac:	40014000 	.word	0x40014000
 8004bb0:	40014400 	.word	0x40014400
 8004bb4:	40014800 	.word	0x40014800

08004bb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	f023 0201 	bic.w	r2, r3, #1
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0303 	bic.w	r3, r3, #3
 8004bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f023 0302 	bic.w	r3, r3, #2
 8004c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a2c      	ldr	r2, [pc, #176]	; (8004cc4 <TIM_OC1_SetConfig+0x10c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d00f      	beq.n	8004c38 <TIM_OC1_SetConfig+0x80>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a2b      	ldr	r2, [pc, #172]	; (8004cc8 <TIM_OC1_SetConfig+0x110>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d00b      	beq.n	8004c38 <TIM_OC1_SetConfig+0x80>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a2a      	ldr	r2, [pc, #168]	; (8004ccc <TIM_OC1_SetConfig+0x114>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d007      	beq.n	8004c38 <TIM_OC1_SetConfig+0x80>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a29      	ldr	r2, [pc, #164]	; (8004cd0 <TIM_OC1_SetConfig+0x118>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d003      	beq.n	8004c38 <TIM_OC1_SetConfig+0x80>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a28      	ldr	r2, [pc, #160]	; (8004cd4 <TIM_OC1_SetConfig+0x11c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d10c      	bne.n	8004c52 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f023 0308 	bic.w	r3, r3, #8
 8004c3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f023 0304 	bic.w	r3, r3, #4
 8004c50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a1b      	ldr	r2, [pc, #108]	; (8004cc4 <TIM_OC1_SetConfig+0x10c>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d00f      	beq.n	8004c7a <TIM_OC1_SetConfig+0xc2>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a1a      	ldr	r2, [pc, #104]	; (8004cc8 <TIM_OC1_SetConfig+0x110>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d00b      	beq.n	8004c7a <TIM_OC1_SetConfig+0xc2>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a19      	ldr	r2, [pc, #100]	; (8004ccc <TIM_OC1_SetConfig+0x114>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d007      	beq.n	8004c7a <TIM_OC1_SetConfig+0xc2>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a18      	ldr	r2, [pc, #96]	; (8004cd0 <TIM_OC1_SetConfig+0x118>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d003      	beq.n	8004c7a <TIM_OC1_SetConfig+0xc2>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a17      	ldr	r2, [pc, #92]	; (8004cd4 <TIM_OC1_SetConfig+0x11c>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d111      	bne.n	8004c9e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	621a      	str	r2, [r3, #32]
}
 8004cb8:	bf00      	nop
 8004cba:	371c      	adds	r7, #28
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr
 8004cc4:	40012c00 	.word	0x40012c00
 8004cc8:	40013400 	.word	0x40013400
 8004ccc:	40014000 	.word	0x40014000
 8004cd0:	40014400 	.word	0x40014400
 8004cd4:	40014800 	.word	0x40014800

08004cd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b087      	sub	sp, #28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	f023 0210 	bic.w	r2, r3, #16
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	021b      	lsls	r3, r3, #8
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f023 0320 	bic.w	r3, r3, #32
 8004d26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	011b      	lsls	r3, r3, #4
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a28      	ldr	r2, [pc, #160]	; (8004dd8 <TIM_OC2_SetConfig+0x100>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d003      	beq.n	8004d44 <TIM_OC2_SetConfig+0x6c>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a27      	ldr	r2, [pc, #156]	; (8004ddc <TIM_OC2_SetConfig+0x104>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d10d      	bne.n	8004d60 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a1d      	ldr	r2, [pc, #116]	; (8004dd8 <TIM_OC2_SetConfig+0x100>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d00f      	beq.n	8004d88 <TIM_OC2_SetConfig+0xb0>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a1c      	ldr	r2, [pc, #112]	; (8004ddc <TIM_OC2_SetConfig+0x104>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d00b      	beq.n	8004d88 <TIM_OC2_SetConfig+0xb0>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a1b      	ldr	r2, [pc, #108]	; (8004de0 <TIM_OC2_SetConfig+0x108>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d007      	beq.n	8004d88 <TIM_OC2_SetConfig+0xb0>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a1a      	ldr	r2, [pc, #104]	; (8004de4 <TIM_OC2_SetConfig+0x10c>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d003      	beq.n	8004d88 <TIM_OC2_SetConfig+0xb0>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a19      	ldr	r2, [pc, #100]	; (8004de8 <TIM_OC2_SetConfig+0x110>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d113      	bne.n	8004db0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	621a      	str	r2, [r3, #32]
}
 8004dca:	bf00      	nop
 8004dcc:	371c      	adds	r7, #28
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	40012c00 	.word	0x40012c00
 8004ddc:	40013400 	.word	0x40013400
 8004de0:	40014000 	.word	0x40014000
 8004de4:	40014400 	.word	0x40014400
 8004de8:	40014800 	.word	0x40014800

08004dec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 0303 	bic.w	r3, r3, #3
 8004e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	021b      	lsls	r3, r3, #8
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a27      	ldr	r2, [pc, #156]	; (8004ee8 <TIM_OC3_SetConfig+0xfc>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d003      	beq.n	8004e56 <TIM_OC3_SetConfig+0x6a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a26      	ldr	r2, [pc, #152]	; (8004eec <TIM_OC3_SetConfig+0x100>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d10d      	bne.n	8004e72 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	021b      	lsls	r3, r3, #8
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a1c      	ldr	r2, [pc, #112]	; (8004ee8 <TIM_OC3_SetConfig+0xfc>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d00f      	beq.n	8004e9a <TIM_OC3_SetConfig+0xae>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a1b      	ldr	r2, [pc, #108]	; (8004eec <TIM_OC3_SetConfig+0x100>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00b      	beq.n	8004e9a <TIM_OC3_SetConfig+0xae>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a1a      	ldr	r2, [pc, #104]	; (8004ef0 <TIM_OC3_SetConfig+0x104>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d007      	beq.n	8004e9a <TIM_OC3_SetConfig+0xae>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a19      	ldr	r2, [pc, #100]	; (8004ef4 <TIM_OC3_SetConfig+0x108>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d003      	beq.n	8004e9a <TIM_OC3_SetConfig+0xae>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a18      	ldr	r2, [pc, #96]	; (8004ef8 <TIM_OC3_SetConfig+0x10c>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d113      	bne.n	8004ec2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	011b      	lsls	r3, r3, #4
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	621a      	str	r2, [r3, #32]
}
 8004edc:	bf00      	nop
 8004ede:	371c      	adds	r7, #28
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	40012c00 	.word	0x40012c00
 8004eec:	40013400 	.word	0x40013400
 8004ef0:	40014000 	.word	0x40014000
 8004ef4:	40014400 	.word	0x40014400
 8004ef8:	40014800 	.word	0x40014800

08004efc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b087      	sub	sp, #28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	021b      	lsls	r3, r3, #8
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	031b      	lsls	r3, r3, #12
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a18      	ldr	r2, [pc, #96]	; (8004fbc <TIM_OC4_SetConfig+0xc0>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d00f      	beq.n	8004f80 <TIM_OC4_SetConfig+0x84>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a17      	ldr	r2, [pc, #92]	; (8004fc0 <TIM_OC4_SetConfig+0xc4>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d00b      	beq.n	8004f80 <TIM_OC4_SetConfig+0x84>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a16      	ldr	r2, [pc, #88]	; (8004fc4 <TIM_OC4_SetConfig+0xc8>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d007      	beq.n	8004f80 <TIM_OC4_SetConfig+0x84>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a15      	ldr	r2, [pc, #84]	; (8004fc8 <TIM_OC4_SetConfig+0xcc>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d003      	beq.n	8004f80 <TIM_OC4_SetConfig+0x84>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a14      	ldr	r2, [pc, #80]	; (8004fcc <TIM_OC4_SetConfig+0xd0>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d109      	bne.n	8004f94 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	019b      	lsls	r3, r3, #6
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	621a      	str	r2, [r3, #32]
}
 8004fae:	bf00      	nop
 8004fb0:	371c      	adds	r7, #28
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	40012c00 	.word	0x40012c00
 8004fc0:	40013400 	.word	0x40013400
 8004fc4:	40014000 	.word	0x40014000
 8004fc8:	40014400 	.word	0x40014400
 8004fcc:	40014800 	.word	0x40014800

08004fd0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	4313      	orrs	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005014:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	041b      	lsls	r3, r3, #16
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	4313      	orrs	r3, r2
 8005020:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a17      	ldr	r2, [pc, #92]	; (8005084 <TIM_OC5_SetConfig+0xb4>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d00f      	beq.n	800504a <TIM_OC5_SetConfig+0x7a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a16      	ldr	r2, [pc, #88]	; (8005088 <TIM_OC5_SetConfig+0xb8>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d00b      	beq.n	800504a <TIM_OC5_SetConfig+0x7a>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a15      	ldr	r2, [pc, #84]	; (800508c <TIM_OC5_SetConfig+0xbc>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d007      	beq.n	800504a <TIM_OC5_SetConfig+0x7a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a14      	ldr	r2, [pc, #80]	; (8005090 <TIM_OC5_SetConfig+0xc0>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d003      	beq.n	800504a <TIM_OC5_SetConfig+0x7a>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a13      	ldr	r2, [pc, #76]	; (8005094 <TIM_OC5_SetConfig+0xc4>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d109      	bne.n	800505e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005050:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	021b      	lsls	r3, r3, #8
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	4313      	orrs	r3, r2
 800505c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	621a      	str	r2, [r3, #32]
}
 8005078:	bf00      	nop
 800507a:	371c      	adds	r7, #28
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	40012c00 	.word	0x40012c00
 8005088:	40013400 	.word	0x40013400
 800508c:	40014000 	.word	0x40014000
 8005090:	40014400 	.word	0x40014400
 8005094:	40014800 	.word	0x40014800

08005098 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005098:	b480      	push	{r7}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	021b      	lsls	r3, r3, #8
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	051b      	lsls	r3, r3, #20
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a18      	ldr	r2, [pc, #96]	; (8005150 <TIM_OC6_SetConfig+0xb8>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d00f      	beq.n	8005114 <TIM_OC6_SetConfig+0x7c>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a17      	ldr	r2, [pc, #92]	; (8005154 <TIM_OC6_SetConfig+0xbc>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d00b      	beq.n	8005114 <TIM_OC6_SetConfig+0x7c>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a16      	ldr	r2, [pc, #88]	; (8005158 <TIM_OC6_SetConfig+0xc0>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d007      	beq.n	8005114 <TIM_OC6_SetConfig+0x7c>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a15      	ldr	r2, [pc, #84]	; (800515c <TIM_OC6_SetConfig+0xc4>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d003      	beq.n	8005114 <TIM_OC6_SetConfig+0x7c>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a14      	ldr	r2, [pc, #80]	; (8005160 <TIM_OC6_SetConfig+0xc8>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d109      	bne.n	8005128 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800511a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	029b      	lsls	r3, r3, #10
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	4313      	orrs	r3, r2
 8005126:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	621a      	str	r2, [r3, #32]
}
 8005142:	bf00      	nop
 8005144:	371c      	adds	r7, #28
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	40012c00 	.word	0x40012c00
 8005154:	40013400 	.word	0x40013400
 8005158:	40014000 	.word	0x40014000
 800515c:	40014400 	.word	0x40014400
 8005160:	40014800 	.word	0x40014800

08005164 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
 8005170:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	f023 0201 	bic.w	r2, r3, #1
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4a26      	ldr	r2, [pc, #152]	; (8005228 <TIM_TI1_SetConfig+0xc4>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d017      	beq.n	80051c2 <TIM_TI1_SetConfig+0x5e>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005198:	d013      	beq.n	80051c2 <TIM_TI1_SetConfig+0x5e>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4a23      	ldr	r2, [pc, #140]	; (800522c <TIM_TI1_SetConfig+0xc8>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00f      	beq.n	80051c2 <TIM_TI1_SetConfig+0x5e>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4a22      	ldr	r2, [pc, #136]	; (8005230 <TIM_TI1_SetConfig+0xcc>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d00b      	beq.n	80051c2 <TIM_TI1_SetConfig+0x5e>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4a21      	ldr	r2, [pc, #132]	; (8005234 <TIM_TI1_SetConfig+0xd0>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d007      	beq.n	80051c2 <TIM_TI1_SetConfig+0x5e>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	4a20      	ldr	r2, [pc, #128]	; (8005238 <TIM_TI1_SetConfig+0xd4>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d003      	beq.n	80051c2 <TIM_TI1_SetConfig+0x5e>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	4a1f      	ldr	r2, [pc, #124]	; (800523c <TIM_TI1_SetConfig+0xd8>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d101      	bne.n	80051c6 <TIM_TI1_SetConfig+0x62>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e000      	b.n	80051c8 <TIM_TI1_SetConfig+0x64>
 80051c6:	2300      	movs	r3, #0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d008      	beq.n	80051de <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f023 0303 	bic.w	r3, r3, #3
 80051d2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4313      	orrs	r3, r2
 80051da:	617b      	str	r3, [r7, #20]
 80051dc:	e003      	b.n	80051e6 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f043 0301 	orr.w	r3, r3, #1
 80051e4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	011b      	lsls	r3, r3, #4
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	f023 030a 	bic.w	r3, r3, #10
 8005200:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	f003 030a 	and.w	r3, r3, #10
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	4313      	orrs	r3, r2
 800520c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	621a      	str	r2, [r3, #32]
}
 800521a:	bf00      	nop
 800521c:	371c      	adds	r7, #28
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	40012c00 	.word	0x40012c00
 800522c:	40000400 	.word	0x40000400
 8005230:	40000800 	.word	0x40000800
 8005234:	40000c00 	.word	0x40000c00
 8005238:	40013400 	.word	0x40013400
 800523c:	40014000 	.word	0x40014000

08005240 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	f023 0201 	bic.w	r2, r3, #1
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800526a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	011b      	lsls	r3, r3, #4
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	4313      	orrs	r3, r2
 8005274:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f023 030a 	bic.w	r3, r3, #10
 800527c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	4313      	orrs	r3, r2
 8005284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	621a      	str	r2, [r3, #32]
}
 8005292:	bf00      	nop
 8005294:	371c      	adds	r7, #28
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800529e:	b480      	push	{r7}
 80052a0:	b087      	sub	sp, #28
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	607a      	str	r2, [r7, #4]
 80052aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	f023 0210 	bic.w	r2, r3, #16
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	021b      	lsls	r3, r3, #8
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	031b      	lsls	r3, r3, #12
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052f0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	621a      	str	r2, [r3, #32]
}
 800530c:	bf00      	nop
 800530e:	371c      	adds	r7, #28
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	f023 0210 	bic.w	r2, r3, #16
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005342:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	031b      	lsls	r3, r3, #12
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005354:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	4313      	orrs	r3, r2
 800535e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	621a      	str	r2, [r3, #32]
}
 800536c:	bf00      	nop
 800536e:	371c      	adds	r7, #28
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005378:	b480      	push	{r7}
 800537a:	b087      	sub	sp, #28
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
 8005384:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f023 0303 	bic.w	r3, r3, #3
 80053a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	011b      	lsls	r3, r3, #4
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	4313      	orrs	r3, r2
 80053c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80053c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	021b      	lsls	r3, r3, #8
 80053ce:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	621a      	str	r2, [r3, #32]
}
 80053e4:	bf00      	nop
 80053e6:	371c      	adds	r7, #28
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
 80053fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800541c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	021b      	lsls	r3, r3, #8
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	4313      	orrs	r3, r2
 8005426:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800542e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	031b      	lsls	r3, r3, #12
 8005434:	b29b      	uxth	r3, r3
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	4313      	orrs	r3, r2
 800543a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005442:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	031b      	lsls	r3, r3, #12
 8005448:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	4313      	orrs	r3, r2
 8005450:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	621a      	str	r2, [r3, #32]
}
 800545e:	bf00      	nop
 8005460:	371c      	adds	r7, #28
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800546a:	b480      	push	{r7}
 800546c:	b085      	sub	sp, #20
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005480:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	f043 0307 	orr.w	r3, r3, #7
 800548c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	609a      	str	r2, [r3, #8]
}
 8005494:	bf00      	nop
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	021a      	lsls	r2, r3, #8
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	431a      	orrs	r2, r3
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	609a      	str	r2, [r3, #8]
}
 80054d4:	bf00      	nop
 80054d6:	371c      	adds	r7, #28
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f003 031f 	and.w	r3, r3, #31
 80054f2:	2201      	movs	r2, #1
 80054f4:	fa02 f303 	lsl.w	r3, r2, r3
 80054f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6a1a      	ldr	r2, [r3, #32]
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	43db      	mvns	r3, r3
 8005502:	401a      	ands	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6a1a      	ldr	r2, [r3, #32]
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	f003 031f 	and.w	r3, r3, #31
 8005512:	6879      	ldr	r1, [r7, #4]
 8005514:	fa01 f303 	lsl.w	r3, r1, r3
 8005518:	431a      	orrs	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	621a      	str	r2, [r3, #32]
}
 800551e:	bf00      	nop
 8005520:	371c      	adds	r7, #28
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
	...

0800552c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800553c:	2b01      	cmp	r3, #1
 800553e:	d101      	bne.n	8005544 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005540:	2302      	movs	r3, #2
 8005542:	e068      	b.n	8005616 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2202      	movs	r2, #2
 8005550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a2e      	ldr	r2, [pc, #184]	; (8005624 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d004      	beq.n	8005578 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a2d      	ldr	r2, [pc, #180]	; (8005628 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d108      	bne.n	800558a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800557e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	4313      	orrs	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005590:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	4313      	orrs	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a1e      	ldr	r2, [pc, #120]	; (8005624 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d01d      	beq.n	80055ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055b6:	d018      	beq.n	80055ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a1b      	ldr	r2, [pc, #108]	; (800562c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d013      	beq.n	80055ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a1a      	ldr	r2, [pc, #104]	; (8005630 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d00e      	beq.n	80055ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a18      	ldr	r2, [pc, #96]	; (8005634 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d009      	beq.n	80055ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a13      	ldr	r2, [pc, #76]	; (8005628 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d004      	beq.n	80055ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a14      	ldr	r2, [pc, #80]	; (8005638 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d10c      	bne.n	8005604 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3714      	adds	r7, #20
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	40012c00 	.word	0x40012c00
 8005628:	40013400 	.word	0x40013400
 800562c:	40000400 	.word	0x40000400
 8005630:	40000800 	.word	0x40000800
 8005634:	40000c00 	.word	0x40000c00
 8005638:	40014000 	.word	0x40014000

0800563c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e042      	b.n	8005710 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005690:	2b00      	cmp	r3, #0
 8005692:	d106      	bne.n	80056a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7fc f81b 	bl	80016d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2224      	movs	r2, #36	; 0x24
 80056a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 0201 	bic.w	r2, r2, #1
 80056b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f8c4 	bl	8005848 <UART_SetConfig>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d101      	bne.n	80056ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e022      	b.n	8005710 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d002      	beq.n	80056d8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 fbb4 	bl	8005e40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0201 	orr.w	r2, r2, #1
 8005706:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 fc3b 	bl	8005f84 <UART_CheckIdleState>
 800570e:	4603      	mov	r3, r0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b08a      	sub	sp, #40	; 0x28
 800571c:	af02      	add	r7, sp, #8
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	603b      	str	r3, [r7, #0]
 8005724:	4613      	mov	r3, r2
 8005726:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800572e:	2b20      	cmp	r3, #32
 8005730:	f040 8084 	bne.w	800583c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d002      	beq.n	8005740 <HAL_UART_Transmit+0x28>
 800573a:	88fb      	ldrh	r3, [r7, #6]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e07c      	b.n	800583e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800574a:	2b01      	cmp	r3, #1
 800574c:	d101      	bne.n	8005752 <HAL_UART_Transmit+0x3a>
 800574e:	2302      	movs	r3, #2
 8005750:	e075      	b.n	800583e <HAL_UART_Transmit+0x126>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2221      	movs	r2, #33	; 0x21
 8005766:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800576a:	f7fc fae1 	bl	8001d30 <HAL_GetTick>
 800576e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	88fa      	ldrh	r2, [r7, #6]
 8005774:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	88fa      	ldrh	r2, [r7, #6]
 800577c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005788:	d108      	bne.n	800579c <HAL_UART_Transmit+0x84>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d104      	bne.n	800579c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005792:	2300      	movs	r3, #0
 8005794:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	61bb      	str	r3, [r7, #24]
 800579a:	e003      	b.n	80057a4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057a0:	2300      	movs	r3, #0
 80057a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80057ac:	e02d      	b.n	800580a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	9300      	str	r3, [sp, #0]
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2200      	movs	r2, #0
 80057b6:	2180      	movs	r1, #128	; 0x80
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f000 fc2e 	bl	800601a <UART_WaitOnFlagUntilTimeout>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e03a      	b.n	800583e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10b      	bne.n	80057e6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	881a      	ldrh	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057da:	b292      	uxth	r2, r2
 80057dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	3302      	adds	r3, #2
 80057e2:	61bb      	str	r3, [r7, #24]
 80057e4:	e008      	b.n	80057f8 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	781a      	ldrb	r2, [r3, #0]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	b292      	uxth	r2, r2
 80057f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	3301      	adds	r3, #1
 80057f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80057fe:	b29b      	uxth	r3, r3
 8005800:	3b01      	subs	r3, #1
 8005802:	b29a      	uxth	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005810:	b29b      	uxth	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1cb      	bne.n	80057ae <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2200      	movs	r2, #0
 800581e:	2140      	movs	r1, #64	; 0x40
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 fbfa 	bl	800601a <UART_WaitOnFlagUntilTimeout>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d001      	beq.n	8005830 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e006      	b.n	800583e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2220      	movs	r2, #32
 8005834:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005838:	2300      	movs	r3, #0
 800583a:	e000      	b.n	800583e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800583c:	2302      	movs	r3, #2
  }
}
 800583e:	4618      	mov	r0, r3
 8005840:	3720      	adds	r7, #32
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
	...

08005848 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800584c:	b08c      	sub	sp, #48	; 0x30
 800584e:	af00      	add	r7, sp, #0
 8005850:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	689a      	ldr	r2, [r3, #8]
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	431a      	orrs	r2, r3
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	431a      	orrs	r2, r3
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	69db      	ldr	r3, [r3, #28]
 800586c:	4313      	orrs	r3, r2
 800586e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	4baa      	ldr	r3, [pc, #680]	; (8005b20 <UART_SetConfig+0x2d8>)
 8005878:	4013      	ands	r3, r2
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	6812      	ldr	r2, [r2, #0]
 800587e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005880:	430b      	orrs	r3, r1
 8005882:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a9f      	ldr	r2, [pc, #636]	; (8005b24 <UART_SetConfig+0x2dc>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d004      	beq.n	80058b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058b0:	4313      	orrs	r3, r2
 80058b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80058be:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	6812      	ldr	r2, [r2, #0]
 80058c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058c8:	430b      	orrs	r3, r1
 80058ca:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d2:	f023 010f 	bic.w	r1, r3, #15
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a90      	ldr	r2, [pc, #576]	; (8005b28 <UART_SetConfig+0x2e0>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d125      	bne.n	8005938 <UART_SetConfig+0xf0>
 80058ec:	4b8f      	ldr	r3, [pc, #572]	; (8005b2c <UART_SetConfig+0x2e4>)
 80058ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f2:	f003 0303 	and.w	r3, r3, #3
 80058f6:	2b03      	cmp	r3, #3
 80058f8:	d81a      	bhi.n	8005930 <UART_SetConfig+0xe8>
 80058fa:	a201      	add	r2, pc, #4	; (adr r2, 8005900 <UART_SetConfig+0xb8>)
 80058fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005900:	08005911 	.word	0x08005911
 8005904:	08005921 	.word	0x08005921
 8005908:	08005919 	.word	0x08005919
 800590c:	08005929 	.word	0x08005929
 8005910:	2301      	movs	r3, #1
 8005912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005916:	e116      	b.n	8005b46 <UART_SetConfig+0x2fe>
 8005918:	2302      	movs	r3, #2
 800591a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800591e:	e112      	b.n	8005b46 <UART_SetConfig+0x2fe>
 8005920:	2304      	movs	r3, #4
 8005922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005926:	e10e      	b.n	8005b46 <UART_SetConfig+0x2fe>
 8005928:	2308      	movs	r3, #8
 800592a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800592e:	e10a      	b.n	8005b46 <UART_SetConfig+0x2fe>
 8005930:	2310      	movs	r3, #16
 8005932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005936:	e106      	b.n	8005b46 <UART_SetConfig+0x2fe>
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a7c      	ldr	r2, [pc, #496]	; (8005b30 <UART_SetConfig+0x2e8>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d138      	bne.n	80059b4 <UART_SetConfig+0x16c>
 8005942:	4b7a      	ldr	r3, [pc, #488]	; (8005b2c <UART_SetConfig+0x2e4>)
 8005944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005948:	f003 030c 	and.w	r3, r3, #12
 800594c:	2b0c      	cmp	r3, #12
 800594e:	d82d      	bhi.n	80059ac <UART_SetConfig+0x164>
 8005950:	a201      	add	r2, pc, #4	; (adr r2, 8005958 <UART_SetConfig+0x110>)
 8005952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005956:	bf00      	nop
 8005958:	0800598d 	.word	0x0800598d
 800595c:	080059ad 	.word	0x080059ad
 8005960:	080059ad 	.word	0x080059ad
 8005964:	080059ad 	.word	0x080059ad
 8005968:	0800599d 	.word	0x0800599d
 800596c:	080059ad 	.word	0x080059ad
 8005970:	080059ad 	.word	0x080059ad
 8005974:	080059ad 	.word	0x080059ad
 8005978:	08005995 	.word	0x08005995
 800597c:	080059ad 	.word	0x080059ad
 8005980:	080059ad 	.word	0x080059ad
 8005984:	080059ad 	.word	0x080059ad
 8005988:	080059a5 	.word	0x080059a5
 800598c:	2300      	movs	r3, #0
 800598e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005992:	e0d8      	b.n	8005b46 <UART_SetConfig+0x2fe>
 8005994:	2302      	movs	r3, #2
 8005996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800599a:	e0d4      	b.n	8005b46 <UART_SetConfig+0x2fe>
 800599c:	2304      	movs	r3, #4
 800599e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059a2:	e0d0      	b.n	8005b46 <UART_SetConfig+0x2fe>
 80059a4:	2308      	movs	r3, #8
 80059a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059aa:	e0cc      	b.n	8005b46 <UART_SetConfig+0x2fe>
 80059ac:	2310      	movs	r3, #16
 80059ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059b2:	e0c8      	b.n	8005b46 <UART_SetConfig+0x2fe>
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a5e      	ldr	r2, [pc, #376]	; (8005b34 <UART_SetConfig+0x2ec>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d125      	bne.n	8005a0a <UART_SetConfig+0x1c2>
 80059be:	4b5b      	ldr	r3, [pc, #364]	; (8005b2c <UART_SetConfig+0x2e4>)
 80059c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80059c8:	2b30      	cmp	r3, #48	; 0x30
 80059ca:	d016      	beq.n	80059fa <UART_SetConfig+0x1b2>
 80059cc:	2b30      	cmp	r3, #48	; 0x30
 80059ce:	d818      	bhi.n	8005a02 <UART_SetConfig+0x1ba>
 80059d0:	2b20      	cmp	r3, #32
 80059d2:	d00a      	beq.n	80059ea <UART_SetConfig+0x1a2>
 80059d4:	2b20      	cmp	r3, #32
 80059d6:	d814      	bhi.n	8005a02 <UART_SetConfig+0x1ba>
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <UART_SetConfig+0x19a>
 80059dc:	2b10      	cmp	r3, #16
 80059de:	d008      	beq.n	80059f2 <UART_SetConfig+0x1aa>
 80059e0:	e00f      	b.n	8005a02 <UART_SetConfig+0x1ba>
 80059e2:	2300      	movs	r3, #0
 80059e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059e8:	e0ad      	b.n	8005b46 <UART_SetConfig+0x2fe>
 80059ea:	2302      	movs	r3, #2
 80059ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059f0:	e0a9      	b.n	8005b46 <UART_SetConfig+0x2fe>
 80059f2:	2304      	movs	r3, #4
 80059f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059f8:	e0a5      	b.n	8005b46 <UART_SetConfig+0x2fe>
 80059fa:	2308      	movs	r3, #8
 80059fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a00:	e0a1      	b.n	8005b46 <UART_SetConfig+0x2fe>
 8005a02:	2310      	movs	r3, #16
 8005a04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a08:	e09d      	b.n	8005b46 <UART_SetConfig+0x2fe>
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a4a      	ldr	r2, [pc, #296]	; (8005b38 <UART_SetConfig+0x2f0>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d125      	bne.n	8005a60 <UART_SetConfig+0x218>
 8005a14:	4b45      	ldr	r3, [pc, #276]	; (8005b2c <UART_SetConfig+0x2e4>)
 8005a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a1e:	2bc0      	cmp	r3, #192	; 0xc0
 8005a20:	d016      	beq.n	8005a50 <UART_SetConfig+0x208>
 8005a22:	2bc0      	cmp	r3, #192	; 0xc0
 8005a24:	d818      	bhi.n	8005a58 <UART_SetConfig+0x210>
 8005a26:	2b80      	cmp	r3, #128	; 0x80
 8005a28:	d00a      	beq.n	8005a40 <UART_SetConfig+0x1f8>
 8005a2a:	2b80      	cmp	r3, #128	; 0x80
 8005a2c:	d814      	bhi.n	8005a58 <UART_SetConfig+0x210>
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d002      	beq.n	8005a38 <UART_SetConfig+0x1f0>
 8005a32:	2b40      	cmp	r3, #64	; 0x40
 8005a34:	d008      	beq.n	8005a48 <UART_SetConfig+0x200>
 8005a36:	e00f      	b.n	8005a58 <UART_SetConfig+0x210>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a3e:	e082      	b.n	8005b46 <UART_SetConfig+0x2fe>
 8005a40:	2302      	movs	r3, #2
 8005a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a46:	e07e      	b.n	8005b46 <UART_SetConfig+0x2fe>
 8005a48:	2304      	movs	r3, #4
 8005a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a4e:	e07a      	b.n	8005b46 <UART_SetConfig+0x2fe>
 8005a50:	2308      	movs	r3, #8
 8005a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a56:	e076      	b.n	8005b46 <UART_SetConfig+0x2fe>
 8005a58:	2310      	movs	r3, #16
 8005a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a5e:	e072      	b.n	8005b46 <UART_SetConfig+0x2fe>
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a35      	ldr	r2, [pc, #212]	; (8005b3c <UART_SetConfig+0x2f4>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d12a      	bne.n	8005ac0 <UART_SetConfig+0x278>
 8005a6a:	4b30      	ldr	r3, [pc, #192]	; (8005b2c <UART_SetConfig+0x2e4>)
 8005a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a78:	d01a      	beq.n	8005ab0 <UART_SetConfig+0x268>
 8005a7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a7e:	d81b      	bhi.n	8005ab8 <UART_SetConfig+0x270>
 8005a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a84:	d00c      	beq.n	8005aa0 <UART_SetConfig+0x258>
 8005a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a8a:	d815      	bhi.n	8005ab8 <UART_SetConfig+0x270>
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d003      	beq.n	8005a98 <UART_SetConfig+0x250>
 8005a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a94:	d008      	beq.n	8005aa8 <UART_SetConfig+0x260>
 8005a96:	e00f      	b.n	8005ab8 <UART_SetConfig+0x270>
 8005a98:	2300      	movs	r3, #0
 8005a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a9e:	e052      	b.n	8005b46 <UART_SetConfig+0x2fe>
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aa6:	e04e      	b.n	8005b46 <UART_SetConfig+0x2fe>
 8005aa8:	2304      	movs	r3, #4
 8005aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aae:	e04a      	b.n	8005b46 <UART_SetConfig+0x2fe>
 8005ab0:	2308      	movs	r3, #8
 8005ab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ab6:	e046      	b.n	8005b46 <UART_SetConfig+0x2fe>
 8005ab8:	2310      	movs	r3, #16
 8005aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005abe:	e042      	b.n	8005b46 <UART_SetConfig+0x2fe>
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a17      	ldr	r2, [pc, #92]	; (8005b24 <UART_SetConfig+0x2dc>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d13a      	bne.n	8005b40 <UART_SetConfig+0x2f8>
 8005aca:	4b18      	ldr	r3, [pc, #96]	; (8005b2c <UART_SetConfig+0x2e4>)
 8005acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ad4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ad8:	d01a      	beq.n	8005b10 <UART_SetConfig+0x2c8>
 8005ada:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ade:	d81b      	bhi.n	8005b18 <UART_SetConfig+0x2d0>
 8005ae0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ae4:	d00c      	beq.n	8005b00 <UART_SetConfig+0x2b8>
 8005ae6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aea:	d815      	bhi.n	8005b18 <UART_SetConfig+0x2d0>
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d003      	beq.n	8005af8 <UART_SetConfig+0x2b0>
 8005af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005af4:	d008      	beq.n	8005b08 <UART_SetConfig+0x2c0>
 8005af6:	e00f      	b.n	8005b18 <UART_SetConfig+0x2d0>
 8005af8:	2300      	movs	r3, #0
 8005afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005afe:	e022      	b.n	8005b46 <UART_SetConfig+0x2fe>
 8005b00:	2302      	movs	r3, #2
 8005b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b06:	e01e      	b.n	8005b46 <UART_SetConfig+0x2fe>
 8005b08:	2304      	movs	r3, #4
 8005b0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b0e:	e01a      	b.n	8005b46 <UART_SetConfig+0x2fe>
 8005b10:	2308      	movs	r3, #8
 8005b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b16:	e016      	b.n	8005b46 <UART_SetConfig+0x2fe>
 8005b18:	2310      	movs	r3, #16
 8005b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b1e:	e012      	b.n	8005b46 <UART_SetConfig+0x2fe>
 8005b20:	cfff69f3 	.word	0xcfff69f3
 8005b24:	40008000 	.word	0x40008000
 8005b28:	40013800 	.word	0x40013800
 8005b2c:	40021000 	.word	0x40021000
 8005b30:	40004400 	.word	0x40004400
 8005b34:	40004800 	.word	0x40004800
 8005b38:	40004c00 	.word	0x40004c00
 8005b3c:	40005000 	.word	0x40005000
 8005b40:	2310      	movs	r3, #16
 8005b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4aae      	ldr	r2, [pc, #696]	; (8005e04 <UART_SetConfig+0x5bc>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	f040 8097 	bne.w	8005c80 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b56:	2b08      	cmp	r3, #8
 8005b58:	d823      	bhi.n	8005ba2 <UART_SetConfig+0x35a>
 8005b5a:	a201      	add	r2, pc, #4	; (adr r2, 8005b60 <UART_SetConfig+0x318>)
 8005b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b60:	08005b85 	.word	0x08005b85
 8005b64:	08005ba3 	.word	0x08005ba3
 8005b68:	08005b8d 	.word	0x08005b8d
 8005b6c:	08005ba3 	.word	0x08005ba3
 8005b70:	08005b93 	.word	0x08005b93
 8005b74:	08005ba3 	.word	0x08005ba3
 8005b78:	08005ba3 	.word	0x08005ba3
 8005b7c:	08005ba3 	.word	0x08005ba3
 8005b80:	08005b9b 	.word	0x08005b9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b84:	f7fd fa44 	bl	8003010 <HAL_RCC_GetPCLK1Freq>
 8005b88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b8a:	e010      	b.n	8005bae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b8c:	4b9e      	ldr	r3, [pc, #632]	; (8005e08 <UART_SetConfig+0x5c0>)
 8005b8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b90:	e00d      	b.n	8005bae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b92:	f7fd f9a5 	bl	8002ee0 <HAL_RCC_GetSysClockFreq>
 8005b96:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b98:	e009      	b.n	8005bae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ba0:	e005      	b.n	8005bae <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005bac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 8130 	beq.w	8005e16 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bba:	4a94      	ldr	r2, [pc, #592]	; (8005e0c <UART_SetConfig+0x5c4>)
 8005bbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bc8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	4413      	add	r3, r2
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d305      	bcc.n	8005be6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d903      	bls.n	8005bee <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005bec:	e113      	b.n	8005e16 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	60bb      	str	r3, [r7, #8]
 8005bf4:	60fa      	str	r2, [r7, #12]
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	4a84      	ldr	r2, [pc, #528]	; (8005e0c <UART_SetConfig+0x5c4>)
 8005bfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	2200      	movs	r2, #0
 8005c04:	603b      	str	r3, [r7, #0]
 8005c06:	607a      	str	r2, [r7, #4]
 8005c08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c10:	f7fa ffe2 	bl	8000bd8 <__aeabi_uldivmod>
 8005c14:	4602      	mov	r2, r0
 8005c16:	460b      	mov	r3, r1
 8005c18:	4610      	mov	r0, r2
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	f04f 0200 	mov.w	r2, #0
 8005c20:	f04f 0300 	mov.w	r3, #0
 8005c24:	020b      	lsls	r3, r1, #8
 8005c26:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c2a:	0202      	lsls	r2, r0, #8
 8005c2c:	6979      	ldr	r1, [r7, #20]
 8005c2e:	6849      	ldr	r1, [r1, #4]
 8005c30:	0849      	lsrs	r1, r1, #1
 8005c32:	2000      	movs	r0, #0
 8005c34:	460c      	mov	r4, r1
 8005c36:	4605      	mov	r5, r0
 8005c38:	eb12 0804 	adds.w	r8, r2, r4
 8005c3c:	eb43 0905 	adc.w	r9, r3, r5
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	469a      	mov	sl, r3
 8005c48:	4693      	mov	fp, r2
 8005c4a:	4652      	mov	r2, sl
 8005c4c:	465b      	mov	r3, fp
 8005c4e:	4640      	mov	r0, r8
 8005c50:	4649      	mov	r1, r9
 8005c52:	f7fa ffc1 	bl	8000bd8 <__aeabi_uldivmod>
 8005c56:	4602      	mov	r2, r0
 8005c58:	460b      	mov	r3, r1
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c5e:	6a3b      	ldr	r3, [r7, #32]
 8005c60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c64:	d308      	bcc.n	8005c78 <UART_SetConfig+0x430>
 8005c66:	6a3b      	ldr	r3, [r7, #32]
 8005c68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c6c:	d204      	bcs.n	8005c78 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	6a3a      	ldr	r2, [r7, #32]
 8005c74:	60da      	str	r2, [r3, #12]
 8005c76:	e0ce      	b.n	8005e16 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005c7e:	e0ca      	b.n	8005e16 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	69db      	ldr	r3, [r3, #28]
 8005c84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c88:	d166      	bne.n	8005d58 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005c8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c8e:	2b08      	cmp	r3, #8
 8005c90:	d827      	bhi.n	8005ce2 <UART_SetConfig+0x49a>
 8005c92:	a201      	add	r2, pc, #4	; (adr r2, 8005c98 <UART_SetConfig+0x450>)
 8005c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c98:	08005cbd 	.word	0x08005cbd
 8005c9c:	08005cc5 	.word	0x08005cc5
 8005ca0:	08005ccd 	.word	0x08005ccd
 8005ca4:	08005ce3 	.word	0x08005ce3
 8005ca8:	08005cd3 	.word	0x08005cd3
 8005cac:	08005ce3 	.word	0x08005ce3
 8005cb0:	08005ce3 	.word	0x08005ce3
 8005cb4:	08005ce3 	.word	0x08005ce3
 8005cb8:	08005cdb 	.word	0x08005cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cbc:	f7fd f9a8 	bl	8003010 <HAL_RCC_GetPCLK1Freq>
 8005cc0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cc2:	e014      	b.n	8005cee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cc4:	f7fd f9ba 	bl	800303c <HAL_RCC_GetPCLK2Freq>
 8005cc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cca:	e010      	b.n	8005cee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ccc:	4b4e      	ldr	r3, [pc, #312]	; (8005e08 <UART_SetConfig+0x5c0>)
 8005cce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005cd0:	e00d      	b.n	8005cee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cd2:	f7fd f905 	bl	8002ee0 <HAL_RCC_GetSysClockFreq>
 8005cd6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cd8:	e009      	b.n	8005cee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ce0:	e005      	b.n	8005cee <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005cec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 8090 	beq.w	8005e16 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	4a44      	ldr	r2, [pc, #272]	; (8005e0c <UART_SetConfig+0x5c4>)
 8005cfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d00:	461a      	mov	r2, r3
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d08:	005a      	lsls	r2, r3, #1
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	085b      	lsrs	r3, r3, #1
 8005d10:	441a      	add	r2, r3
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d1a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	2b0f      	cmp	r3, #15
 8005d20:	d916      	bls.n	8005d50 <UART_SetConfig+0x508>
 8005d22:	6a3b      	ldr	r3, [r7, #32]
 8005d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d28:	d212      	bcs.n	8005d50 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	f023 030f 	bic.w	r3, r3, #15
 8005d32:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	085b      	lsrs	r3, r3, #1
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	f003 0307 	and.w	r3, r3, #7
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	8bfb      	ldrh	r3, [r7, #30]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	8bfa      	ldrh	r2, [r7, #30]
 8005d4c:	60da      	str	r2, [r3, #12]
 8005d4e:	e062      	b.n	8005e16 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005d56:	e05e      	b.n	8005e16 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d5c:	2b08      	cmp	r3, #8
 8005d5e:	d828      	bhi.n	8005db2 <UART_SetConfig+0x56a>
 8005d60:	a201      	add	r2, pc, #4	; (adr r2, 8005d68 <UART_SetConfig+0x520>)
 8005d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d66:	bf00      	nop
 8005d68:	08005d8d 	.word	0x08005d8d
 8005d6c:	08005d95 	.word	0x08005d95
 8005d70:	08005d9d 	.word	0x08005d9d
 8005d74:	08005db3 	.word	0x08005db3
 8005d78:	08005da3 	.word	0x08005da3
 8005d7c:	08005db3 	.word	0x08005db3
 8005d80:	08005db3 	.word	0x08005db3
 8005d84:	08005db3 	.word	0x08005db3
 8005d88:	08005dab 	.word	0x08005dab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d8c:	f7fd f940 	bl	8003010 <HAL_RCC_GetPCLK1Freq>
 8005d90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d92:	e014      	b.n	8005dbe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d94:	f7fd f952 	bl	800303c <HAL_RCC_GetPCLK2Freq>
 8005d98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d9a:	e010      	b.n	8005dbe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d9c:	4b1a      	ldr	r3, [pc, #104]	; (8005e08 <UART_SetConfig+0x5c0>)
 8005d9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005da0:	e00d      	b.n	8005dbe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005da2:	f7fd f89d 	bl	8002ee0 <HAL_RCC_GetSysClockFreq>
 8005da6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005da8:	e009      	b.n	8005dbe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005db0:	e005      	b.n	8005dbe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005db2:	2300      	movs	r3, #0
 8005db4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005dbc:	bf00      	nop
    }

    if (pclk != 0U)
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d028      	beq.n	8005e16 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	4a10      	ldr	r2, [pc, #64]	; (8005e0c <UART_SetConfig+0x5c4>)
 8005dca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dce:	461a      	mov	r2, r3
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	fbb3 f2f2 	udiv	r2, r3, r2
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	085b      	lsrs	r3, r3, #1
 8005ddc:	441a      	add	r2, r3
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	2b0f      	cmp	r3, #15
 8005dec:	d910      	bls.n	8005e10 <UART_SetConfig+0x5c8>
 8005dee:	6a3b      	ldr	r3, [r7, #32]
 8005df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df4:	d20c      	bcs.n	8005e10 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	60da      	str	r2, [r3, #12]
 8005e00:	e009      	b.n	8005e16 <UART_SetConfig+0x5ce>
 8005e02:	bf00      	nop
 8005e04:	40008000 	.word	0x40008000
 8005e08:	00f42400 	.word	0x00f42400
 8005e0c:	08008efc 	.word	0x08008efc
      }
      else
      {
        ret = HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005e32:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3730      	adds	r7, #48	; 0x30
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005e40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00a      	beq.n	8005e6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00a      	beq.n	8005e8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e90:	f003 0304 	and.w	r3, r3, #4
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00a      	beq.n	8005eae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb2:	f003 0308 	and.w	r3, r3, #8
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00a      	beq.n	8005ed0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed4:	f003 0310 	and.w	r3, r3, #16
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00a      	beq.n	8005ef2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef6:	f003 0320 	and.w	r3, r3, #32
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00a      	beq.n	8005f14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	430a      	orrs	r2, r1
 8005f12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d01a      	beq.n	8005f56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	430a      	orrs	r2, r1
 8005f34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f3e:	d10a      	bne.n	8005f56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00a      	beq.n	8005f78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	430a      	orrs	r2, r1
 8005f76:	605a      	str	r2, [r3, #4]
  }
}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af02      	add	r7, sp, #8
 8005f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f94:	f7fb fecc 	bl	8001d30 <HAL_GetTick>
 8005f98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0308 	and.w	r3, r3, #8
 8005fa4:	2b08      	cmp	r3, #8
 8005fa6:	d10e      	bne.n	8005fc6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fa8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f82f 	bl	800601a <UART_WaitOnFlagUntilTimeout>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e025      	b.n	8006012 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0304 	and.w	r3, r3, #4
 8005fd0:	2b04      	cmp	r3, #4
 8005fd2:	d10e      	bne.n	8005ff2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f819 	bl	800601a <UART_WaitOnFlagUntilTimeout>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d001      	beq.n	8005ff2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e00f      	b.n	8006012 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2220      	movs	r2, #32
 8005ff6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b09c      	sub	sp, #112	; 0x70
 800601e:	af00      	add	r7, sp, #0
 8006020:	60f8      	str	r0, [r7, #12]
 8006022:	60b9      	str	r1, [r7, #8]
 8006024:	603b      	str	r3, [r7, #0]
 8006026:	4613      	mov	r3, r2
 8006028:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800602a:	e0a9      	b.n	8006180 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800602c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800602e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006032:	f000 80a5 	beq.w	8006180 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006036:	f7fb fe7b 	bl	8001d30 <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006042:	429a      	cmp	r2, r3
 8006044:	d302      	bcc.n	800604c <UART_WaitOnFlagUntilTimeout+0x32>
 8006046:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006048:	2b00      	cmp	r3, #0
 800604a:	d140      	bne.n	80060ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006054:	e853 3f00 	ldrex	r3, [r3]
 8006058:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800605a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800605c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006060:	667b      	str	r3, [r7, #100]	; 0x64
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	461a      	mov	r2, r3
 8006068:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800606a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800606c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006070:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006072:	e841 2300 	strex	r3, r2, [r1]
 8006076:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1e6      	bne.n	800604c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3308      	adds	r3, #8
 8006084:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006088:	e853 3f00 	ldrex	r3, [r3]
 800608c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800608e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006090:	f023 0301 	bic.w	r3, r3, #1
 8006094:	663b      	str	r3, [r7, #96]	; 0x60
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	3308      	adds	r3, #8
 800609c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800609e:	64ba      	str	r2, [r7, #72]	; 0x48
 80060a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80060a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060a6:	e841 2300 	strex	r3, r2, [r1]
 80060aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80060ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1e5      	bne.n	800607e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2220      	movs	r2, #32
 80060b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2220      	movs	r2, #32
 80060be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e069      	b.n	80061a2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0304 	and.w	r3, r3, #4
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d051      	beq.n	8006180 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ea:	d149      	bne.n	8006180 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fe:	e853 3f00 	ldrex	r3, [r3]
 8006102:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800610a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	461a      	mov	r2, r3
 8006112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006114:	637b      	str	r3, [r7, #52]	; 0x34
 8006116:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006118:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800611a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800611c:	e841 2300 	strex	r3, r2, [r1]
 8006120:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1e6      	bne.n	80060f6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	3308      	adds	r3, #8
 800612e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	e853 3f00 	ldrex	r3, [r3]
 8006136:	613b      	str	r3, [r7, #16]
   return(result);
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f023 0301 	bic.w	r3, r3, #1
 800613e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3308      	adds	r3, #8
 8006146:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006148:	623a      	str	r2, [r7, #32]
 800614a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614c:	69f9      	ldr	r1, [r7, #28]
 800614e:	6a3a      	ldr	r2, [r7, #32]
 8006150:	e841 2300 	strex	r3, r2, [r1]
 8006154:	61bb      	str	r3, [r7, #24]
   return(result);
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1e5      	bne.n	8006128 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2220      	movs	r2, #32
 8006160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2220      	movs	r2, #32
 8006168:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2220      	movs	r2, #32
 8006170:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e010      	b.n	80061a2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	69da      	ldr	r2, [r3, #28]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	4013      	ands	r3, r2
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	429a      	cmp	r2, r3
 800618e:	bf0c      	ite	eq
 8006190:	2301      	moveq	r3, #1
 8006192:	2300      	movne	r3, #0
 8006194:	b2db      	uxtb	r3, r3
 8006196:	461a      	mov	r2, r3
 8006198:	79fb      	ldrb	r3, [r7, #7]
 800619a:	429a      	cmp	r2, r3
 800619c:	f43f af46 	beq.w	800602c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3770      	adds	r7, #112	; 0x70
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b085      	sub	sp, #20
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d101      	bne.n	80061c0 <HAL_UARTEx_DisableFifoMode+0x16>
 80061bc:	2302      	movs	r3, #2
 80061be:	e027      	b.n	8006210 <HAL_UARTEx_DisableFifoMode+0x66>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2224      	movs	r2, #36	; 0x24
 80061cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f022 0201 	bic.w	r2, r2, #1
 80061e6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2220      	movs	r2, #32
 8006202:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3714      	adds	r7, #20
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800622c:	2b01      	cmp	r3, #1
 800622e:	d101      	bne.n	8006234 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006230:	2302      	movs	r3, #2
 8006232:	e02d      	b.n	8006290 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2224      	movs	r2, #36	; 0x24
 8006240:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f022 0201 	bic.w	r2, r2, #1
 800625a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	683a      	ldr	r2, [r7, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f84f 	bl	8006314 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2220      	movs	r2, #32
 8006282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d101      	bne.n	80062b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80062ac:	2302      	movs	r3, #2
 80062ae:	e02d      	b.n	800630c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2224      	movs	r2, #36	; 0x24
 80062bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 0201 	bic.w	r2, r2, #1
 80062d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 f811 	bl	8006314 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2220      	movs	r2, #32
 80062fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006320:	2b00      	cmp	r3, #0
 8006322:	d108      	bne.n	8006336 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006334:	e031      	b.n	800639a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006336:	2308      	movs	r3, #8
 8006338:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800633a:	2308      	movs	r3, #8
 800633c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	0e5b      	lsrs	r3, r3, #25
 8006346:	b2db      	uxtb	r3, r3
 8006348:	f003 0307 	and.w	r3, r3, #7
 800634c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	0f5b      	lsrs	r3, r3, #29
 8006356:	b2db      	uxtb	r3, r3
 8006358:	f003 0307 	and.w	r3, r3, #7
 800635c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800635e:	7bbb      	ldrb	r3, [r7, #14]
 8006360:	7b3a      	ldrb	r2, [r7, #12]
 8006362:	4911      	ldr	r1, [pc, #68]	; (80063a8 <UARTEx_SetNbDataToProcess+0x94>)
 8006364:	5c8a      	ldrb	r2, [r1, r2]
 8006366:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800636a:	7b3a      	ldrb	r2, [r7, #12]
 800636c:	490f      	ldr	r1, [pc, #60]	; (80063ac <UARTEx_SetNbDataToProcess+0x98>)
 800636e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006370:	fb93 f3f2 	sdiv	r3, r3, r2
 8006374:	b29a      	uxth	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800637c:	7bfb      	ldrb	r3, [r7, #15]
 800637e:	7b7a      	ldrb	r2, [r7, #13]
 8006380:	4909      	ldr	r1, [pc, #36]	; (80063a8 <UARTEx_SetNbDataToProcess+0x94>)
 8006382:	5c8a      	ldrb	r2, [r1, r2]
 8006384:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006388:	7b7a      	ldrb	r2, [r7, #13]
 800638a:	4908      	ldr	r1, [pc, #32]	; (80063ac <UARTEx_SetNbDataToProcess+0x98>)
 800638c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800638e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006392:	b29a      	uxth	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800639a:	bf00      	nop
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	08008f14 	.word	0x08008f14
 80063ac:	08008f1c 	.word	0x08008f1c

080063b0 <__errno>:
 80063b0:	4b01      	ldr	r3, [pc, #4]	; (80063b8 <__errno+0x8>)
 80063b2:	6818      	ldr	r0, [r3, #0]
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	2000000c 	.word	0x2000000c

080063bc <__libc_init_array>:
 80063bc:	b570      	push	{r4, r5, r6, lr}
 80063be:	4d0d      	ldr	r5, [pc, #52]	; (80063f4 <__libc_init_array+0x38>)
 80063c0:	4c0d      	ldr	r4, [pc, #52]	; (80063f8 <__libc_init_array+0x3c>)
 80063c2:	1b64      	subs	r4, r4, r5
 80063c4:	10a4      	asrs	r4, r4, #2
 80063c6:	2600      	movs	r6, #0
 80063c8:	42a6      	cmp	r6, r4
 80063ca:	d109      	bne.n	80063e0 <__libc_init_array+0x24>
 80063cc:	4d0b      	ldr	r5, [pc, #44]	; (80063fc <__libc_init_array+0x40>)
 80063ce:	4c0c      	ldr	r4, [pc, #48]	; (8006400 <__libc_init_array+0x44>)
 80063d0:	f002 fd4e 	bl	8008e70 <_init>
 80063d4:	1b64      	subs	r4, r4, r5
 80063d6:	10a4      	asrs	r4, r4, #2
 80063d8:	2600      	movs	r6, #0
 80063da:	42a6      	cmp	r6, r4
 80063dc:	d105      	bne.n	80063ea <__libc_init_array+0x2e>
 80063de:	bd70      	pop	{r4, r5, r6, pc}
 80063e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80063e4:	4798      	blx	r3
 80063e6:	3601      	adds	r6, #1
 80063e8:	e7ee      	b.n	80063c8 <__libc_init_array+0xc>
 80063ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ee:	4798      	blx	r3
 80063f0:	3601      	adds	r6, #1
 80063f2:	e7f2      	b.n	80063da <__libc_init_array+0x1e>
 80063f4:	08009304 	.word	0x08009304
 80063f8:	08009304 	.word	0x08009304
 80063fc:	08009304 	.word	0x08009304
 8006400:	08009308 	.word	0x08009308

08006404 <memset>:
 8006404:	4402      	add	r2, r0
 8006406:	4603      	mov	r3, r0
 8006408:	4293      	cmp	r3, r2
 800640a:	d100      	bne.n	800640e <memset+0xa>
 800640c:	4770      	bx	lr
 800640e:	f803 1b01 	strb.w	r1, [r3], #1
 8006412:	e7f9      	b.n	8006408 <memset+0x4>

08006414 <__cvt>:
 8006414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006418:	ec55 4b10 	vmov	r4, r5, d0
 800641c:	2d00      	cmp	r5, #0
 800641e:	460e      	mov	r6, r1
 8006420:	4619      	mov	r1, r3
 8006422:	462b      	mov	r3, r5
 8006424:	bfbb      	ittet	lt
 8006426:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800642a:	461d      	movlt	r5, r3
 800642c:	2300      	movge	r3, #0
 800642e:	232d      	movlt	r3, #45	; 0x2d
 8006430:	700b      	strb	r3, [r1, #0]
 8006432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006434:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006438:	4691      	mov	r9, r2
 800643a:	f023 0820 	bic.w	r8, r3, #32
 800643e:	bfbc      	itt	lt
 8006440:	4622      	movlt	r2, r4
 8006442:	4614      	movlt	r4, r2
 8006444:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006448:	d005      	beq.n	8006456 <__cvt+0x42>
 800644a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800644e:	d100      	bne.n	8006452 <__cvt+0x3e>
 8006450:	3601      	adds	r6, #1
 8006452:	2102      	movs	r1, #2
 8006454:	e000      	b.n	8006458 <__cvt+0x44>
 8006456:	2103      	movs	r1, #3
 8006458:	ab03      	add	r3, sp, #12
 800645a:	9301      	str	r3, [sp, #4]
 800645c:	ab02      	add	r3, sp, #8
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	ec45 4b10 	vmov	d0, r4, r5
 8006464:	4653      	mov	r3, sl
 8006466:	4632      	mov	r2, r6
 8006468:	f000 fce2 	bl	8006e30 <_dtoa_r>
 800646c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006470:	4607      	mov	r7, r0
 8006472:	d102      	bne.n	800647a <__cvt+0x66>
 8006474:	f019 0f01 	tst.w	r9, #1
 8006478:	d022      	beq.n	80064c0 <__cvt+0xac>
 800647a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800647e:	eb07 0906 	add.w	r9, r7, r6
 8006482:	d110      	bne.n	80064a6 <__cvt+0x92>
 8006484:	783b      	ldrb	r3, [r7, #0]
 8006486:	2b30      	cmp	r3, #48	; 0x30
 8006488:	d10a      	bne.n	80064a0 <__cvt+0x8c>
 800648a:	2200      	movs	r2, #0
 800648c:	2300      	movs	r3, #0
 800648e:	4620      	mov	r0, r4
 8006490:	4629      	mov	r1, r5
 8006492:	f7fa fb31 	bl	8000af8 <__aeabi_dcmpeq>
 8006496:	b918      	cbnz	r0, 80064a0 <__cvt+0x8c>
 8006498:	f1c6 0601 	rsb	r6, r6, #1
 800649c:	f8ca 6000 	str.w	r6, [sl]
 80064a0:	f8da 3000 	ldr.w	r3, [sl]
 80064a4:	4499      	add	r9, r3
 80064a6:	2200      	movs	r2, #0
 80064a8:	2300      	movs	r3, #0
 80064aa:	4620      	mov	r0, r4
 80064ac:	4629      	mov	r1, r5
 80064ae:	f7fa fb23 	bl	8000af8 <__aeabi_dcmpeq>
 80064b2:	b108      	cbz	r0, 80064b8 <__cvt+0xa4>
 80064b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80064b8:	2230      	movs	r2, #48	; 0x30
 80064ba:	9b03      	ldr	r3, [sp, #12]
 80064bc:	454b      	cmp	r3, r9
 80064be:	d307      	bcc.n	80064d0 <__cvt+0xbc>
 80064c0:	9b03      	ldr	r3, [sp, #12]
 80064c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064c4:	1bdb      	subs	r3, r3, r7
 80064c6:	4638      	mov	r0, r7
 80064c8:	6013      	str	r3, [r2, #0]
 80064ca:	b004      	add	sp, #16
 80064cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064d0:	1c59      	adds	r1, r3, #1
 80064d2:	9103      	str	r1, [sp, #12]
 80064d4:	701a      	strb	r2, [r3, #0]
 80064d6:	e7f0      	b.n	80064ba <__cvt+0xa6>

080064d8 <__exponent>:
 80064d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064da:	4603      	mov	r3, r0
 80064dc:	2900      	cmp	r1, #0
 80064de:	bfb8      	it	lt
 80064e0:	4249      	neglt	r1, r1
 80064e2:	f803 2b02 	strb.w	r2, [r3], #2
 80064e6:	bfb4      	ite	lt
 80064e8:	222d      	movlt	r2, #45	; 0x2d
 80064ea:	222b      	movge	r2, #43	; 0x2b
 80064ec:	2909      	cmp	r1, #9
 80064ee:	7042      	strb	r2, [r0, #1]
 80064f0:	dd2a      	ble.n	8006548 <__exponent+0x70>
 80064f2:	f10d 0407 	add.w	r4, sp, #7
 80064f6:	46a4      	mov	ip, r4
 80064f8:	270a      	movs	r7, #10
 80064fa:	46a6      	mov	lr, r4
 80064fc:	460a      	mov	r2, r1
 80064fe:	fb91 f6f7 	sdiv	r6, r1, r7
 8006502:	fb07 1516 	mls	r5, r7, r6, r1
 8006506:	3530      	adds	r5, #48	; 0x30
 8006508:	2a63      	cmp	r2, #99	; 0x63
 800650a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800650e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006512:	4631      	mov	r1, r6
 8006514:	dcf1      	bgt.n	80064fa <__exponent+0x22>
 8006516:	3130      	adds	r1, #48	; 0x30
 8006518:	f1ae 0502 	sub.w	r5, lr, #2
 800651c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006520:	1c44      	adds	r4, r0, #1
 8006522:	4629      	mov	r1, r5
 8006524:	4561      	cmp	r1, ip
 8006526:	d30a      	bcc.n	800653e <__exponent+0x66>
 8006528:	f10d 0209 	add.w	r2, sp, #9
 800652c:	eba2 020e 	sub.w	r2, r2, lr
 8006530:	4565      	cmp	r5, ip
 8006532:	bf88      	it	hi
 8006534:	2200      	movhi	r2, #0
 8006536:	4413      	add	r3, r2
 8006538:	1a18      	subs	r0, r3, r0
 800653a:	b003      	add	sp, #12
 800653c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800653e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006542:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006546:	e7ed      	b.n	8006524 <__exponent+0x4c>
 8006548:	2330      	movs	r3, #48	; 0x30
 800654a:	3130      	adds	r1, #48	; 0x30
 800654c:	7083      	strb	r3, [r0, #2]
 800654e:	70c1      	strb	r1, [r0, #3]
 8006550:	1d03      	adds	r3, r0, #4
 8006552:	e7f1      	b.n	8006538 <__exponent+0x60>

08006554 <_printf_float>:
 8006554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006558:	ed2d 8b02 	vpush	{d8}
 800655c:	b08d      	sub	sp, #52	; 0x34
 800655e:	460c      	mov	r4, r1
 8006560:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006564:	4616      	mov	r6, r2
 8006566:	461f      	mov	r7, r3
 8006568:	4605      	mov	r5, r0
 800656a:	f001 fb45 	bl	8007bf8 <_localeconv_r>
 800656e:	f8d0 a000 	ldr.w	sl, [r0]
 8006572:	4650      	mov	r0, sl
 8006574:	f7f9 fe44 	bl	8000200 <strlen>
 8006578:	2300      	movs	r3, #0
 800657a:	930a      	str	r3, [sp, #40]	; 0x28
 800657c:	6823      	ldr	r3, [r4, #0]
 800657e:	9305      	str	r3, [sp, #20]
 8006580:	f8d8 3000 	ldr.w	r3, [r8]
 8006584:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006588:	3307      	adds	r3, #7
 800658a:	f023 0307 	bic.w	r3, r3, #7
 800658e:	f103 0208 	add.w	r2, r3, #8
 8006592:	f8c8 2000 	str.w	r2, [r8]
 8006596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800659e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80065a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80065a6:	9307      	str	r3, [sp, #28]
 80065a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80065ac:	ee08 0a10 	vmov	s16, r0
 80065b0:	4b9f      	ldr	r3, [pc, #636]	; (8006830 <_printf_float+0x2dc>)
 80065b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065ba:	f7fa facf 	bl	8000b5c <__aeabi_dcmpun>
 80065be:	bb88      	cbnz	r0, 8006624 <_printf_float+0xd0>
 80065c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065c4:	4b9a      	ldr	r3, [pc, #616]	; (8006830 <_printf_float+0x2dc>)
 80065c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065ca:	f7fa faa9 	bl	8000b20 <__aeabi_dcmple>
 80065ce:	bb48      	cbnz	r0, 8006624 <_printf_float+0xd0>
 80065d0:	2200      	movs	r2, #0
 80065d2:	2300      	movs	r3, #0
 80065d4:	4640      	mov	r0, r8
 80065d6:	4649      	mov	r1, r9
 80065d8:	f7fa fa98 	bl	8000b0c <__aeabi_dcmplt>
 80065dc:	b110      	cbz	r0, 80065e4 <_printf_float+0x90>
 80065de:	232d      	movs	r3, #45	; 0x2d
 80065e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065e4:	4b93      	ldr	r3, [pc, #588]	; (8006834 <_printf_float+0x2e0>)
 80065e6:	4894      	ldr	r0, [pc, #592]	; (8006838 <_printf_float+0x2e4>)
 80065e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80065ec:	bf94      	ite	ls
 80065ee:	4698      	movls	r8, r3
 80065f0:	4680      	movhi	r8, r0
 80065f2:	2303      	movs	r3, #3
 80065f4:	6123      	str	r3, [r4, #16]
 80065f6:	9b05      	ldr	r3, [sp, #20]
 80065f8:	f023 0204 	bic.w	r2, r3, #4
 80065fc:	6022      	str	r2, [r4, #0]
 80065fe:	f04f 0900 	mov.w	r9, #0
 8006602:	9700      	str	r7, [sp, #0]
 8006604:	4633      	mov	r3, r6
 8006606:	aa0b      	add	r2, sp, #44	; 0x2c
 8006608:	4621      	mov	r1, r4
 800660a:	4628      	mov	r0, r5
 800660c:	f000 f9d8 	bl	80069c0 <_printf_common>
 8006610:	3001      	adds	r0, #1
 8006612:	f040 8090 	bne.w	8006736 <_printf_float+0x1e2>
 8006616:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800661a:	b00d      	add	sp, #52	; 0x34
 800661c:	ecbd 8b02 	vpop	{d8}
 8006620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006624:	4642      	mov	r2, r8
 8006626:	464b      	mov	r3, r9
 8006628:	4640      	mov	r0, r8
 800662a:	4649      	mov	r1, r9
 800662c:	f7fa fa96 	bl	8000b5c <__aeabi_dcmpun>
 8006630:	b140      	cbz	r0, 8006644 <_printf_float+0xf0>
 8006632:	464b      	mov	r3, r9
 8006634:	2b00      	cmp	r3, #0
 8006636:	bfbc      	itt	lt
 8006638:	232d      	movlt	r3, #45	; 0x2d
 800663a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800663e:	487f      	ldr	r0, [pc, #508]	; (800683c <_printf_float+0x2e8>)
 8006640:	4b7f      	ldr	r3, [pc, #508]	; (8006840 <_printf_float+0x2ec>)
 8006642:	e7d1      	b.n	80065e8 <_printf_float+0x94>
 8006644:	6863      	ldr	r3, [r4, #4]
 8006646:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800664a:	9206      	str	r2, [sp, #24]
 800664c:	1c5a      	adds	r2, r3, #1
 800664e:	d13f      	bne.n	80066d0 <_printf_float+0x17c>
 8006650:	2306      	movs	r3, #6
 8006652:	6063      	str	r3, [r4, #4]
 8006654:	9b05      	ldr	r3, [sp, #20]
 8006656:	6861      	ldr	r1, [r4, #4]
 8006658:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800665c:	2300      	movs	r3, #0
 800665e:	9303      	str	r3, [sp, #12]
 8006660:	ab0a      	add	r3, sp, #40	; 0x28
 8006662:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006666:	ab09      	add	r3, sp, #36	; 0x24
 8006668:	ec49 8b10 	vmov	d0, r8, r9
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	6022      	str	r2, [r4, #0]
 8006670:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006674:	4628      	mov	r0, r5
 8006676:	f7ff fecd 	bl	8006414 <__cvt>
 800667a:	9b06      	ldr	r3, [sp, #24]
 800667c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800667e:	2b47      	cmp	r3, #71	; 0x47
 8006680:	4680      	mov	r8, r0
 8006682:	d108      	bne.n	8006696 <_printf_float+0x142>
 8006684:	1cc8      	adds	r0, r1, #3
 8006686:	db02      	blt.n	800668e <_printf_float+0x13a>
 8006688:	6863      	ldr	r3, [r4, #4]
 800668a:	4299      	cmp	r1, r3
 800668c:	dd41      	ble.n	8006712 <_printf_float+0x1be>
 800668e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006692:	fa5f fb8b 	uxtb.w	fp, fp
 8006696:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800669a:	d820      	bhi.n	80066de <_printf_float+0x18a>
 800669c:	3901      	subs	r1, #1
 800669e:	465a      	mov	r2, fp
 80066a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80066a4:	9109      	str	r1, [sp, #36]	; 0x24
 80066a6:	f7ff ff17 	bl	80064d8 <__exponent>
 80066aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066ac:	1813      	adds	r3, r2, r0
 80066ae:	2a01      	cmp	r2, #1
 80066b0:	4681      	mov	r9, r0
 80066b2:	6123      	str	r3, [r4, #16]
 80066b4:	dc02      	bgt.n	80066bc <_printf_float+0x168>
 80066b6:	6822      	ldr	r2, [r4, #0]
 80066b8:	07d2      	lsls	r2, r2, #31
 80066ba:	d501      	bpl.n	80066c0 <_printf_float+0x16c>
 80066bc:	3301      	adds	r3, #1
 80066be:	6123      	str	r3, [r4, #16]
 80066c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d09c      	beq.n	8006602 <_printf_float+0xae>
 80066c8:	232d      	movs	r3, #45	; 0x2d
 80066ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066ce:	e798      	b.n	8006602 <_printf_float+0xae>
 80066d0:	9a06      	ldr	r2, [sp, #24]
 80066d2:	2a47      	cmp	r2, #71	; 0x47
 80066d4:	d1be      	bne.n	8006654 <_printf_float+0x100>
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1bc      	bne.n	8006654 <_printf_float+0x100>
 80066da:	2301      	movs	r3, #1
 80066dc:	e7b9      	b.n	8006652 <_printf_float+0xfe>
 80066de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80066e2:	d118      	bne.n	8006716 <_printf_float+0x1c2>
 80066e4:	2900      	cmp	r1, #0
 80066e6:	6863      	ldr	r3, [r4, #4]
 80066e8:	dd0b      	ble.n	8006702 <_printf_float+0x1ae>
 80066ea:	6121      	str	r1, [r4, #16]
 80066ec:	b913      	cbnz	r3, 80066f4 <_printf_float+0x1a0>
 80066ee:	6822      	ldr	r2, [r4, #0]
 80066f0:	07d0      	lsls	r0, r2, #31
 80066f2:	d502      	bpl.n	80066fa <_printf_float+0x1a6>
 80066f4:	3301      	adds	r3, #1
 80066f6:	440b      	add	r3, r1
 80066f8:	6123      	str	r3, [r4, #16]
 80066fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80066fc:	f04f 0900 	mov.w	r9, #0
 8006700:	e7de      	b.n	80066c0 <_printf_float+0x16c>
 8006702:	b913      	cbnz	r3, 800670a <_printf_float+0x1b6>
 8006704:	6822      	ldr	r2, [r4, #0]
 8006706:	07d2      	lsls	r2, r2, #31
 8006708:	d501      	bpl.n	800670e <_printf_float+0x1ba>
 800670a:	3302      	adds	r3, #2
 800670c:	e7f4      	b.n	80066f8 <_printf_float+0x1a4>
 800670e:	2301      	movs	r3, #1
 8006710:	e7f2      	b.n	80066f8 <_printf_float+0x1a4>
 8006712:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006718:	4299      	cmp	r1, r3
 800671a:	db05      	blt.n	8006728 <_printf_float+0x1d4>
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	6121      	str	r1, [r4, #16]
 8006720:	07d8      	lsls	r0, r3, #31
 8006722:	d5ea      	bpl.n	80066fa <_printf_float+0x1a6>
 8006724:	1c4b      	adds	r3, r1, #1
 8006726:	e7e7      	b.n	80066f8 <_printf_float+0x1a4>
 8006728:	2900      	cmp	r1, #0
 800672a:	bfd4      	ite	le
 800672c:	f1c1 0202 	rsble	r2, r1, #2
 8006730:	2201      	movgt	r2, #1
 8006732:	4413      	add	r3, r2
 8006734:	e7e0      	b.n	80066f8 <_printf_float+0x1a4>
 8006736:	6823      	ldr	r3, [r4, #0]
 8006738:	055a      	lsls	r2, r3, #21
 800673a:	d407      	bmi.n	800674c <_printf_float+0x1f8>
 800673c:	6923      	ldr	r3, [r4, #16]
 800673e:	4642      	mov	r2, r8
 8006740:	4631      	mov	r1, r6
 8006742:	4628      	mov	r0, r5
 8006744:	47b8      	blx	r7
 8006746:	3001      	adds	r0, #1
 8006748:	d12c      	bne.n	80067a4 <_printf_float+0x250>
 800674a:	e764      	b.n	8006616 <_printf_float+0xc2>
 800674c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006750:	f240 80e0 	bls.w	8006914 <_printf_float+0x3c0>
 8006754:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006758:	2200      	movs	r2, #0
 800675a:	2300      	movs	r3, #0
 800675c:	f7fa f9cc 	bl	8000af8 <__aeabi_dcmpeq>
 8006760:	2800      	cmp	r0, #0
 8006762:	d034      	beq.n	80067ce <_printf_float+0x27a>
 8006764:	4a37      	ldr	r2, [pc, #220]	; (8006844 <_printf_float+0x2f0>)
 8006766:	2301      	movs	r3, #1
 8006768:	4631      	mov	r1, r6
 800676a:	4628      	mov	r0, r5
 800676c:	47b8      	blx	r7
 800676e:	3001      	adds	r0, #1
 8006770:	f43f af51 	beq.w	8006616 <_printf_float+0xc2>
 8006774:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006778:	429a      	cmp	r2, r3
 800677a:	db02      	blt.n	8006782 <_printf_float+0x22e>
 800677c:	6823      	ldr	r3, [r4, #0]
 800677e:	07d8      	lsls	r0, r3, #31
 8006780:	d510      	bpl.n	80067a4 <_printf_float+0x250>
 8006782:	ee18 3a10 	vmov	r3, s16
 8006786:	4652      	mov	r2, sl
 8006788:	4631      	mov	r1, r6
 800678a:	4628      	mov	r0, r5
 800678c:	47b8      	blx	r7
 800678e:	3001      	adds	r0, #1
 8006790:	f43f af41 	beq.w	8006616 <_printf_float+0xc2>
 8006794:	f04f 0800 	mov.w	r8, #0
 8006798:	f104 091a 	add.w	r9, r4, #26
 800679c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800679e:	3b01      	subs	r3, #1
 80067a0:	4543      	cmp	r3, r8
 80067a2:	dc09      	bgt.n	80067b8 <_printf_float+0x264>
 80067a4:	6823      	ldr	r3, [r4, #0]
 80067a6:	079b      	lsls	r3, r3, #30
 80067a8:	f100 8105 	bmi.w	80069b6 <_printf_float+0x462>
 80067ac:	68e0      	ldr	r0, [r4, #12]
 80067ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067b0:	4298      	cmp	r0, r3
 80067b2:	bfb8      	it	lt
 80067b4:	4618      	movlt	r0, r3
 80067b6:	e730      	b.n	800661a <_printf_float+0xc6>
 80067b8:	2301      	movs	r3, #1
 80067ba:	464a      	mov	r2, r9
 80067bc:	4631      	mov	r1, r6
 80067be:	4628      	mov	r0, r5
 80067c0:	47b8      	blx	r7
 80067c2:	3001      	adds	r0, #1
 80067c4:	f43f af27 	beq.w	8006616 <_printf_float+0xc2>
 80067c8:	f108 0801 	add.w	r8, r8, #1
 80067cc:	e7e6      	b.n	800679c <_printf_float+0x248>
 80067ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	dc39      	bgt.n	8006848 <_printf_float+0x2f4>
 80067d4:	4a1b      	ldr	r2, [pc, #108]	; (8006844 <_printf_float+0x2f0>)
 80067d6:	2301      	movs	r3, #1
 80067d8:	4631      	mov	r1, r6
 80067da:	4628      	mov	r0, r5
 80067dc:	47b8      	blx	r7
 80067de:	3001      	adds	r0, #1
 80067e0:	f43f af19 	beq.w	8006616 <_printf_float+0xc2>
 80067e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067e8:	4313      	orrs	r3, r2
 80067ea:	d102      	bne.n	80067f2 <_printf_float+0x29e>
 80067ec:	6823      	ldr	r3, [r4, #0]
 80067ee:	07d9      	lsls	r1, r3, #31
 80067f0:	d5d8      	bpl.n	80067a4 <_printf_float+0x250>
 80067f2:	ee18 3a10 	vmov	r3, s16
 80067f6:	4652      	mov	r2, sl
 80067f8:	4631      	mov	r1, r6
 80067fa:	4628      	mov	r0, r5
 80067fc:	47b8      	blx	r7
 80067fe:	3001      	adds	r0, #1
 8006800:	f43f af09 	beq.w	8006616 <_printf_float+0xc2>
 8006804:	f04f 0900 	mov.w	r9, #0
 8006808:	f104 0a1a 	add.w	sl, r4, #26
 800680c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800680e:	425b      	negs	r3, r3
 8006810:	454b      	cmp	r3, r9
 8006812:	dc01      	bgt.n	8006818 <_printf_float+0x2c4>
 8006814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006816:	e792      	b.n	800673e <_printf_float+0x1ea>
 8006818:	2301      	movs	r3, #1
 800681a:	4652      	mov	r2, sl
 800681c:	4631      	mov	r1, r6
 800681e:	4628      	mov	r0, r5
 8006820:	47b8      	blx	r7
 8006822:	3001      	adds	r0, #1
 8006824:	f43f aef7 	beq.w	8006616 <_printf_float+0xc2>
 8006828:	f109 0901 	add.w	r9, r9, #1
 800682c:	e7ee      	b.n	800680c <_printf_float+0x2b8>
 800682e:	bf00      	nop
 8006830:	7fefffff 	.word	0x7fefffff
 8006834:	08008f28 	.word	0x08008f28
 8006838:	08008f2c 	.word	0x08008f2c
 800683c:	08008f34 	.word	0x08008f34
 8006840:	08008f30 	.word	0x08008f30
 8006844:	08008f38 	.word	0x08008f38
 8006848:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800684a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800684c:	429a      	cmp	r2, r3
 800684e:	bfa8      	it	ge
 8006850:	461a      	movge	r2, r3
 8006852:	2a00      	cmp	r2, #0
 8006854:	4691      	mov	r9, r2
 8006856:	dc37      	bgt.n	80068c8 <_printf_float+0x374>
 8006858:	f04f 0b00 	mov.w	fp, #0
 800685c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006860:	f104 021a 	add.w	r2, r4, #26
 8006864:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006866:	9305      	str	r3, [sp, #20]
 8006868:	eba3 0309 	sub.w	r3, r3, r9
 800686c:	455b      	cmp	r3, fp
 800686e:	dc33      	bgt.n	80068d8 <_printf_float+0x384>
 8006870:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006874:	429a      	cmp	r2, r3
 8006876:	db3b      	blt.n	80068f0 <_printf_float+0x39c>
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	07da      	lsls	r2, r3, #31
 800687c:	d438      	bmi.n	80068f0 <_printf_float+0x39c>
 800687e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006880:	9a05      	ldr	r2, [sp, #20]
 8006882:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006884:	1a9a      	subs	r2, r3, r2
 8006886:	eba3 0901 	sub.w	r9, r3, r1
 800688a:	4591      	cmp	r9, r2
 800688c:	bfa8      	it	ge
 800688e:	4691      	movge	r9, r2
 8006890:	f1b9 0f00 	cmp.w	r9, #0
 8006894:	dc35      	bgt.n	8006902 <_printf_float+0x3ae>
 8006896:	f04f 0800 	mov.w	r8, #0
 800689a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800689e:	f104 0a1a 	add.w	sl, r4, #26
 80068a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068a6:	1a9b      	subs	r3, r3, r2
 80068a8:	eba3 0309 	sub.w	r3, r3, r9
 80068ac:	4543      	cmp	r3, r8
 80068ae:	f77f af79 	ble.w	80067a4 <_printf_float+0x250>
 80068b2:	2301      	movs	r3, #1
 80068b4:	4652      	mov	r2, sl
 80068b6:	4631      	mov	r1, r6
 80068b8:	4628      	mov	r0, r5
 80068ba:	47b8      	blx	r7
 80068bc:	3001      	adds	r0, #1
 80068be:	f43f aeaa 	beq.w	8006616 <_printf_float+0xc2>
 80068c2:	f108 0801 	add.w	r8, r8, #1
 80068c6:	e7ec      	b.n	80068a2 <_printf_float+0x34e>
 80068c8:	4613      	mov	r3, r2
 80068ca:	4631      	mov	r1, r6
 80068cc:	4642      	mov	r2, r8
 80068ce:	4628      	mov	r0, r5
 80068d0:	47b8      	blx	r7
 80068d2:	3001      	adds	r0, #1
 80068d4:	d1c0      	bne.n	8006858 <_printf_float+0x304>
 80068d6:	e69e      	b.n	8006616 <_printf_float+0xc2>
 80068d8:	2301      	movs	r3, #1
 80068da:	4631      	mov	r1, r6
 80068dc:	4628      	mov	r0, r5
 80068de:	9205      	str	r2, [sp, #20]
 80068e0:	47b8      	blx	r7
 80068e2:	3001      	adds	r0, #1
 80068e4:	f43f ae97 	beq.w	8006616 <_printf_float+0xc2>
 80068e8:	9a05      	ldr	r2, [sp, #20]
 80068ea:	f10b 0b01 	add.w	fp, fp, #1
 80068ee:	e7b9      	b.n	8006864 <_printf_float+0x310>
 80068f0:	ee18 3a10 	vmov	r3, s16
 80068f4:	4652      	mov	r2, sl
 80068f6:	4631      	mov	r1, r6
 80068f8:	4628      	mov	r0, r5
 80068fa:	47b8      	blx	r7
 80068fc:	3001      	adds	r0, #1
 80068fe:	d1be      	bne.n	800687e <_printf_float+0x32a>
 8006900:	e689      	b.n	8006616 <_printf_float+0xc2>
 8006902:	9a05      	ldr	r2, [sp, #20]
 8006904:	464b      	mov	r3, r9
 8006906:	4442      	add	r2, r8
 8006908:	4631      	mov	r1, r6
 800690a:	4628      	mov	r0, r5
 800690c:	47b8      	blx	r7
 800690e:	3001      	adds	r0, #1
 8006910:	d1c1      	bne.n	8006896 <_printf_float+0x342>
 8006912:	e680      	b.n	8006616 <_printf_float+0xc2>
 8006914:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006916:	2a01      	cmp	r2, #1
 8006918:	dc01      	bgt.n	800691e <_printf_float+0x3ca>
 800691a:	07db      	lsls	r3, r3, #31
 800691c:	d538      	bpl.n	8006990 <_printf_float+0x43c>
 800691e:	2301      	movs	r3, #1
 8006920:	4642      	mov	r2, r8
 8006922:	4631      	mov	r1, r6
 8006924:	4628      	mov	r0, r5
 8006926:	47b8      	blx	r7
 8006928:	3001      	adds	r0, #1
 800692a:	f43f ae74 	beq.w	8006616 <_printf_float+0xc2>
 800692e:	ee18 3a10 	vmov	r3, s16
 8006932:	4652      	mov	r2, sl
 8006934:	4631      	mov	r1, r6
 8006936:	4628      	mov	r0, r5
 8006938:	47b8      	blx	r7
 800693a:	3001      	adds	r0, #1
 800693c:	f43f ae6b 	beq.w	8006616 <_printf_float+0xc2>
 8006940:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006944:	2200      	movs	r2, #0
 8006946:	2300      	movs	r3, #0
 8006948:	f7fa f8d6 	bl	8000af8 <__aeabi_dcmpeq>
 800694c:	b9d8      	cbnz	r0, 8006986 <_printf_float+0x432>
 800694e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006950:	f108 0201 	add.w	r2, r8, #1
 8006954:	3b01      	subs	r3, #1
 8006956:	4631      	mov	r1, r6
 8006958:	4628      	mov	r0, r5
 800695a:	47b8      	blx	r7
 800695c:	3001      	adds	r0, #1
 800695e:	d10e      	bne.n	800697e <_printf_float+0x42a>
 8006960:	e659      	b.n	8006616 <_printf_float+0xc2>
 8006962:	2301      	movs	r3, #1
 8006964:	4652      	mov	r2, sl
 8006966:	4631      	mov	r1, r6
 8006968:	4628      	mov	r0, r5
 800696a:	47b8      	blx	r7
 800696c:	3001      	adds	r0, #1
 800696e:	f43f ae52 	beq.w	8006616 <_printf_float+0xc2>
 8006972:	f108 0801 	add.w	r8, r8, #1
 8006976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006978:	3b01      	subs	r3, #1
 800697a:	4543      	cmp	r3, r8
 800697c:	dcf1      	bgt.n	8006962 <_printf_float+0x40e>
 800697e:	464b      	mov	r3, r9
 8006980:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006984:	e6dc      	b.n	8006740 <_printf_float+0x1ec>
 8006986:	f04f 0800 	mov.w	r8, #0
 800698a:	f104 0a1a 	add.w	sl, r4, #26
 800698e:	e7f2      	b.n	8006976 <_printf_float+0x422>
 8006990:	2301      	movs	r3, #1
 8006992:	4642      	mov	r2, r8
 8006994:	e7df      	b.n	8006956 <_printf_float+0x402>
 8006996:	2301      	movs	r3, #1
 8006998:	464a      	mov	r2, r9
 800699a:	4631      	mov	r1, r6
 800699c:	4628      	mov	r0, r5
 800699e:	47b8      	blx	r7
 80069a0:	3001      	adds	r0, #1
 80069a2:	f43f ae38 	beq.w	8006616 <_printf_float+0xc2>
 80069a6:	f108 0801 	add.w	r8, r8, #1
 80069aa:	68e3      	ldr	r3, [r4, #12]
 80069ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80069ae:	1a5b      	subs	r3, r3, r1
 80069b0:	4543      	cmp	r3, r8
 80069b2:	dcf0      	bgt.n	8006996 <_printf_float+0x442>
 80069b4:	e6fa      	b.n	80067ac <_printf_float+0x258>
 80069b6:	f04f 0800 	mov.w	r8, #0
 80069ba:	f104 0919 	add.w	r9, r4, #25
 80069be:	e7f4      	b.n	80069aa <_printf_float+0x456>

080069c0 <_printf_common>:
 80069c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069c4:	4616      	mov	r6, r2
 80069c6:	4699      	mov	r9, r3
 80069c8:	688a      	ldr	r2, [r1, #8]
 80069ca:	690b      	ldr	r3, [r1, #16]
 80069cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069d0:	4293      	cmp	r3, r2
 80069d2:	bfb8      	it	lt
 80069d4:	4613      	movlt	r3, r2
 80069d6:	6033      	str	r3, [r6, #0]
 80069d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069dc:	4607      	mov	r7, r0
 80069de:	460c      	mov	r4, r1
 80069e0:	b10a      	cbz	r2, 80069e6 <_printf_common+0x26>
 80069e2:	3301      	adds	r3, #1
 80069e4:	6033      	str	r3, [r6, #0]
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	0699      	lsls	r1, r3, #26
 80069ea:	bf42      	ittt	mi
 80069ec:	6833      	ldrmi	r3, [r6, #0]
 80069ee:	3302      	addmi	r3, #2
 80069f0:	6033      	strmi	r3, [r6, #0]
 80069f2:	6825      	ldr	r5, [r4, #0]
 80069f4:	f015 0506 	ands.w	r5, r5, #6
 80069f8:	d106      	bne.n	8006a08 <_printf_common+0x48>
 80069fa:	f104 0a19 	add.w	sl, r4, #25
 80069fe:	68e3      	ldr	r3, [r4, #12]
 8006a00:	6832      	ldr	r2, [r6, #0]
 8006a02:	1a9b      	subs	r3, r3, r2
 8006a04:	42ab      	cmp	r3, r5
 8006a06:	dc26      	bgt.n	8006a56 <_printf_common+0x96>
 8006a08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a0c:	1e13      	subs	r3, r2, #0
 8006a0e:	6822      	ldr	r2, [r4, #0]
 8006a10:	bf18      	it	ne
 8006a12:	2301      	movne	r3, #1
 8006a14:	0692      	lsls	r2, r2, #26
 8006a16:	d42b      	bmi.n	8006a70 <_printf_common+0xb0>
 8006a18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a1c:	4649      	mov	r1, r9
 8006a1e:	4638      	mov	r0, r7
 8006a20:	47c0      	blx	r8
 8006a22:	3001      	adds	r0, #1
 8006a24:	d01e      	beq.n	8006a64 <_printf_common+0xa4>
 8006a26:	6823      	ldr	r3, [r4, #0]
 8006a28:	68e5      	ldr	r5, [r4, #12]
 8006a2a:	6832      	ldr	r2, [r6, #0]
 8006a2c:	f003 0306 	and.w	r3, r3, #6
 8006a30:	2b04      	cmp	r3, #4
 8006a32:	bf08      	it	eq
 8006a34:	1aad      	subeq	r5, r5, r2
 8006a36:	68a3      	ldr	r3, [r4, #8]
 8006a38:	6922      	ldr	r2, [r4, #16]
 8006a3a:	bf0c      	ite	eq
 8006a3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a40:	2500      	movne	r5, #0
 8006a42:	4293      	cmp	r3, r2
 8006a44:	bfc4      	itt	gt
 8006a46:	1a9b      	subgt	r3, r3, r2
 8006a48:	18ed      	addgt	r5, r5, r3
 8006a4a:	2600      	movs	r6, #0
 8006a4c:	341a      	adds	r4, #26
 8006a4e:	42b5      	cmp	r5, r6
 8006a50:	d11a      	bne.n	8006a88 <_printf_common+0xc8>
 8006a52:	2000      	movs	r0, #0
 8006a54:	e008      	b.n	8006a68 <_printf_common+0xa8>
 8006a56:	2301      	movs	r3, #1
 8006a58:	4652      	mov	r2, sl
 8006a5a:	4649      	mov	r1, r9
 8006a5c:	4638      	mov	r0, r7
 8006a5e:	47c0      	blx	r8
 8006a60:	3001      	adds	r0, #1
 8006a62:	d103      	bne.n	8006a6c <_printf_common+0xac>
 8006a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a6c:	3501      	adds	r5, #1
 8006a6e:	e7c6      	b.n	80069fe <_printf_common+0x3e>
 8006a70:	18e1      	adds	r1, r4, r3
 8006a72:	1c5a      	adds	r2, r3, #1
 8006a74:	2030      	movs	r0, #48	; 0x30
 8006a76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a7a:	4422      	add	r2, r4
 8006a7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a84:	3302      	adds	r3, #2
 8006a86:	e7c7      	b.n	8006a18 <_printf_common+0x58>
 8006a88:	2301      	movs	r3, #1
 8006a8a:	4622      	mov	r2, r4
 8006a8c:	4649      	mov	r1, r9
 8006a8e:	4638      	mov	r0, r7
 8006a90:	47c0      	blx	r8
 8006a92:	3001      	adds	r0, #1
 8006a94:	d0e6      	beq.n	8006a64 <_printf_common+0xa4>
 8006a96:	3601      	adds	r6, #1
 8006a98:	e7d9      	b.n	8006a4e <_printf_common+0x8e>
	...

08006a9c <_printf_i>:
 8006a9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa0:	7e0f      	ldrb	r7, [r1, #24]
 8006aa2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006aa4:	2f78      	cmp	r7, #120	; 0x78
 8006aa6:	4691      	mov	r9, r2
 8006aa8:	4680      	mov	r8, r0
 8006aaa:	460c      	mov	r4, r1
 8006aac:	469a      	mov	sl, r3
 8006aae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ab2:	d807      	bhi.n	8006ac4 <_printf_i+0x28>
 8006ab4:	2f62      	cmp	r7, #98	; 0x62
 8006ab6:	d80a      	bhi.n	8006ace <_printf_i+0x32>
 8006ab8:	2f00      	cmp	r7, #0
 8006aba:	f000 80d8 	beq.w	8006c6e <_printf_i+0x1d2>
 8006abe:	2f58      	cmp	r7, #88	; 0x58
 8006ac0:	f000 80a3 	beq.w	8006c0a <_printf_i+0x16e>
 8006ac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ac8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006acc:	e03a      	b.n	8006b44 <_printf_i+0xa8>
 8006ace:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ad2:	2b15      	cmp	r3, #21
 8006ad4:	d8f6      	bhi.n	8006ac4 <_printf_i+0x28>
 8006ad6:	a101      	add	r1, pc, #4	; (adr r1, 8006adc <_printf_i+0x40>)
 8006ad8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006adc:	08006b35 	.word	0x08006b35
 8006ae0:	08006b49 	.word	0x08006b49
 8006ae4:	08006ac5 	.word	0x08006ac5
 8006ae8:	08006ac5 	.word	0x08006ac5
 8006aec:	08006ac5 	.word	0x08006ac5
 8006af0:	08006ac5 	.word	0x08006ac5
 8006af4:	08006b49 	.word	0x08006b49
 8006af8:	08006ac5 	.word	0x08006ac5
 8006afc:	08006ac5 	.word	0x08006ac5
 8006b00:	08006ac5 	.word	0x08006ac5
 8006b04:	08006ac5 	.word	0x08006ac5
 8006b08:	08006c55 	.word	0x08006c55
 8006b0c:	08006b79 	.word	0x08006b79
 8006b10:	08006c37 	.word	0x08006c37
 8006b14:	08006ac5 	.word	0x08006ac5
 8006b18:	08006ac5 	.word	0x08006ac5
 8006b1c:	08006c77 	.word	0x08006c77
 8006b20:	08006ac5 	.word	0x08006ac5
 8006b24:	08006b79 	.word	0x08006b79
 8006b28:	08006ac5 	.word	0x08006ac5
 8006b2c:	08006ac5 	.word	0x08006ac5
 8006b30:	08006c3f 	.word	0x08006c3f
 8006b34:	682b      	ldr	r3, [r5, #0]
 8006b36:	1d1a      	adds	r2, r3, #4
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	602a      	str	r2, [r5, #0]
 8006b3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b44:	2301      	movs	r3, #1
 8006b46:	e0a3      	b.n	8006c90 <_printf_i+0x1f4>
 8006b48:	6820      	ldr	r0, [r4, #0]
 8006b4a:	6829      	ldr	r1, [r5, #0]
 8006b4c:	0606      	lsls	r6, r0, #24
 8006b4e:	f101 0304 	add.w	r3, r1, #4
 8006b52:	d50a      	bpl.n	8006b6a <_printf_i+0xce>
 8006b54:	680e      	ldr	r6, [r1, #0]
 8006b56:	602b      	str	r3, [r5, #0]
 8006b58:	2e00      	cmp	r6, #0
 8006b5a:	da03      	bge.n	8006b64 <_printf_i+0xc8>
 8006b5c:	232d      	movs	r3, #45	; 0x2d
 8006b5e:	4276      	negs	r6, r6
 8006b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b64:	485e      	ldr	r0, [pc, #376]	; (8006ce0 <_printf_i+0x244>)
 8006b66:	230a      	movs	r3, #10
 8006b68:	e019      	b.n	8006b9e <_printf_i+0x102>
 8006b6a:	680e      	ldr	r6, [r1, #0]
 8006b6c:	602b      	str	r3, [r5, #0]
 8006b6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b72:	bf18      	it	ne
 8006b74:	b236      	sxthne	r6, r6
 8006b76:	e7ef      	b.n	8006b58 <_printf_i+0xbc>
 8006b78:	682b      	ldr	r3, [r5, #0]
 8006b7a:	6820      	ldr	r0, [r4, #0]
 8006b7c:	1d19      	adds	r1, r3, #4
 8006b7e:	6029      	str	r1, [r5, #0]
 8006b80:	0601      	lsls	r1, r0, #24
 8006b82:	d501      	bpl.n	8006b88 <_printf_i+0xec>
 8006b84:	681e      	ldr	r6, [r3, #0]
 8006b86:	e002      	b.n	8006b8e <_printf_i+0xf2>
 8006b88:	0646      	lsls	r6, r0, #25
 8006b8a:	d5fb      	bpl.n	8006b84 <_printf_i+0xe8>
 8006b8c:	881e      	ldrh	r6, [r3, #0]
 8006b8e:	4854      	ldr	r0, [pc, #336]	; (8006ce0 <_printf_i+0x244>)
 8006b90:	2f6f      	cmp	r7, #111	; 0x6f
 8006b92:	bf0c      	ite	eq
 8006b94:	2308      	moveq	r3, #8
 8006b96:	230a      	movne	r3, #10
 8006b98:	2100      	movs	r1, #0
 8006b9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b9e:	6865      	ldr	r5, [r4, #4]
 8006ba0:	60a5      	str	r5, [r4, #8]
 8006ba2:	2d00      	cmp	r5, #0
 8006ba4:	bfa2      	ittt	ge
 8006ba6:	6821      	ldrge	r1, [r4, #0]
 8006ba8:	f021 0104 	bicge.w	r1, r1, #4
 8006bac:	6021      	strge	r1, [r4, #0]
 8006bae:	b90e      	cbnz	r6, 8006bb4 <_printf_i+0x118>
 8006bb0:	2d00      	cmp	r5, #0
 8006bb2:	d04d      	beq.n	8006c50 <_printf_i+0x1b4>
 8006bb4:	4615      	mov	r5, r2
 8006bb6:	fbb6 f1f3 	udiv	r1, r6, r3
 8006bba:	fb03 6711 	mls	r7, r3, r1, r6
 8006bbe:	5dc7      	ldrb	r7, [r0, r7]
 8006bc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006bc4:	4637      	mov	r7, r6
 8006bc6:	42bb      	cmp	r3, r7
 8006bc8:	460e      	mov	r6, r1
 8006bca:	d9f4      	bls.n	8006bb6 <_printf_i+0x11a>
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	d10b      	bne.n	8006be8 <_printf_i+0x14c>
 8006bd0:	6823      	ldr	r3, [r4, #0]
 8006bd2:	07de      	lsls	r6, r3, #31
 8006bd4:	d508      	bpl.n	8006be8 <_printf_i+0x14c>
 8006bd6:	6923      	ldr	r3, [r4, #16]
 8006bd8:	6861      	ldr	r1, [r4, #4]
 8006bda:	4299      	cmp	r1, r3
 8006bdc:	bfde      	ittt	le
 8006bde:	2330      	movle	r3, #48	; 0x30
 8006be0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006be4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006be8:	1b52      	subs	r2, r2, r5
 8006bea:	6122      	str	r2, [r4, #16]
 8006bec:	f8cd a000 	str.w	sl, [sp]
 8006bf0:	464b      	mov	r3, r9
 8006bf2:	aa03      	add	r2, sp, #12
 8006bf4:	4621      	mov	r1, r4
 8006bf6:	4640      	mov	r0, r8
 8006bf8:	f7ff fee2 	bl	80069c0 <_printf_common>
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	d14c      	bne.n	8006c9a <_printf_i+0x1fe>
 8006c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c04:	b004      	add	sp, #16
 8006c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c0a:	4835      	ldr	r0, [pc, #212]	; (8006ce0 <_printf_i+0x244>)
 8006c0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006c10:	6829      	ldr	r1, [r5, #0]
 8006c12:	6823      	ldr	r3, [r4, #0]
 8006c14:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c18:	6029      	str	r1, [r5, #0]
 8006c1a:	061d      	lsls	r5, r3, #24
 8006c1c:	d514      	bpl.n	8006c48 <_printf_i+0x1ac>
 8006c1e:	07df      	lsls	r7, r3, #31
 8006c20:	bf44      	itt	mi
 8006c22:	f043 0320 	orrmi.w	r3, r3, #32
 8006c26:	6023      	strmi	r3, [r4, #0]
 8006c28:	b91e      	cbnz	r6, 8006c32 <_printf_i+0x196>
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	f023 0320 	bic.w	r3, r3, #32
 8006c30:	6023      	str	r3, [r4, #0]
 8006c32:	2310      	movs	r3, #16
 8006c34:	e7b0      	b.n	8006b98 <_printf_i+0xfc>
 8006c36:	6823      	ldr	r3, [r4, #0]
 8006c38:	f043 0320 	orr.w	r3, r3, #32
 8006c3c:	6023      	str	r3, [r4, #0]
 8006c3e:	2378      	movs	r3, #120	; 0x78
 8006c40:	4828      	ldr	r0, [pc, #160]	; (8006ce4 <_printf_i+0x248>)
 8006c42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c46:	e7e3      	b.n	8006c10 <_printf_i+0x174>
 8006c48:	0659      	lsls	r1, r3, #25
 8006c4a:	bf48      	it	mi
 8006c4c:	b2b6      	uxthmi	r6, r6
 8006c4e:	e7e6      	b.n	8006c1e <_printf_i+0x182>
 8006c50:	4615      	mov	r5, r2
 8006c52:	e7bb      	b.n	8006bcc <_printf_i+0x130>
 8006c54:	682b      	ldr	r3, [r5, #0]
 8006c56:	6826      	ldr	r6, [r4, #0]
 8006c58:	6961      	ldr	r1, [r4, #20]
 8006c5a:	1d18      	adds	r0, r3, #4
 8006c5c:	6028      	str	r0, [r5, #0]
 8006c5e:	0635      	lsls	r5, r6, #24
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	d501      	bpl.n	8006c68 <_printf_i+0x1cc>
 8006c64:	6019      	str	r1, [r3, #0]
 8006c66:	e002      	b.n	8006c6e <_printf_i+0x1d2>
 8006c68:	0670      	lsls	r0, r6, #25
 8006c6a:	d5fb      	bpl.n	8006c64 <_printf_i+0x1c8>
 8006c6c:	8019      	strh	r1, [r3, #0]
 8006c6e:	2300      	movs	r3, #0
 8006c70:	6123      	str	r3, [r4, #16]
 8006c72:	4615      	mov	r5, r2
 8006c74:	e7ba      	b.n	8006bec <_printf_i+0x150>
 8006c76:	682b      	ldr	r3, [r5, #0]
 8006c78:	1d1a      	adds	r2, r3, #4
 8006c7a:	602a      	str	r2, [r5, #0]
 8006c7c:	681d      	ldr	r5, [r3, #0]
 8006c7e:	6862      	ldr	r2, [r4, #4]
 8006c80:	2100      	movs	r1, #0
 8006c82:	4628      	mov	r0, r5
 8006c84:	f7f9 fac4 	bl	8000210 <memchr>
 8006c88:	b108      	cbz	r0, 8006c8e <_printf_i+0x1f2>
 8006c8a:	1b40      	subs	r0, r0, r5
 8006c8c:	6060      	str	r0, [r4, #4]
 8006c8e:	6863      	ldr	r3, [r4, #4]
 8006c90:	6123      	str	r3, [r4, #16]
 8006c92:	2300      	movs	r3, #0
 8006c94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c98:	e7a8      	b.n	8006bec <_printf_i+0x150>
 8006c9a:	6923      	ldr	r3, [r4, #16]
 8006c9c:	462a      	mov	r2, r5
 8006c9e:	4649      	mov	r1, r9
 8006ca0:	4640      	mov	r0, r8
 8006ca2:	47d0      	blx	sl
 8006ca4:	3001      	adds	r0, #1
 8006ca6:	d0ab      	beq.n	8006c00 <_printf_i+0x164>
 8006ca8:	6823      	ldr	r3, [r4, #0]
 8006caa:	079b      	lsls	r3, r3, #30
 8006cac:	d413      	bmi.n	8006cd6 <_printf_i+0x23a>
 8006cae:	68e0      	ldr	r0, [r4, #12]
 8006cb0:	9b03      	ldr	r3, [sp, #12]
 8006cb2:	4298      	cmp	r0, r3
 8006cb4:	bfb8      	it	lt
 8006cb6:	4618      	movlt	r0, r3
 8006cb8:	e7a4      	b.n	8006c04 <_printf_i+0x168>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	4632      	mov	r2, r6
 8006cbe:	4649      	mov	r1, r9
 8006cc0:	4640      	mov	r0, r8
 8006cc2:	47d0      	blx	sl
 8006cc4:	3001      	adds	r0, #1
 8006cc6:	d09b      	beq.n	8006c00 <_printf_i+0x164>
 8006cc8:	3501      	adds	r5, #1
 8006cca:	68e3      	ldr	r3, [r4, #12]
 8006ccc:	9903      	ldr	r1, [sp, #12]
 8006cce:	1a5b      	subs	r3, r3, r1
 8006cd0:	42ab      	cmp	r3, r5
 8006cd2:	dcf2      	bgt.n	8006cba <_printf_i+0x21e>
 8006cd4:	e7eb      	b.n	8006cae <_printf_i+0x212>
 8006cd6:	2500      	movs	r5, #0
 8006cd8:	f104 0619 	add.w	r6, r4, #25
 8006cdc:	e7f5      	b.n	8006cca <_printf_i+0x22e>
 8006cde:	bf00      	nop
 8006ce0:	08008f3a 	.word	0x08008f3a
 8006ce4:	08008f4b 	.word	0x08008f4b

08006ce8 <iprintf>:
 8006ce8:	b40f      	push	{r0, r1, r2, r3}
 8006cea:	4b0a      	ldr	r3, [pc, #40]	; (8006d14 <iprintf+0x2c>)
 8006cec:	b513      	push	{r0, r1, r4, lr}
 8006cee:	681c      	ldr	r4, [r3, #0]
 8006cf0:	b124      	cbz	r4, 8006cfc <iprintf+0x14>
 8006cf2:	69a3      	ldr	r3, [r4, #24]
 8006cf4:	b913      	cbnz	r3, 8006cfc <iprintf+0x14>
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	f000 fee0 	bl	8007abc <__sinit>
 8006cfc:	ab05      	add	r3, sp, #20
 8006cfe:	9a04      	ldr	r2, [sp, #16]
 8006d00:	68a1      	ldr	r1, [r4, #8]
 8006d02:	9301      	str	r3, [sp, #4]
 8006d04:	4620      	mov	r0, r4
 8006d06:	f001 fc39 	bl	800857c <_vfiprintf_r>
 8006d0a:	b002      	add	sp, #8
 8006d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d10:	b004      	add	sp, #16
 8006d12:	4770      	bx	lr
 8006d14:	2000000c 	.word	0x2000000c

08006d18 <quorem>:
 8006d18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d1c:	6903      	ldr	r3, [r0, #16]
 8006d1e:	690c      	ldr	r4, [r1, #16]
 8006d20:	42a3      	cmp	r3, r4
 8006d22:	4607      	mov	r7, r0
 8006d24:	f2c0 8081 	blt.w	8006e2a <quorem+0x112>
 8006d28:	3c01      	subs	r4, #1
 8006d2a:	f101 0814 	add.w	r8, r1, #20
 8006d2e:	f100 0514 	add.w	r5, r0, #20
 8006d32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d36:	9301      	str	r3, [sp, #4]
 8006d38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d40:	3301      	adds	r3, #1
 8006d42:	429a      	cmp	r2, r3
 8006d44:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006d48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d50:	d331      	bcc.n	8006db6 <quorem+0x9e>
 8006d52:	f04f 0e00 	mov.w	lr, #0
 8006d56:	4640      	mov	r0, r8
 8006d58:	46ac      	mov	ip, r5
 8006d5a:	46f2      	mov	sl, lr
 8006d5c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006d60:	b293      	uxth	r3, r2
 8006d62:	fb06 e303 	mla	r3, r6, r3, lr
 8006d66:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	ebaa 0303 	sub.w	r3, sl, r3
 8006d70:	f8dc a000 	ldr.w	sl, [ip]
 8006d74:	0c12      	lsrs	r2, r2, #16
 8006d76:	fa13 f38a 	uxtah	r3, r3, sl
 8006d7a:	fb06 e202 	mla	r2, r6, r2, lr
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	9b00      	ldr	r3, [sp, #0]
 8006d82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006d86:	b292      	uxth	r2, r2
 8006d88:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006d8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d90:	f8bd 3000 	ldrh.w	r3, [sp]
 8006d94:	4581      	cmp	r9, r0
 8006d96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d9a:	f84c 3b04 	str.w	r3, [ip], #4
 8006d9e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006da2:	d2db      	bcs.n	8006d5c <quorem+0x44>
 8006da4:	f855 300b 	ldr.w	r3, [r5, fp]
 8006da8:	b92b      	cbnz	r3, 8006db6 <quorem+0x9e>
 8006daa:	9b01      	ldr	r3, [sp, #4]
 8006dac:	3b04      	subs	r3, #4
 8006dae:	429d      	cmp	r5, r3
 8006db0:	461a      	mov	r2, r3
 8006db2:	d32e      	bcc.n	8006e12 <quorem+0xfa>
 8006db4:	613c      	str	r4, [r7, #16]
 8006db6:	4638      	mov	r0, r7
 8006db8:	f001 f9be 	bl	8008138 <__mcmp>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	db24      	blt.n	8006e0a <quorem+0xf2>
 8006dc0:	3601      	adds	r6, #1
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	f04f 0c00 	mov.w	ip, #0
 8006dc8:	f858 2b04 	ldr.w	r2, [r8], #4
 8006dcc:	f8d0 e000 	ldr.w	lr, [r0]
 8006dd0:	b293      	uxth	r3, r2
 8006dd2:	ebac 0303 	sub.w	r3, ip, r3
 8006dd6:	0c12      	lsrs	r2, r2, #16
 8006dd8:	fa13 f38e 	uxtah	r3, r3, lr
 8006ddc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006de0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006dea:	45c1      	cmp	r9, r8
 8006dec:	f840 3b04 	str.w	r3, [r0], #4
 8006df0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006df4:	d2e8      	bcs.n	8006dc8 <quorem+0xb0>
 8006df6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006dfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006dfe:	b922      	cbnz	r2, 8006e0a <quorem+0xf2>
 8006e00:	3b04      	subs	r3, #4
 8006e02:	429d      	cmp	r5, r3
 8006e04:	461a      	mov	r2, r3
 8006e06:	d30a      	bcc.n	8006e1e <quorem+0x106>
 8006e08:	613c      	str	r4, [r7, #16]
 8006e0a:	4630      	mov	r0, r6
 8006e0c:	b003      	add	sp, #12
 8006e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e12:	6812      	ldr	r2, [r2, #0]
 8006e14:	3b04      	subs	r3, #4
 8006e16:	2a00      	cmp	r2, #0
 8006e18:	d1cc      	bne.n	8006db4 <quorem+0x9c>
 8006e1a:	3c01      	subs	r4, #1
 8006e1c:	e7c7      	b.n	8006dae <quorem+0x96>
 8006e1e:	6812      	ldr	r2, [r2, #0]
 8006e20:	3b04      	subs	r3, #4
 8006e22:	2a00      	cmp	r2, #0
 8006e24:	d1f0      	bne.n	8006e08 <quorem+0xf0>
 8006e26:	3c01      	subs	r4, #1
 8006e28:	e7eb      	b.n	8006e02 <quorem+0xea>
 8006e2a:	2000      	movs	r0, #0
 8006e2c:	e7ee      	b.n	8006e0c <quorem+0xf4>
	...

08006e30 <_dtoa_r>:
 8006e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e34:	ed2d 8b04 	vpush	{d8-d9}
 8006e38:	ec57 6b10 	vmov	r6, r7, d0
 8006e3c:	b093      	sub	sp, #76	; 0x4c
 8006e3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006e40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006e44:	9106      	str	r1, [sp, #24]
 8006e46:	ee10 aa10 	vmov	sl, s0
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	9209      	str	r2, [sp, #36]	; 0x24
 8006e4e:	930c      	str	r3, [sp, #48]	; 0x30
 8006e50:	46bb      	mov	fp, r7
 8006e52:	b975      	cbnz	r5, 8006e72 <_dtoa_r+0x42>
 8006e54:	2010      	movs	r0, #16
 8006e56:	f000 fed7 	bl	8007c08 <malloc>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	6260      	str	r0, [r4, #36]	; 0x24
 8006e5e:	b920      	cbnz	r0, 8006e6a <_dtoa_r+0x3a>
 8006e60:	4ba7      	ldr	r3, [pc, #668]	; (8007100 <_dtoa_r+0x2d0>)
 8006e62:	21ea      	movs	r1, #234	; 0xea
 8006e64:	48a7      	ldr	r0, [pc, #668]	; (8007104 <_dtoa_r+0x2d4>)
 8006e66:	f001 fddf 	bl	8008a28 <__assert_func>
 8006e6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006e6e:	6005      	str	r5, [r0, #0]
 8006e70:	60c5      	str	r5, [r0, #12]
 8006e72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e74:	6819      	ldr	r1, [r3, #0]
 8006e76:	b151      	cbz	r1, 8006e8e <_dtoa_r+0x5e>
 8006e78:	685a      	ldr	r2, [r3, #4]
 8006e7a:	604a      	str	r2, [r1, #4]
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	4093      	lsls	r3, r2
 8006e80:	608b      	str	r3, [r1, #8]
 8006e82:	4620      	mov	r0, r4
 8006e84:	f000 ff16 	bl	8007cb4 <_Bfree>
 8006e88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	1e3b      	subs	r3, r7, #0
 8006e90:	bfaa      	itet	ge
 8006e92:	2300      	movge	r3, #0
 8006e94:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006e98:	f8c8 3000 	strge.w	r3, [r8]
 8006e9c:	4b9a      	ldr	r3, [pc, #616]	; (8007108 <_dtoa_r+0x2d8>)
 8006e9e:	bfbc      	itt	lt
 8006ea0:	2201      	movlt	r2, #1
 8006ea2:	f8c8 2000 	strlt.w	r2, [r8]
 8006ea6:	ea33 030b 	bics.w	r3, r3, fp
 8006eaa:	d11b      	bne.n	8006ee4 <_dtoa_r+0xb4>
 8006eac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006eae:	f242 730f 	movw	r3, #9999	; 0x270f
 8006eb2:	6013      	str	r3, [r2, #0]
 8006eb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006eb8:	4333      	orrs	r3, r6
 8006eba:	f000 8592 	beq.w	80079e2 <_dtoa_r+0xbb2>
 8006ebe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ec0:	b963      	cbnz	r3, 8006edc <_dtoa_r+0xac>
 8006ec2:	4b92      	ldr	r3, [pc, #584]	; (800710c <_dtoa_r+0x2dc>)
 8006ec4:	e022      	b.n	8006f0c <_dtoa_r+0xdc>
 8006ec6:	4b92      	ldr	r3, [pc, #584]	; (8007110 <_dtoa_r+0x2e0>)
 8006ec8:	9301      	str	r3, [sp, #4]
 8006eca:	3308      	adds	r3, #8
 8006ecc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006ece:	6013      	str	r3, [r2, #0]
 8006ed0:	9801      	ldr	r0, [sp, #4]
 8006ed2:	b013      	add	sp, #76	; 0x4c
 8006ed4:	ecbd 8b04 	vpop	{d8-d9}
 8006ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006edc:	4b8b      	ldr	r3, [pc, #556]	; (800710c <_dtoa_r+0x2dc>)
 8006ede:	9301      	str	r3, [sp, #4]
 8006ee0:	3303      	adds	r3, #3
 8006ee2:	e7f3      	b.n	8006ecc <_dtoa_r+0x9c>
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	4650      	mov	r0, sl
 8006eea:	4659      	mov	r1, fp
 8006eec:	f7f9 fe04 	bl	8000af8 <__aeabi_dcmpeq>
 8006ef0:	ec4b ab19 	vmov	d9, sl, fp
 8006ef4:	4680      	mov	r8, r0
 8006ef6:	b158      	cbz	r0, 8006f10 <_dtoa_r+0xe0>
 8006ef8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006efa:	2301      	movs	r3, #1
 8006efc:	6013      	str	r3, [r2, #0]
 8006efe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 856b 	beq.w	80079dc <_dtoa_r+0xbac>
 8006f06:	4883      	ldr	r0, [pc, #524]	; (8007114 <_dtoa_r+0x2e4>)
 8006f08:	6018      	str	r0, [r3, #0]
 8006f0a:	1e43      	subs	r3, r0, #1
 8006f0c:	9301      	str	r3, [sp, #4]
 8006f0e:	e7df      	b.n	8006ed0 <_dtoa_r+0xa0>
 8006f10:	ec4b ab10 	vmov	d0, sl, fp
 8006f14:	aa10      	add	r2, sp, #64	; 0x40
 8006f16:	a911      	add	r1, sp, #68	; 0x44
 8006f18:	4620      	mov	r0, r4
 8006f1a:	f001 f9b3 	bl	8008284 <__d2b>
 8006f1e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006f22:	ee08 0a10 	vmov	s16, r0
 8006f26:	2d00      	cmp	r5, #0
 8006f28:	f000 8084 	beq.w	8007034 <_dtoa_r+0x204>
 8006f2c:	ee19 3a90 	vmov	r3, s19
 8006f30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f34:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006f38:	4656      	mov	r6, sl
 8006f3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006f3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006f42:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006f46:	4b74      	ldr	r3, [pc, #464]	; (8007118 <_dtoa_r+0x2e8>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	4630      	mov	r0, r6
 8006f4c:	4639      	mov	r1, r7
 8006f4e:	f7f9 f9b3 	bl	80002b8 <__aeabi_dsub>
 8006f52:	a365      	add	r3, pc, #404	; (adr r3, 80070e8 <_dtoa_r+0x2b8>)
 8006f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f58:	f7f9 fb66 	bl	8000628 <__aeabi_dmul>
 8006f5c:	a364      	add	r3, pc, #400	; (adr r3, 80070f0 <_dtoa_r+0x2c0>)
 8006f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f62:	f7f9 f9ab 	bl	80002bc <__adddf3>
 8006f66:	4606      	mov	r6, r0
 8006f68:	4628      	mov	r0, r5
 8006f6a:	460f      	mov	r7, r1
 8006f6c:	f7f9 faf2 	bl	8000554 <__aeabi_i2d>
 8006f70:	a361      	add	r3, pc, #388	; (adr r3, 80070f8 <_dtoa_r+0x2c8>)
 8006f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f76:	f7f9 fb57 	bl	8000628 <__aeabi_dmul>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	4630      	mov	r0, r6
 8006f80:	4639      	mov	r1, r7
 8006f82:	f7f9 f99b 	bl	80002bc <__adddf3>
 8006f86:	4606      	mov	r6, r0
 8006f88:	460f      	mov	r7, r1
 8006f8a:	f7f9 fdfd 	bl	8000b88 <__aeabi_d2iz>
 8006f8e:	2200      	movs	r2, #0
 8006f90:	9000      	str	r0, [sp, #0]
 8006f92:	2300      	movs	r3, #0
 8006f94:	4630      	mov	r0, r6
 8006f96:	4639      	mov	r1, r7
 8006f98:	f7f9 fdb8 	bl	8000b0c <__aeabi_dcmplt>
 8006f9c:	b150      	cbz	r0, 8006fb4 <_dtoa_r+0x184>
 8006f9e:	9800      	ldr	r0, [sp, #0]
 8006fa0:	f7f9 fad8 	bl	8000554 <__aeabi_i2d>
 8006fa4:	4632      	mov	r2, r6
 8006fa6:	463b      	mov	r3, r7
 8006fa8:	f7f9 fda6 	bl	8000af8 <__aeabi_dcmpeq>
 8006fac:	b910      	cbnz	r0, 8006fb4 <_dtoa_r+0x184>
 8006fae:	9b00      	ldr	r3, [sp, #0]
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	9300      	str	r3, [sp, #0]
 8006fb4:	9b00      	ldr	r3, [sp, #0]
 8006fb6:	2b16      	cmp	r3, #22
 8006fb8:	d85a      	bhi.n	8007070 <_dtoa_r+0x240>
 8006fba:	9a00      	ldr	r2, [sp, #0]
 8006fbc:	4b57      	ldr	r3, [pc, #348]	; (800711c <_dtoa_r+0x2ec>)
 8006fbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc6:	ec51 0b19 	vmov	r0, r1, d9
 8006fca:	f7f9 fd9f 	bl	8000b0c <__aeabi_dcmplt>
 8006fce:	2800      	cmp	r0, #0
 8006fd0:	d050      	beq.n	8007074 <_dtoa_r+0x244>
 8006fd2:	9b00      	ldr	r3, [sp, #0]
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	9300      	str	r3, [sp, #0]
 8006fd8:	2300      	movs	r3, #0
 8006fda:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006fde:	1b5d      	subs	r5, r3, r5
 8006fe0:	1e6b      	subs	r3, r5, #1
 8006fe2:	9305      	str	r3, [sp, #20]
 8006fe4:	bf45      	ittet	mi
 8006fe6:	f1c5 0301 	rsbmi	r3, r5, #1
 8006fea:	9304      	strmi	r3, [sp, #16]
 8006fec:	2300      	movpl	r3, #0
 8006fee:	2300      	movmi	r3, #0
 8006ff0:	bf4c      	ite	mi
 8006ff2:	9305      	strmi	r3, [sp, #20]
 8006ff4:	9304      	strpl	r3, [sp, #16]
 8006ff6:	9b00      	ldr	r3, [sp, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	db3d      	blt.n	8007078 <_dtoa_r+0x248>
 8006ffc:	9b05      	ldr	r3, [sp, #20]
 8006ffe:	9a00      	ldr	r2, [sp, #0]
 8007000:	920a      	str	r2, [sp, #40]	; 0x28
 8007002:	4413      	add	r3, r2
 8007004:	9305      	str	r3, [sp, #20]
 8007006:	2300      	movs	r3, #0
 8007008:	9307      	str	r3, [sp, #28]
 800700a:	9b06      	ldr	r3, [sp, #24]
 800700c:	2b09      	cmp	r3, #9
 800700e:	f200 8089 	bhi.w	8007124 <_dtoa_r+0x2f4>
 8007012:	2b05      	cmp	r3, #5
 8007014:	bfc4      	itt	gt
 8007016:	3b04      	subgt	r3, #4
 8007018:	9306      	strgt	r3, [sp, #24]
 800701a:	9b06      	ldr	r3, [sp, #24]
 800701c:	f1a3 0302 	sub.w	r3, r3, #2
 8007020:	bfcc      	ite	gt
 8007022:	2500      	movgt	r5, #0
 8007024:	2501      	movle	r5, #1
 8007026:	2b03      	cmp	r3, #3
 8007028:	f200 8087 	bhi.w	800713a <_dtoa_r+0x30a>
 800702c:	e8df f003 	tbb	[pc, r3]
 8007030:	59383a2d 	.word	0x59383a2d
 8007034:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007038:	441d      	add	r5, r3
 800703a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800703e:	2b20      	cmp	r3, #32
 8007040:	bfc1      	itttt	gt
 8007042:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007046:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800704a:	fa0b f303 	lslgt.w	r3, fp, r3
 800704e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007052:	bfda      	itte	le
 8007054:	f1c3 0320 	rsble	r3, r3, #32
 8007058:	fa06 f003 	lslle.w	r0, r6, r3
 800705c:	4318      	orrgt	r0, r3
 800705e:	f7f9 fa69 	bl	8000534 <__aeabi_ui2d>
 8007062:	2301      	movs	r3, #1
 8007064:	4606      	mov	r6, r0
 8007066:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800706a:	3d01      	subs	r5, #1
 800706c:	930e      	str	r3, [sp, #56]	; 0x38
 800706e:	e76a      	b.n	8006f46 <_dtoa_r+0x116>
 8007070:	2301      	movs	r3, #1
 8007072:	e7b2      	b.n	8006fda <_dtoa_r+0x1aa>
 8007074:	900b      	str	r0, [sp, #44]	; 0x2c
 8007076:	e7b1      	b.n	8006fdc <_dtoa_r+0x1ac>
 8007078:	9b04      	ldr	r3, [sp, #16]
 800707a:	9a00      	ldr	r2, [sp, #0]
 800707c:	1a9b      	subs	r3, r3, r2
 800707e:	9304      	str	r3, [sp, #16]
 8007080:	4253      	negs	r3, r2
 8007082:	9307      	str	r3, [sp, #28]
 8007084:	2300      	movs	r3, #0
 8007086:	930a      	str	r3, [sp, #40]	; 0x28
 8007088:	e7bf      	b.n	800700a <_dtoa_r+0x1da>
 800708a:	2300      	movs	r3, #0
 800708c:	9308      	str	r3, [sp, #32]
 800708e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007090:	2b00      	cmp	r3, #0
 8007092:	dc55      	bgt.n	8007140 <_dtoa_r+0x310>
 8007094:	2301      	movs	r3, #1
 8007096:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800709a:	461a      	mov	r2, r3
 800709c:	9209      	str	r2, [sp, #36]	; 0x24
 800709e:	e00c      	b.n	80070ba <_dtoa_r+0x28a>
 80070a0:	2301      	movs	r3, #1
 80070a2:	e7f3      	b.n	800708c <_dtoa_r+0x25c>
 80070a4:	2300      	movs	r3, #0
 80070a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070a8:	9308      	str	r3, [sp, #32]
 80070aa:	9b00      	ldr	r3, [sp, #0]
 80070ac:	4413      	add	r3, r2
 80070ae:	9302      	str	r3, [sp, #8]
 80070b0:	3301      	adds	r3, #1
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	9303      	str	r3, [sp, #12]
 80070b6:	bfb8      	it	lt
 80070b8:	2301      	movlt	r3, #1
 80070ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80070bc:	2200      	movs	r2, #0
 80070be:	6042      	str	r2, [r0, #4]
 80070c0:	2204      	movs	r2, #4
 80070c2:	f102 0614 	add.w	r6, r2, #20
 80070c6:	429e      	cmp	r6, r3
 80070c8:	6841      	ldr	r1, [r0, #4]
 80070ca:	d93d      	bls.n	8007148 <_dtoa_r+0x318>
 80070cc:	4620      	mov	r0, r4
 80070ce:	f000 fdb1 	bl	8007c34 <_Balloc>
 80070d2:	9001      	str	r0, [sp, #4]
 80070d4:	2800      	cmp	r0, #0
 80070d6:	d13b      	bne.n	8007150 <_dtoa_r+0x320>
 80070d8:	4b11      	ldr	r3, [pc, #68]	; (8007120 <_dtoa_r+0x2f0>)
 80070da:	4602      	mov	r2, r0
 80070dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80070e0:	e6c0      	b.n	8006e64 <_dtoa_r+0x34>
 80070e2:	2301      	movs	r3, #1
 80070e4:	e7df      	b.n	80070a6 <_dtoa_r+0x276>
 80070e6:	bf00      	nop
 80070e8:	636f4361 	.word	0x636f4361
 80070ec:	3fd287a7 	.word	0x3fd287a7
 80070f0:	8b60c8b3 	.word	0x8b60c8b3
 80070f4:	3fc68a28 	.word	0x3fc68a28
 80070f8:	509f79fb 	.word	0x509f79fb
 80070fc:	3fd34413 	.word	0x3fd34413
 8007100:	08008f69 	.word	0x08008f69
 8007104:	08008f80 	.word	0x08008f80
 8007108:	7ff00000 	.word	0x7ff00000
 800710c:	08008f65 	.word	0x08008f65
 8007110:	08008f5c 	.word	0x08008f5c
 8007114:	08008f39 	.word	0x08008f39
 8007118:	3ff80000 	.word	0x3ff80000
 800711c:	080090d0 	.word	0x080090d0
 8007120:	08008fdb 	.word	0x08008fdb
 8007124:	2501      	movs	r5, #1
 8007126:	2300      	movs	r3, #0
 8007128:	9306      	str	r3, [sp, #24]
 800712a:	9508      	str	r5, [sp, #32]
 800712c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007130:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007134:	2200      	movs	r2, #0
 8007136:	2312      	movs	r3, #18
 8007138:	e7b0      	b.n	800709c <_dtoa_r+0x26c>
 800713a:	2301      	movs	r3, #1
 800713c:	9308      	str	r3, [sp, #32]
 800713e:	e7f5      	b.n	800712c <_dtoa_r+0x2fc>
 8007140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007142:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007146:	e7b8      	b.n	80070ba <_dtoa_r+0x28a>
 8007148:	3101      	adds	r1, #1
 800714a:	6041      	str	r1, [r0, #4]
 800714c:	0052      	lsls	r2, r2, #1
 800714e:	e7b8      	b.n	80070c2 <_dtoa_r+0x292>
 8007150:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007152:	9a01      	ldr	r2, [sp, #4]
 8007154:	601a      	str	r2, [r3, #0]
 8007156:	9b03      	ldr	r3, [sp, #12]
 8007158:	2b0e      	cmp	r3, #14
 800715a:	f200 809d 	bhi.w	8007298 <_dtoa_r+0x468>
 800715e:	2d00      	cmp	r5, #0
 8007160:	f000 809a 	beq.w	8007298 <_dtoa_r+0x468>
 8007164:	9b00      	ldr	r3, [sp, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	dd32      	ble.n	80071d0 <_dtoa_r+0x3a0>
 800716a:	4ab7      	ldr	r2, [pc, #732]	; (8007448 <_dtoa_r+0x618>)
 800716c:	f003 030f 	and.w	r3, r3, #15
 8007170:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007174:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007178:	9b00      	ldr	r3, [sp, #0]
 800717a:	05d8      	lsls	r0, r3, #23
 800717c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007180:	d516      	bpl.n	80071b0 <_dtoa_r+0x380>
 8007182:	4bb2      	ldr	r3, [pc, #712]	; (800744c <_dtoa_r+0x61c>)
 8007184:	ec51 0b19 	vmov	r0, r1, d9
 8007188:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800718c:	f7f9 fb76 	bl	800087c <__aeabi_ddiv>
 8007190:	f007 070f 	and.w	r7, r7, #15
 8007194:	4682      	mov	sl, r0
 8007196:	468b      	mov	fp, r1
 8007198:	2503      	movs	r5, #3
 800719a:	4eac      	ldr	r6, [pc, #688]	; (800744c <_dtoa_r+0x61c>)
 800719c:	b957      	cbnz	r7, 80071b4 <_dtoa_r+0x384>
 800719e:	4642      	mov	r2, r8
 80071a0:	464b      	mov	r3, r9
 80071a2:	4650      	mov	r0, sl
 80071a4:	4659      	mov	r1, fp
 80071a6:	f7f9 fb69 	bl	800087c <__aeabi_ddiv>
 80071aa:	4682      	mov	sl, r0
 80071ac:	468b      	mov	fp, r1
 80071ae:	e028      	b.n	8007202 <_dtoa_r+0x3d2>
 80071b0:	2502      	movs	r5, #2
 80071b2:	e7f2      	b.n	800719a <_dtoa_r+0x36a>
 80071b4:	07f9      	lsls	r1, r7, #31
 80071b6:	d508      	bpl.n	80071ca <_dtoa_r+0x39a>
 80071b8:	4640      	mov	r0, r8
 80071ba:	4649      	mov	r1, r9
 80071bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80071c0:	f7f9 fa32 	bl	8000628 <__aeabi_dmul>
 80071c4:	3501      	adds	r5, #1
 80071c6:	4680      	mov	r8, r0
 80071c8:	4689      	mov	r9, r1
 80071ca:	107f      	asrs	r7, r7, #1
 80071cc:	3608      	adds	r6, #8
 80071ce:	e7e5      	b.n	800719c <_dtoa_r+0x36c>
 80071d0:	f000 809b 	beq.w	800730a <_dtoa_r+0x4da>
 80071d4:	9b00      	ldr	r3, [sp, #0]
 80071d6:	4f9d      	ldr	r7, [pc, #628]	; (800744c <_dtoa_r+0x61c>)
 80071d8:	425e      	negs	r6, r3
 80071da:	4b9b      	ldr	r3, [pc, #620]	; (8007448 <_dtoa_r+0x618>)
 80071dc:	f006 020f 	and.w	r2, r6, #15
 80071e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e8:	ec51 0b19 	vmov	r0, r1, d9
 80071ec:	f7f9 fa1c 	bl	8000628 <__aeabi_dmul>
 80071f0:	1136      	asrs	r6, r6, #4
 80071f2:	4682      	mov	sl, r0
 80071f4:	468b      	mov	fp, r1
 80071f6:	2300      	movs	r3, #0
 80071f8:	2502      	movs	r5, #2
 80071fa:	2e00      	cmp	r6, #0
 80071fc:	d17a      	bne.n	80072f4 <_dtoa_r+0x4c4>
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1d3      	bne.n	80071aa <_dtoa_r+0x37a>
 8007202:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 8082 	beq.w	800730e <_dtoa_r+0x4de>
 800720a:	4b91      	ldr	r3, [pc, #580]	; (8007450 <_dtoa_r+0x620>)
 800720c:	2200      	movs	r2, #0
 800720e:	4650      	mov	r0, sl
 8007210:	4659      	mov	r1, fp
 8007212:	f7f9 fc7b 	bl	8000b0c <__aeabi_dcmplt>
 8007216:	2800      	cmp	r0, #0
 8007218:	d079      	beq.n	800730e <_dtoa_r+0x4de>
 800721a:	9b03      	ldr	r3, [sp, #12]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d076      	beq.n	800730e <_dtoa_r+0x4de>
 8007220:	9b02      	ldr	r3, [sp, #8]
 8007222:	2b00      	cmp	r3, #0
 8007224:	dd36      	ble.n	8007294 <_dtoa_r+0x464>
 8007226:	9b00      	ldr	r3, [sp, #0]
 8007228:	4650      	mov	r0, sl
 800722a:	4659      	mov	r1, fp
 800722c:	1e5f      	subs	r7, r3, #1
 800722e:	2200      	movs	r2, #0
 8007230:	4b88      	ldr	r3, [pc, #544]	; (8007454 <_dtoa_r+0x624>)
 8007232:	f7f9 f9f9 	bl	8000628 <__aeabi_dmul>
 8007236:	9e02      	ldr	r6, [sp, #8]
 8007238:	4682      	mov	sl, r0
 800723a:	468b      	mov	fp, r1
 800723c:	3501      	adds	r5, #1
 800723e:	4628      	mov	r0, r5
 8007240:	f7f9 f988 	bl	8000554 <__aeabi_i2d>
 8007244:	4652      	mov	r2, sl
 8007246:	465b      	mov	r3, fp
 8007248:	f7f9 f9ee 	bl	8000628 <__aeabi_dmul>
 800724c:	4b82      	ldr	r3, [pc, #520]	; (8007458 <_dtoa_r+0x628>)
 800724e:	2200      	movs	r2, #0
 8007250:	f7f9 f834 	bl	80002bc <__adddf3>
 8007254:	46d0      	mov	r8, sl
 8007256:	46d9      	mov	r9, fp
 8007258:	4682      	mov	sl, r0
 800725a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800725e:	2e00      	cmp	r6, #0
 8007260:	d158      	bne.n	8007314 <_dtoa_r+0x4e4>
 8007262:	4b7e      	ldr	r3, [pc, #504]	; (800745c <_dtoa_r+0x62c>)
 8007264:	2200      	movs	r2, #0
 8007266:	4640      	mov	r0, r8
 8007268:	4649      	mov	r1, r9
 800726a:	f7f9 f825 	bl	80002b8 <__aeabi_dsub>
 800726e:	4652      	mov	r2, sl
 8007270:	465b      	mov	r3, fp
 8007272:	4680      	mov	r8, r0
 8007274:	4689      	mov	r9, r1
 8007276:	f7f9 fc67 	bl	8000b48 <__aeabi_dcmpgt>
 800727a:	2800      	cmp	r0, #0
 800727c:	f040 8295 	bne.w	80077aa <_dtoa_r+0x97a>
 8007280:	4652      	mov	r2, sl
 8007282:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007286:	4640      	mov	r0, r8
 8007288:	4649      	mov	r1, r9
 800728a:	f7f9 fc3f 	bl	8000b0c <__aeabi_dcmplt>
 800728e:	2800      	cmp	r0, #0
 8007290:	f040 8289 	bne.w	80077a6 <_dtoa_r+0x976>
 8007294:	ec5b ab19 	vmov	sl, fp, d9
 8007298:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800729a:	2b00      	cmp	r3, #0
 800729c:	f2c0 8148 	blt.w	8007530 <_dtoa_r+0x700>
 80072a0:	9a00      	ldr	r2, [sp, #0]
 80072a2:	2a0e      	cmp	r2, #14
 80072a4:	f300 8144 	bgt.w	8007530 <_dtoa_r+0x700>
 80072a8:	4b67      	ldr	r3, [pc, #412]	; (8007448 <_dtoa_r+0x618>)
 80072aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80072b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f280 80d5 	bge.w	8007464 <_dtoa_r+0x634>
 80072ba:	9b03      	ldr	r3, [sp, #12]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f300 80d1 	bgt.w	8007464 <_dtoa_r+0x634>
 80072c2:	f040 826f 	bne.w	80077a4 <_dtoa_r+0x974>
 80072c6:	4b65      	ldr	r3, [pc, #404]	; (800745c <_dtoa_r+0x62c>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	4640      	mov	r0, r8
 80072cc:	4649      	mov	r1, r9
 80072ce:	f7f9 f9ab 	bl	8000628 <__aeabi_dmul>
 80072d2:	4652      	mov	r2, sl
 80072d4:	465b      	mov	r3, fp
 80072d6:	f7f9 fc2d 	bl	8000b34 <__aeabi_dcmpge>
 80072da:	9e03      	ldr	r6, [sp, #12]
 80072dc:	4637      	mov	r7, r6
 80072de:	2800      	cmp	r0, #0
 80072e0:	f040 8245 	bne.w	800776e <_dtoa_r+0x93e>
 80072e4:	9d01      	ldr	r5, [sp, #4]
 80072e6:	2331      	movs	r3, #49	; 0x31
 80072e8:	f805 3b01 	strb.w	r3, [r5], #1
 80072ec:	9b00      	ldr	r3, [sp, #0]
 80072ee:	3301      	adds	r3, #1
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	e240      	b.n	8007776 <_dtoa_r+0x946>
 80072f4:	07f2      	lsls	r2, r6, #31
 80072f6:	d505      	bpl.n	8007304 <_dtoa_r+0x4d4>
 80072f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072fc:	f7f9 f994 	bl	8000628 <__aeabi_dmul>
 8007300:	3501      	adds	r5, #1
 8007302:	2301      	movs	r3, #1
 8007304:	1076      	asrs	r6, r6, #1
 8007306:	3708      	adds	r7, #8
 8007308:	e777      	b.n	80071fa <_dtoa_r+0x3ca>
 800730a:	2502      	movs	r5, #2
 800730c:	e779      	b.n	8007202 <_dtoa_r+0x3d2>
 800730e:	9f00      	ldr	r7, [sp, #0]
 8007310:	9e03      	ldr	r6, [sp, #12]
 8007312:	e794      	b.n	800723e <_dtoa_r+0x40e>
 8007314:	9901      	ldr	r1, [sp, #4]
 8007316:	4b4c      	ldr	r3, [pc, #304]	; (8007448 <_dtoa_r+0x618>)
 8007318:	4431      	add	r1, r6
 800731a:	910d      	str	r1, [sp, #52]	; 0x34
 800731c:	9908      	ldr	r1, [sp, #32]
 800731e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007322:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007326:	2900      	cmp	r1, #0
 8007328:	d043      	beq.n	80073b2 <_dtoa_r+0x582>
 800732a:	494d      	ldr	r1, [pc, #308]	; (8007460 <_dtoa_r+0x630>)
 800732c:	2000      	movs	r0, #0
 800732e:	f7f9 faa5 	bl	800087c <__aeabi_ddiv>
 8007332:	4652      	mov	r2, sl
 8007334:	465b      	mov	r3, fp
 8007336:	f7f8 ffbf 	bl	80002b8 <__aeabi_dsub>
 800733a:	9d01      	ldr	r5, [sp, #4]
 800733c:	4682      	mov	sl, r0
 800733e:	468b      	mov	fp, r1
 8007340:	4649      	mov	r1, r9
 8007342:	4640      	mov	r0, r8
 8007344:	f7f9 fc20 	bl	8000b88 <__aeabi_d2iz>
 8007348:	4606      	mov	r6, r0
 800734a:	f7f9 f903 	bl	8000554 <__aeabi_i2d>
 800734e:	4602      	mov	r2, r0
 8007350:	460b      	mov	r3, r1
 8007352:	4640      	mov	r0, r8
 8007354:	4649      	mov	r1, r9
 8007356:	f7f8 ffaf 	bl	80002b8 <__aeabi_dsub>
 800735a:	3630      	adds	r6, #48	; 0x30
 800735c:	f805 6b01 	strb.w	r6, [r5], #1
 8007360:	4652      	mov	r2, sl
 8007362:	465b      	mov	r3, fp
 8007364:	4680      	mov	r8, r0
 8007366:	4689      	mov	r9, r1
 8007368:	f7f9 fbd0 	bl	8000b0c <__aeabi_dcmplt>
 800736c:	2800      	cmp	r0, #0
 800736e:	d163      	bne.n	8007438 <_dtoa_r+0x608>
 8007370:	4642      	mov	r2, r8
 8007372:	464b      	mov	r3, r9
 8007374:	4936      	ldr	r1, [pc, #216]	; (8007450 <_dtoa_r+0x620>)
 8007376:	2000      	movs	r0, #0
 8007378:	f7f8 ff9e 	bl	80002b8 <__aeabi_dsub>
 800737c:	4652      	mov	r2, sl
 800737e:	465b      	mov	r3, fp
 8007380:	f7f9 fbc4 	bl	8000b0c <__aeabi_dcmplt>
 8007384:	2800      	cmp	r0, #0
 8007386:	f040 80b5 	bne.w	80074f4 <_dtoa_r+0x6c4>
 800738a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800738c:	429d      	cmp	r5, r3
 800738e:	d081      	beq.n	8007294 <_dtoa_r+0x464>
 8007390:	4b30      	ldr	r3, [pc, #192]	; (8007454 <_dtoa_r+0x624>)
 8007392:	2200      	movs	r2, #0
 8007394:	4650      	mov	r0, sl
 8007396:	4659      	mov	r1, fp
 8007398:	f7f9 f946 	bl	8000628 <__aeabi_dmul>
 800739c:	4b2d      	ldr	r3, [pc, #180]	; (8007454 <_dtoa_r+0x624>)
 800739e:	4682      	mov	sl, r0
 80073a0:	468b      	mov	fp, r1
 80073a2:	4640      	mov	r0, r8
 80073a4:	4649      	mov	r1, r9
 80073a6:	2200      	movs	r2, #0
 80073a8:	f7f9 f93e 	bl	8000628 <__aeabi_dmul>
 80073ac:	4680      	mov	r8, r0
 80073ae:	4689      	mov	r9, r1
 80073b0:	e7c6      	b.n	8007340 <_dtoa_r+0x510>
 80073b2:	4650      	mov	r0, sl
 80073b4:	4659      	mov	r1, fp
 80073b6:	f7f9 f937 	bl	8000628 <__aeabi_dmul>
 80073ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073bc:	9d01      	ldr	r5, [sp, #4]
 80073be:	930f      	str	r3, [sp, #60]	; 0x3c
 80073c0:	4682      	mov	sl, r0
 80073c2:	468b      	mov	fp, r1
 80073c4:	4649      	mov	r1, r9
 80073c6:	4640      	mov	r0, r8
 80073c8:	f7f9 fbde 	bl	8000b88 <__aeabi_d2iz>
 80073cc:	4606      	mov	r6, r0
 80073ce:	f7f9 f8c1 	bl	8000554 <__aeabi_i2d>
 80073d2:	3630      	adds	r6, #48	; 0x30
 80073d4:	4602      	mov	r2, r0
 80073d6:	460b      	mov	r3, r1
 80073d8:	4640      	mov	r0, r8
 80073da:	4649      	mov	r1, r9
 80073dc:	f7f8 ff6c 	bl	80002b8 <__aeabi_dsub>
 80073e0:	f805 6b01 	strb.w	r6, [r5], #1
 80073e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073e6:	429d      	cmp	r5, r3
 80073e8:	4680      	mov	r8, r0
 80073ea:	4689      	mov	r9, r1
 80073ec:	f04f 0200 	mov.w	r2, #0
 80073f0:	d124      	bne.n	800743c <_dtoa_r+0x60c>
 80073f2:	4b1b      	ldr	r3, [pc, #108]	; (8007460 <_dtoa_r+0x630>)
 80073f4:	4650      	mov	r0, sl
 80073f6:	4659      	mov	r1, fp
 80073f8:	f7f8 ff60 	bl	80002bc <__adddf3>
 80073fc:	4602      	mov	r2, r0
 80073fe:	460b      	mov	r3, r1
 8007400:	4640      	mov	r0, r8
 8007402:	4649      	mov	r1, r9
 8007404:	f7f9 fba0 	bl	8000b48 <__aeabi_dcmpgt>
 8007408:	2800      	cmp	r0, #0
 800740a:	d173      	bne.n	80074f4 <_dtoa_r+0x6c4>
 800740c:	4652      	mov	r2, sl
 800740e:	465b      	mov	r3, fp
 8007410:	4913      	ldr	r1, [pc, #76]	; (8007460 <_dtoa_r+0x630>)
 8007412:	2000      	movs	r0, #0
 8007414:	f7f8 ff50 	bl	80002b8 <__aeabi_dsub>
 8007418:	4602      	mov	r2, r0
 800741a:	460b      	mov	r3, r1
 800741c:	4640      	mov	r0, r8
 800741e:	4649      	mov	r1, r9
 8007420:	f7f9 fb74 	bl	8000b0c <__aeabi_dcmplt>
 8007424:	2800      	cmp	r0, #0
 8007426:	f43f af35 	beq.w	8007294 <_dtoa_r+0x464>
 800742a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800742c:	1e6b      	subs	r3, r5, #1
 800742e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007430:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007434:	2b30      	cmp	r3, #48	; 0x30
 8007436:	d0f8      	beq.n	800742a <_dtoa_r+0x5fa>
 8007438:	9700      	str	r7, [sp, #0]
 800743a:	e049      	b.n	80074d0 <_dtoa_r+0x6a0>
 800743c:	4b05      	ldr	r3, [pc, #20]	; (8007454 <_dtoa_r+0x624>)
 800743e:	f7f9 f8f3 	bl	8000628 <__aeabi_dmul>
 8007442:	4680      	mov	r8, r0
 8007444:	4689      	mov	r9, r1
 8007446:	e7bd      	b.n	80073c4 <_dtoa_r+0x594>
 8007448:	080090d0 	.word	0x080090d0
 800744c:	080090a8 	.word	0x080090a8
 8007450:	3ff00000 	.word	0x3ff00000
 8007454:	40240000 	.word	0x40240000
 8007458:	401c0000 	.word	0x401c0000
 800745c:	40140000 	.word	0x40140000
 8007460:	3fe00000 	.word	0x3fe00000
 8007464:	9d01      	ldr	r5, [sp, #4]
 8007466:	4656      	mov	r6, sl
 8007468:	465f      	mov	r7, fp
 800746a:	4642      	mov	r2, r8
 800746c:	464b      	mov	r3, r9
 800746e:	4630      	mov	r0, r6
 8007470:	4639      	mov	r1, r7
 8007472:	f7f9 fa03 	bl	800087c <__aeabi_ddiv>
 8007476:	f7f9 fb87 	bl	8000b88 <__aeabi_d2iz>
 800747a:	4682      	mov	sl, r0
 800747c:	f7f9 f86a 	bl	8000554 <__aeabi_i2d>
 8007480:	4642      	mov	r2, r8
 8007482:	464b      	mov	r3, r9
 8007484:	f7f9 f8d0 	bl	8000628 <__aeabi_dmul>
 8007488:	4602      	mov	r2, r0
 800748a:	460b      	mov	r3, r1
 800748c:	4630      	mov	r0, r6
 800748e:	4639      	mov	r1, r7
 8007490:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007494:	f7f8 ff10 	bl	80002b8 <__aeabi_dsub>
 8007498:	f805 6b01 	strb.w	r6, [r5], #1
 800749c:	9e01      	ldr	r6, [sp, #4]
 800749e:	9f03      	ldr	r7, [sp, #12]
 80074a0:	1bae      	subs	r6, r5, r6
 80074a2:	42b7      	cmp	r7, r6
 80074a4:	4602      	mov	r2, r0
 80074a6:	460b      	mov	r3, r1
 80074a8:	d135      	bne.n	8007516 <_dtoa_r+0x6e6>
 80074aa:	f7f8 ff07 	bl	80002bc <__adddf3>
 80074ae:	4642      	mov	r2, r8
 80074b0:	464b      	mov	r3, r9
 80074b2:	4606      	mov	r6, r0
 80074b4:	460f      	mov	r7, r1
 80074b6:	f7f9 fb47 	bl	8000b48 <__aeabi_dcmpgt>
 80074ba:	b9d0      	cbnz	r0, 80074f2 <_dtoa_r+0x6c2>
 80074bc:	4642      	mov	r2, r8
 80074be:	464b      	mov	r3, r9
 80074c0:	4630      	mov	r0, r6
 80074c2:	4639      	mov	r1, r7
 80074c4:	f7f9 fb18 	bl	8000af8 <__aeabi_dcmpeq>
 80074c8:	b110      	cbz	r0, 80074d0 <_dtoa_r+0x6a0>
 80074ca:	f01a 0f01 	tst.w	sl, #1
 80074ce:	d110      	bne.n	80074f2 <_dtoa_r+0x6c2>
 80074d0:	4620      	mov	r0, r4
 80074d2:	ee18 1a10 	vmov	r1, s16
 80074d6:	f000 fbed 	bl	8007cb4 <_Bfree>
 80074da:	2300      	movs	r3, #0
 80074dc:	9800      	ldr	r0, [sp, #0]
 80074de:	702b      	strb	r3, [r5, #0]
 80074e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074e2:	3001      	adds	r0, #1
 80074e4:	6018      	str	r0, [r3, #0]
 80074e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f43f acf1 	beq.w	8006ed0 <_dtoa_r+0xa0>
 80074ee:	601d      	str	r5, [r3, #0]
 80074f0:	e4ee      	b.n	8006ed0 <_dtoa_r+0xa0>
 80074f2:	9f00      	ldr	r7, [sp, #0]
 80074f4:	462b      	mov	r3, r5
 80074f6:	461d      	mov	r5, r3
 80074f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074fc:	2a39      	cmp	r2, #57	; 0x39
 80074fe:	d106      	bne.n	800750e <_dtoa_r+0x6de>
 8007500:	9a01      	ldr	r2, [sp, #4]
 8007502:	429a      	cmp	r2, r3
 8007504:	d1f7      	bne.n	80074f6 <_dtoa_r+0x6c6>
 8007506:	9901      	ldr	r1, [sp, #4]
 8007508:	2230      	movs	r2, #48	; 0x30
 800750a:	3701      	adds	r7, #1
 800750c:	700a      	strb	r2, [r1, #0]
 800750e:	781a      	ldrb	r2, [r3, #0]
 8007510:	3201      	adds	r2, #1
 8007512:	701a      	strb	r2, [r3, #0]
 8007514:	e790      	b.n	8007438 <_dtoa_r+0x608>
 8007516:	4ba6      	ldr	r3, [pc, #664]	; (80077b0 <_dtoa_r+0x980>)
 8007518:	2200      	movs	r2, #0
 800751a:	f7f9 f885 	bl	8000628 <__aeabi_dmul>
 800751e:	2200      	movs	r2, #0
 8007520:	2300      	movs	r3, #0
 8007522:	4606      	mov	r6, r0
 8007524:	460f      	mov	r7, r1
 8007526:	f7f9 fae7 	bl	8000af8 <__aeabi_dcmpeq>
 800752a:	2800      	cmp	r0, #0
 800752c:	d09d      	beq.n	800746a <_dtoa_r+0x63a>
 800752e:	e7cf      	b.n	80074d0 <_dtoa_r+0x6a0>
 8007530:	9a08      	ldr	r2, [sp, #32]
 8007532:	2a00      	cmp	r2, #0
 8007534:	f000 80d7 	beq.w	80076e6 <_dtoa_r+0x8b6>
 8007538:	9a06      	ldr	r2, [sp, #24]
 800753a:	2a01      	cmp	r2, #1
 800753c:	f300 80ba 	bgt.w	80076b4 <_dtoa_r+0x884>
 8007540:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007542:	2a00      	cmp	r2, #0
 8007544:	f000 80b2 	beq.w	80076ac <_dtoa_r+0x87c>
 8007548:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800754c:	9e07      	ldr	r6, [sp, #28]
 800754e:	9d04      	ldr	r5, [sp, #16]
 8007550:	9a04      	ldr	r2, [sp, #16]
 8007552:	441a      	add	r2, r3
 8007554:	9204      	str	r2, [sp, #16]
 8007556:	9a05      	ldr	r2, [sp, #20]
 8007558:	2101      	movs	r1, #1
 800755a:	441a      	add	r2, r3
 800755c:	4620      	mov	r0, r4
 800755e:	9205      	str	r2, [sp, #20]
 8007560:	f000 fc60 	bl	8007e24 <__i2b>
 8007564:	4607      	mov	r7, r0
 8007566:	2d00      	cmp	r5, #0
 8007568:	dd0c      	ble.n	8007584 <_dtoa_r+0x754>
 800756a:	9b05      	ldr	r3, [sp, #20]
 800756c:	2b00      	cmp	r3, #0
 800756e:	dd09      	ble.n	8007584 <_dtoa_r+0x754>
 8007570:	42ab      	cmp	r3, r5
 8007572:	9a04      	ldr	r2, [sp, #16]
 8007574:	bfa8      	it	ge
 8007576:	462b      	movge	r3, r5
 8007578:	1ad2      	subs	r2, r2, r3
 800757a:	9204      	str	r2, [sp, #16]
 800757c:	9a05      	ldr	r2, [sp, #20]
 800757e:	1aed      	subs	r5, r5, r3
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	9305      	str	r3, [sp, #20]
 8007584:	9b07      	ldr	r3, [sp, #28]
 8007586:	b31b      	cbz	r3, 80075d0 <_dtoa_r+0x7a0>
 8007588:	9b08      	ldr	r3, [sp, #32]
 800758a:	2b00      	cmp	r3, #0
 800758c:	f000 80af 	beq.w	80076ee <_dtoa_r+0x8be>
 8007590:	2e00      	cmp	r6, #0
 8007592:	dd13      	ble.n	80075bc <_dtoa_r+0x78c>
 8007594:	4639      	mov	r1, r7
 8007596:	4632      	mov	r2, r6
 8007598:	4620      	mov	r0, r4
 800759a:	f000 fd03 	bl	8007fa4 <__pow5mult>
 800759e:	ee18 2a10 	vmov	r2, s16
 80075a2:	4601      	mov	r1, r0
 80075a4:	4607      	mov	r7, r0
 80075a6:	4620      	mov	r0, r4
 80075a8:	f000 fc52 	bl	8007e50 <__multiply>
 80075ac:	ee18 1a10 	vmov	r1, s16
 80075b0:	4680      	mov	r8, r0
 80075b2:	4620      	mov	r0, r4
 80075b4:	f000 fb7e 	bl	8007cb4 <_Bfree>
 80075b8:	ee08 8a10 	vmov	s16, r8
 80075bc:	9b07      	ldr	r3, [sp, #28]
 80075be:	1b9a      	subs	r2, r3, r6
 80075c0:	d006      	beq.n	80075d0 <_dtoa_r+0x7a0>
 80075c2:	ee18 1a10 	vmov	r1, s16
 80075c6:	4620      	mov	r0, r4
 80075c8:	f000 fcec 	bl	8007fa4 <__pow5mult>
 80075cc:	ee08 0a10 	vmov	s16, r0
 80075d0:	2101      	movs	r1, #1
 80075d2:	4620      	mov	r0, r4
 80075d4:	f000 fc26 	bl	8007e24 <__i2b>
 80075d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075da:	2b00      	cmp	r3, #0
 80075dc:	4606      	mov	r6, r0
 80075de:	f340 8088 	ble.w	80076f2 <_dtoa_r+0x8c2>
 80075e2:	461a      	mov	r2, r3
 80075e4:	4601      	mov	r1, r0
 80075e6:	4620      	mov	r0, r4
 80075e8:	f000 fcdc 	bl	8007fa4 <__pow5mult>
 80075ec:	9b06      	ldr	r3, [sp, #24]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	4606      	mov	r6, r0
 80075f2:	f340 8081 	ble.w	80076f8 <_dtoa_r+0x8c8>
 80075f6:	f04f 0800 	mov.w	r8, #0
 80075fa:	6933      	ldr	r3, [r6, #16]
 80075fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007600:	6918      	ldr	r0, [r3, #16]
 8007602:	f000 fbbf 	bl	8007d84 <__hi0bits>
 8007606:	f1c0 0020 	rsb	r0, r0, #32
 800760a:	9b05      	ldr	r3, [sp, #20]
 800760c:	4418      	add	r0, r3
 800760e:	f010 001f 	ands.w	r0, r0, #31
 8007612:	f000 8092 	beq.w	800773a <_dtoa_r+0x90a>
 8007616:	f1c0 0320 	rsb	r3, r0, #32
 800761a:	2b04      	cmp	r3, #4
 800761c:	f340 808a 	ble.w	8007734 <_dtoa_r+0x904>
 8007620:	f1c0 001c 	rsb	r0, r0, #28
 8007624:	9b04      	ldr	r3, [sp, #16]
 8007626:	4403      	add	r3, r0
 8007628:	9304      	str	r3, [sp, #16]
 800762a:	9b05      	ldr	r3, [sp, #20]
 800762c:	4403      	add	r3, r0
 800762e:	4405      	add	r5, r0
 8007630:	9305      	str	r3, [sp, #20]
 8007632:	9b04      	ldr	r3, [sp, #16]
 8007634:	2b00      	cmp	r3, #0
 8007636:	dd07      	ble.n	8007648 <_dtoa_r+0x818>
 8007638:	ee18 1a10 	vmov	r1, s16
 800763c:	461a      	mov	r2, r3
 800763e:	4620      	mov	r0, r4
 8007640:	f000 fd0a 	bl	8008058 <__lshift>
 8007644:	ee08 0a10 	vmov	s16, r0
 8007648:	9b05      	ldr	r3, [sp, #20]
 800764a:	2b00      	cmp	r3, #0
 800764c:	dd05      	ble.n	800765a <_dtoa_r+0x82a>
 800764e:	4631      	mov	r1, r6
 8007650:	461a      	mov	r2, r3
 8007652:	4620      	mov	r0, r4
 8007654:	f000 fd00 	bl	8008058 <__lshift>
 8007658:	4606      	mov	r6, r0
 800765a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800765c:	2b00      	cmp	r3, #0
 800765e:	d06e      	beq.n	800773e <_dtoa_r+0x90e>
 8007660:	ee18 0a10 	vmov	r0, s16
 8007664:	4631      	mov	r1, r6
 8007666:	f000 fd67 	bl	8008138 <__mcmp>
 800766a:	2800      	cmp	r0, #0
 800766c:	da67      	bge.n	800773e <_dtoa_r+0x90e>
 800766e:	9b00      	ldr	r3, [sp, #0]
 8007670:	3b01      	subs	r3, #1
 8007672:	ee18 1a10 	vmov	r1, s16
 8007676:	9300      	str	r3, [sp, #0]
 8007678:	220a      	movs	r2, #10
 800767a:	2300      	movs	r3, #0
 800767c:	4620      	mov	r0, r4
 800767e:	f000 fb3b 	bl	8007cf8 <__multadd>
 8007682:	9b08      	ldr	r3, [sp, #32]
 8007684:	ee08 0a10 	vmov	s16, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 81b1 	beq.w	80079f0 <_dtoa_r+0xbc0>
 800768e:	2300      	movs	r3, #0
 8007690:	4639      	mov	r1, r7
 8007692:	220a      	movs	r2, #10
 8007694:	4620      	mov	r0, r4
 8007696:	f000 fb2f 	bl	8007cf8 <__multadd>
 800769a:	9b02      	ldr	r3, [sp, #8]
 800769c:	2b00      	cmp	r3, #0
 800769e:	4607      	mov	r7, r0
 80076a0:	f300 808e 	bgt.w	80077c0 <_dtoa_r+0x990>
 80076a4:	9b06      	ldr	r3, [sp, #24]
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	dc51      	bgt.n	800774e <_dtoa_r+0x91e>
 80076aa:	e089      	b.n	80077c0 <_dtoa_r+0x990>
 80076ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80076ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80076b2:	e74b      	b.n	800754c <_dtoa_r+0x71c>
 80076b4:	9b03      	ldr	r3, [sp, #12]
 80076b6:	1e5e      	subs	r6, r3, #1
 80076b8:	9b07      	ldr	r3, [sp, #28]
 80076ba:	42b3      	cmp	r3, r6
 80076bc:	bfbf      	itttt	lt
 80076be:	9b07      	ldrlt	r3, [sp, #28]
 80076c0:	9607      	strlt	r6, [sp, #28]
 80076c2:	1af2      	sublt	r2, r6, r3
 80076c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80076c6:	bfb6      	itet	lt
 80076c8:	189b      	addlt	r3, r3, r2
 80076ca:	1b9e      	subge	r6, r3, r6
 80076cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80076ce:	9b03      	ldr	r3, [sp, #12]
 80076d0:	bfb8      	it	lt
 80076d2:	2600      	movlt	r6, #0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	bfb7      	itett	lt
 80076d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80076dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80076e0:	1a9d      	sublt	r5, r3, r2
 80076e2:	2300      	movlt	r3, #0
 80076e4:	e734      	b.n	8007550 <_dtoa_r+0x720>
 80076e6:	9e07      	ldr	r6, [sp, #28]
 80076e8:	9d04      	ldr	r5, [sp, #16]
 80076ea:	9f08      	ldr	r7, [sp, #32]
 80076ec:	e73b      	b.n	8007566 <_dtoa_r+0x736>
 80076ee:	9a07      	ldr	r2, [sp, #28]
 80076f0:	e767      	b.n	80075c2 <_dtoa_r+0x792>
 80076f2:	9b06      	ldr	r3, [sp, #24]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	dc18      	bgt.n	800772a <_dtoa_r+0x8fa>
 80076f8:	f1ba 0f00 	cmp.w	sl, #0
 80076fc:	d115      	bne.n	800772a <_dtoa_r+0x8fa>
 80076fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007702:	b993      	cbnz	r3, 800772a <_dtoa_r+0x8fa>
 8007704:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007708:	0d1b      	lsrs	r3, r3, #20
 800770a:	051b      	lsls	r3, r3, #20
 800770c:	b183      	cbz	r3, 8007730 <_dtoa_r+0x900>
 800770e:	9b04      	ldr	r3, [sp, #16]
 8007710:	3301      	adds	r3, #1
 8007712:	9304      	str	r3, [sp, #16]
 8007714:	9b05      	ldr	r3, [sp, #20]
 8007716:	3301      	adds	r3, #1
 8007718:	9305      	str	r3, [sp, #20]
 800771a:	f04f 0801 	mov.w	r8, #1
 800771e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007720:	2b00      	cmp	r3, #0
 8007722:	f47f af6a 	bne.w	80075fa <_dtoa_r+0x7ca>
 8007726:	2001      	movs	r0, #1
 8007728:	e76f      	b.n	800760a <_dtoa_r+0x7da>
 800772a:	f04f 0800 	mov.w	r8, #0
 800772e:	e7f6      	b.n	800771e <_dtoa_r+0x8ee>
 8007730:	4698      	mov	r8, r3
 8007732:	e7f4      	b.n	800771e <_dtoa_r+0x8ee>
 8007734:	f43f af7d 	beq.w	8007632 <_dtoa_r+0x802>
 8007738:	4618      	mov	r0, r3
 800773a:	301c      	adds	r0, #28
 800773c:	e772      	b.n	8007624 <_dtoa_r+0x7f4>
 800773e:	9b03      	ldr	r3, [sp, #12]
 8007740:	2b00      	cmp	r3, #0
 8007742:	dc37      	bgt.n	80077b4 <_dtoa_r+0x984>
 8007744:	9b06      	ldr	r3, [sp, #24]
 8007746:	2b02      	cmp	r3, #2
 8007748:	dd34      	ble.n	80077b4 <_dtoa_r+0x984>
 800774a:	9b03      	ldr	r3, [sp, #12]
 800774c:	9302      	str	r3, [sp, #8]
 800774e:	9b02      	ldr	r3, [sp, #8]
 8007750:	b96b      	cbnz	r3, 800776e <_dtoa_r+0x93e>
 8007752:	4631      	mov	r1, r6
 8007754:	2205      	movs	r2, #5
 8007756:	4620      	mov	r0, r4
 8007758:	f000 face 	bl	8007cf8 <__multadd>
 800775c:	4601      	mov	r1, r0
 800775e:	4606      	mov	r6, r0
 8007760:	ee18 0a10 	vmov	r0, s16
 8007764:	f000 fce8 	bl	8008138 <__mcmp>
 8007768:	2800      	cmp	r0, #0
 800776a:	f73f adbb 	bgt.w	80072e4 <_dtoa_r+0x4b4>
 800776e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007770:	9d01      	ldr	r5, [sp, #4]
 8007772:	43db      	mvns	r3, r3
 8007774:	9300      	str	r3, [sp, #0]
 8007776:	f04f 0800 	mov.w	r8, #0
 800777a:	4631      	mov	r1, r6
 800777c:	4620      	mov	r0, r4
 800777e:	f000 fa99 	bl	8007cb4 <_Bfree>
 8007782:	2f00      	cmp	r7, #0
 8007784:	f43f aea4 	beq.w	80074d0 <_dtoa_r+0x6a0>
 8007788:	f1b8 0f00 	cmp.w	r8, #0
 800778c:	d005      	beq.n	800779a <_dtoa_r+0x96a>
 800778e:	45b8      	cmp	r8, r7
 8007790:	d003      	beq.n	800779a <_dtoa_r+0x96a>
 8007792:	4641      	mov	r1, r8
 8007794:	4620      	mov	r0, r4
 8007796:	f000 fa8d 	bl	8007cb4 <_Bfree>
 800779a:	4639      	mov	r1, r7
 800779c:	4620      	mov	r0, r4
 800779e:	f000 fa89 	bl	8007cb4 <_Bfree>
 80077a2:	e695      	b.n	80074d0 <_dtoa_r+0x6a0>
 80077a4:	2600      	movs	r6, #0
 80077a6:	4637      	mov	r7, r6
 80077a8:	e7e1      	b.n	800776e <_dtoa_r+0x93e>
 80077aa:	9700      	str	r7, [sp, #0]
 80077ac:	4637      	mov	r7, r6
 80077ae:	e599      	b.n	80072e4 <_dtoa_r+0x4b4>
 80077b0:	40240000 	.word	0x40240000
 80077b4:	9b08      	ldr	r3, [sp, #32]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f000 80ca 	beq.w	8007950 <_dtoa_r+0xb20>
 80077bc:	9b03      	ldr	r3, [sp, #12]
 80077be:	9302      	str	r3, [sp, #8]
 80077c0:	2d00      	cmp	r5, #0
 80077c2:	dd05      	ble.n	80077d0 <_dtoa_r+0x9a0>
 80077c4:	4639      	mov	r1, r7
 80077c6:	462a      	mov	r2, r5
 80077c8:	4620      	mov	r0, r4
 80077ca:	f000 fc45 	bl	8008058 <__lshift>
 80077ce:	4607      	mov	r7, r0
 80077d0:	f1b8 0f00 	cmp.w	r8, #0
 80077d4:	d05b      	beq.n	800788e <_dtoa_r+0xa5e>
 80077d6:	6879      	ldr	r1, [r7, #4]
 80077d8:	4620      	mov	r0, r4
 80077da:	f000 fa2b 	bl	8007c34 <_Balloc>
 80077de:	4605      	mov	r5, r0
 80077e0:	b928      	cbnz	r0, 80077ee <_dtoa_r+0x9be>
 80077e2:	4b87      	ldr	r3, [pc, #540]	; (8007a00 <_dtoa_r+0xbd0>)
 80077e4:	4602      	mov	r2, r0
 80077e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80077ea:	f7ff bb3b 	b.w	8006e64 <_dtoa_r+0x34>
 80077ee:	693a      	ldr	r2, [r7, #16]
 80077f0:	3202      	adds	r2, #2
 80077f2:	0092      	lsls	r2, r2, #2
 80077f4:	f107 010c 	add.w	r1, r7, #12
 80077f8:	300c      	adds	r0, #12
 80077fa:	f000 fa0d 	bl	8007c18 <memcpy>
 80077fe:	2201      	movs	r2, #1
 8007800:	4629      	mov	r1, r5
 8007802:	4620      	mov	r0, r4
 8007804:	f000 fc28 	bl	8008058 <__lshift>
 8007808:	9b01      	ldr	r3, [sp, #4]
 800780a:	f103 0901 	add.w	r9, r3, #1
 800780e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007812:	4413      	add	r3, r2
 8007814:	9305      	str	r3, [sp, #20]
 8007816:	f00a 0301 	and.w	r3, sl, #1
 800781a:	46b8      	mov	r8, r7
 800781c:	9304      	str	r3, [sp, #16]
 800781e:	4607      	mov	r7, r0
 8007820:	4631      	mov	r1, r6
 8007822:	ee18 0a10 	vmov	r0, s16
 8007826:	f7ff fa77 	bl	8006d18 <quorem>
 800782a:	4641      	mov	r1, r8
 800782c:	9002      	str	r0, [sp, #8]
 800782e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007832:	ee18 0a10 	vmov	r0, s16
 8007836:	f000 fc7f 	bl	8008138 <__mcmp>
 800783a:	463a      	mov	r2, r7
 800783c:	9003      	str	r0, [sp, #12]
 800783e:	4631      	mov	r1, r6
 8007840:	4620      	mov	r0, r4
 8007842:	f000 fc95 	bl	8008170 <__mdiff>
 8007846:	68c2      	ldr	r2, [r0, #12]
 8007848:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800784c:	4605      	mov	r5, r0
 800784e:	bb02      	cbnz	r2, 8007892 <_dtoa_r+0xa62>
 8007850:	4601      	mov	r1, r0
 8007852:	ee18 0a10 	vmov	r0, s16
 8007856:	f000 fc6f 	bl	8008138 <__mcmp>
 800785a:	4602      	mov	r2, r0
 800785c:	4629      	mov	r1, r5
 800785e:	4620      	mov	r0, r4
 8007860:	9207      	str	r2, [sp, #28]
 8007862:	f000 fa27 	bl	8007cb4 <_Bfree>
 8007866:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800786a:	ea43 0102 	orr.w	r1, r3, r2
 800786e:	9b04      	ldr	r3, [sp, #16]
 8007870:	430b      	orrs	r3, r1
 8007872:	464d      	mov	r5, r9
 8007874:	d10f      	bne.n	8007896 <_dtoa_r+0xa66>
 8007876:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800787a:	d02a      	beq.n	80078d2 <_dtoa_r+0xaa2>
 800787c:	9b03      	ldr	r3, [sp, #12]
 800787e:	2b00      	cmp	r3, #0
 8007880:	dd02      	ble.n	8007888 <_dtoa_r+0xa58>
 8007882:	9b02      	ldr	r3, [sp, #8]
 8007884:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007888:	f88b a000 	strb.w	sl, [fp]
 800788c:	e775      	b.n	800777a <_dtoa_r+0x94a>
 800788e:	4638      	mov	r0, r7
 8007890:	e7ba      	b.n	8007808 <_dtoa_r+0x9d8>
 8007892:	2201      	movs	r2, #1
 8007894:	e7e2      	b.n	800785c <_dtoa_r+0xa2c>
 8007896:	9b03      	ldr	r3, [sp, #12]
 8007898:	2b00      	cmp	r3, #0
 800789a:	db04      	blt.n	80078a6 <_dtoa_r+0xa76>
 800789c:	9906      	ldr	r1, [sp, #24]
 800789e:	430b      	orrs	r3, r1
 80078a0:	9904      	ldr	r1, [sp, #16]
 80078a2:	430b      	orrs	r3, r1
 80078a4:	d122      	bne.n	80078ec <_dtoa_r+0xabc>
 80078a6:	2a00      	cmp	r2, #0
 80078a8:	ddee      	ble.n	8007888 <_dtoa_r+0xa58>
 80078aa:	ee18 1a10 	vmov	r1, s16
 80078ae:	2201      	movs	r2, #1
 80078b0:	4620      	mov	r0, r4
 80078b2:	f000 fbd1 	bl	8008058 <__lshift>
 80078b6:	4631      	mov	r1, r6
 80078b8:	ee08 0a10 	vmov	s16, r0
 80078bc:	f000 fc3c 	bl	8008138 <__mcmp>
 80078c0:	2800      	cmp	r0, #0
 80078c2:	dc03      	bgt.n	80078cc <_dtoa_r+0xa9c>
 80078c4:	d1e0      	bne.n	8007888 <_dtoa_r+0xa58>
 80078c6:	f01a 0f01 	tst.w	sl, #1
 80078ca:	d0dd      	beq.n	8007888 <_dtoa_r+0xa58>
 80078cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80078d0:	d1d7      	bne.n	8007882 <_dtoa_r+0xa52>
 80078d2:	2339      	movs	r3, #57	; 0x39
 80078d4:	f88b 3000 	strb.w	r3, [fp]
 80078d8:	462b      	mov	r3, r5
 80078da:	461d      	mov	r5, r3
 80078dc:	3b01      	subs	r3, #1
 80078de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80078e2:	2a39      	cmp	r2, #57	; 0x39
 80078e4:	d071      	beq.n	80079ca <_dtoa_r+0xb9a>
 80078e6:	3201      	adds	r2, #1
 80078e8:	701a      	strb	r2, [r3, #0]
 80078ea:	e746      	b.n	800777a <_dtoa_r+0x94a>
 80078ec:	2a00      	cmp	r2, #0
 80078ee:	dd07      	ble.n	8007900 <_dtoa_r+0xad0>
 80078f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80078f4:	d0ed      	beq.n	80078d2 <_dtoa_r+0xaa2>
 80078f6:	f10a 0301 	add.w	r3, sl, #1
 80078fa:	f88b 3000 	strb.w	r3, [fp]
 80078fe:	e73c      	b.n	800777a <_dtoa_r+0x94a>
 8007900:	9b05      	ldr	r3, [sp, #20]
 8007902:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007906:	4599      	cmp	r9, r3
 8007908:	d047      	beq.n	800799a <_dtoa_r+0xb6a>
 800790a:	ee18 1a10 	vmov	r1, s16
 800790e:	2300      	movs	r3, #0
 8007910:	220a      	movs	r2, #10
 8007912:	4620      	mov	r0, r4
 8007914:	f000 f9f0 	bl	8007cf8 <__multadd>
 8007918:	45b8      	cmp	r8, r7
 800791a:	ee08 0a10 	vmov	s16, r0
 800791e:	f04f 0300 	mov.w	r3, #0
 8007922:	f04f 020a 	mov.w	r2, #10
 8007926:	4641      	mov	r1, r8
 8007928:	4620      	mov	r0, r4
 800792a:	d106      	bne.n	800793a <_dtoa_r+0xb0a>
 800792c:	f000 f9e4 	bl	8007cf8 <__multadd>
 8007930:	4680      	mov	r8, r0
 8007932:	4607      	mov	r7, r0
 8007934:	f109 0901 	add.w	r9, r9, #1
 8007938:	e772      	b.n	8007820 <_dtoa_r+0x9f0>
 800793a:	f000 f9dd 	bl	8007cf8 <__multadd>
 800793e:	4639      	mov	r1, r7
 8007940:	4680      	mov	r8, r0
 8007942:	2300      	movs	r3, #0
 8007944:	220a      	movs	r2, #10
 8007946:	4620      	mov	r0, r4
 8007948:	f000 f9d6 	bl	8007cf8 <__multadd>
 800794c:	4607      	mov	r7, r0
 800794e:	e7f1      	b.n	8007934 <_dtoa_r+0xb04>
 8007950:	9b03      	ldr	r3, [sp, #12]
 8007952:	9302      	str	r3, [sp, #8]
 8007954:	9d01      	ldr	r5, [sp, #4]
 8007956:	ee18 0a10 	vmov	r0, s16
 800795a:	4631      	mov	r1, r6
 800795c:	f7ff f9dc 	bl	8006d18 <quorem>
 8007960:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007964:	9b01      	ldr	r3, [sp, #4]
 8007966:	f805 ab01 	strb.w	sl, [r5], #1
 800796a:	1aea      	subs	r2, r5, r3
 800796c:	9b02      	ldr	r3, [sp, #8]
 800796e:	4293      	cmp	r3, r2
 8007970:	dd09      	ble.n	8007986 <_dtoa_r+0xb56>
 8007972:	ee18 1a10 	vmov	r1, s16
 8007976:	2300      	movs	r3, #0
 8007978:	220a      	movs	r2, #10
 800797a:	4620      	mov	r0, r4
 800797c:	f000 f9bc 	bl	8007cf8 <__multadd>
 8007980:	ee08 0a10 	vmov	s16, r0
 8007984:	e7e7      	b.n	8007956 <_dtoa_r+0xb26>
 8007986:	9b02      	ldr	r3, [sp, #8]
 8007988:	2b00      	cmp	r3, #0
 800798a:	bfc8      	it	gt
 800798c:	461d      	movgt	r5, r3
 800798e:	9b01      	ldr	r3, [sp, #4]
 8007990:	bfd8      	it	le
 8007992:	2501      	movle	r5, #1
 8007994:	441d      	add	r5, r3
 8007996:	f04f 0800 	mov.w	r8, #0
 800799a:	ee18 1a10 	vmov	r1, s16
 800799e:	2201      	movs	r2, #1
 80079a0:	4620      	mov	r0, r4
 80079a2:	f000 fb59 	bl	8008058 <__lshift>
 80079a6:	4631      	mov	r1, r6
 80079a8:	ee08 0a10 	vmov	s16, r0
 80079ac:	f000 fbc4 	bl	8008138 <__mcmp>
 80079b0:	2800      	cmp	r0, #0
 80079b2:	dc91      	bgt.n	80078d8 <_dtoa_r+0xaa8>
 80079b4:	d102      	bne.n	80079bc <_dtoa_r+0xb8c>
 80079b6:	f01a 0f01 	tst.w	sl, #1
 80079ba:	d18d      	bne.n	80078d8 <_dtoa_r+0xaa8>
 80079bc:	462b      	mov	r3, r5
 80079be:	461d      	mov	r5, r3
 80079c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079c4:	2a30      	cmp	r2, #48	; 0x30
 80079c6:	d0fa      	beq.n	80079be <_dtoa_r+0xb8e>
 80079c8:	e6d7      	b.n	800777a <_dtoa_r+0x94a>
 80079ca:	9a01      	ldr	r2, [sp, #4]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d184      	bne.n	80078da <_dtoa_r+0xaaa>
 80079d0:	9b00      	ldr	r3, [sp, #0]
 80079d2:	3301      	adds	r3, #1
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	2331      	movs	r3, #49	; 0x31
 80079d8:	7013      	strb	r3, [r2, #0]
 80079da:	e6ce      	b.n	800777a <_dtoa_r+0x94a>
 80079dc:	4b09      	ldr	r3, [pc, #36]	; (8007a04 <_dtoa_r+0xbd4>)
 80079de:	f7ff ba95 	b.w	8006f0c <_dtoa_r+0xdc>
 80079e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f47f aa6e 	bne.w	8006ec6 <_dtoa_r+0x96>
 80079ea:	4b07      	ldr	r3, [pc, #28]	; (8007a08 <_dtoa_r+0xbd8>)
 80079ec:	f7ff ba8e 	b.w	8006f0c <_dtoa_r+0xdc>
 80079f0:	9b02      	ldr	r3, [sp, #8]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	dcae      	bgt.n	8007954 <_dtoa_r+0xb24>
 80079f6:	9b06      	ldr	r3, [sp, #24]
 80079f8:	2b02      	cmp	r3, #2
 80079fa:	f73f aea8 	bgt.w	800774e <_dtoa_r+0x91e>
 80079fe:	e7a9      	b.n	8007954 <_dtoa_r+0xb24>
 8007a00:	08008fdb 	.word	0x08008fdb
 8007a04:	08008f38 	.word	0x08008f38
 8007a08:	08008f5c 	.word	0x08008f5c

08007a0c <std>:
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	b510      	push	{r4, lr}
 8007a10:	4604      	mov	r4, r0
 8007a12:	e9c0 3300 	strd	r3, r3, [r0]
 8007a16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a1a:	6083      	str	r3, [r0, #8]
 8007a1c:	8181      	strh	r1, [r0, #12]
 8007a1e:	6643      	str	r3, [r0, #100]	; 0x64
 8007a20:	81c2      	strh	r2, [r0, #14]
 8007a22:	6183      	str	r3, [r0, #24]
 8007a24:	4619      	mov	r1, r3
 8007a26:	2208      	movs	r2, #8
 8007a28:	305c      	adds	r0, #92	; 0x5c
 8007a2a:	f7fe fceb 	bl	8006404 <memset>
 8007a2e:	4b05      	ldr	r3, [pc, #20]	; (8007a44 <std+0x38>)
 8007a30:	6263      	str	r3, [r4, #36]	; 0x24
 8007a32:	4b05      	ldr	r3, [pc, #20]	; (8007a48 <std+0x3c>)
 8007a34:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a36:	4b05      	ldr	r3, [pc, #20]	; (8007a4c <std+0x40>)
 8007a38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a3a:	4b05      	ldr	r3, [pc, #20]	; (8007a50 <std+0x44>)
 8007a3c:	6224      	str	r4, [r4, #32]
 8007a3e:	6323      	str	r3, [r4, #48]	; 0x30
 8007a40:	bd10      	pop	{r4, pc}
 8007a42:	bf00      	nop
 8007a44:	080087fd 	.word	0x080087fd
 8007a48:	0800881f 	.word	0x0800881f
 8007a4c:	08008857 	.word	0x08008857
 8007a50:	0800887b 	.word	0x0800887b

08007a54 <_cleanup_r>:
 8007a54:	4901      	ldr	r1, [pc, #4]	; (8007a5c <_cleanup_r+0x8>)
 8007a56:	f000 b8af 	b.w	8007bb8 <_fwalk_reent>
 8007a5a:	bf00      	nop
 8007a5c:	08008b91 	.word	0x08008b91

08007a60 <__sfmoreglue>:
 8007a60:	b570      	push	{r4, r5, r6, lr}
 8007a62:	2268      	movs	r2, #104	; 0x68
 8007a64:	1e4d      	subs	r5, r1, #1
 8007a66:	4355      	muls	r5, r2
 8007a68:	460e      	mov	r6, r1
 8007a6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007a6e:	f000 fce7 	bl	8008440 <_malloc_r>
 8007a72:	4604      	mov	r4, r0
 8007a74:	b140      	cbz	r0, 8007a88 <__sfmoreglue+0x28>
 8007a76:	2100      	movs	r1, #0
 8007a78:	e9c0 1600 	strd	r1, r6, [r0]
 8007a7c:	300c      	adds	r0, #12
 8007a7e:	60a0      	str	r0, [r4, #8]
 8007a80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007a84:	f7fe fcbe 	bl	8006404 <memset>
 8007a88:	4620      	mov	r0, r4
 8007a8a:	bd70      	pop	{r4, r5, r6, pc}

08007a8c <__sfp_lock_acquire>:
 8007a8c:	4801      	ldr	r0, [pc, #4]	; (8007a94 <__sfp_lock_acquire+0x8>)
 8007a8e:	f000 b8b8 	b.w	8007c02 <__retarget_lock_acquire_recursive>
 8007a92:	bf00      	nop
 8007a94:	20000331 	.word	0x20000331

08007a98 <__sfp_lock_release>:
 8007a98:	4801      	ldr	r0, [pc, #4]	; (8007aa0 <__sfp_lock_release+0x8>)
 8007a9a:	f000 b8b3 	b.w	8007c04 <__retarget_lock_release_recursive>
 8007a9e:	bf00      	nop
 8007aa0:	20000331 	.word	0x20000331

08007aa4 <__sinit_lock_acquire>:
 8007aa4:	4801      	ldr	r0, [pc, #4]	; (8007aac <__sinit_lock_acquire+0x8>)
 8007aa6:	f000 b8ac 	b.w	8007c02 <__retarget_lock_acquire_recursive>
 8007aaa:	bf00      	nop
 8007aac:	20000332 	.word	0x20000332

08007ab0 <__sinit_lock_release>:
 8007ab0:	4801      	ldr	r0, [pc, #4]	; (8007ab8 <__sinit_lock_release+0x8>)
 8007ab2:	f000 b8a7 	b.w	8007c04 <__retarget_lock_release_recursive>
 8007ab6:	bf00      	nop
 8007ab8:	20000332 	.word	0x20000332

08007abc <__sinit>:
 8007abc:	b510      	push	{r4, lr}
 8007abe:	4604      	mov	r4, r0
 8007ac0:	f7ff fff0 	bl	8007aa4 <__sinit_lock_acquire>
 8007ac4:	69a3      	ldr	r3, [r4, #24]
 8007ac6:	b11b      	cbz	r3, 8007ad0 <__sinit+0x14>
 8007ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007acc:	f7ff bff0 	b.w	8007ab0 <__sinit_lock_release>
 8007ad0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ad4:	6523      	str	r3, [r4, #80]	; 0x50
 8007ad6:	4b13      	ldr	r3, [pc, #76]	; (8007b24 <__sinit+0x68>)
 8007ad8:	4a13      	ldr	r2, [pc, #76]	; (8007b28 <__sinit+0x6c>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	62a2      	str	r2, [r4, #40]	; 0x28
 8007ade:	42a3      	cmp	r3, r4
 8007ae0:	bf04      	itt	eq
 8007ae2:	2301      	moveq	r3, #1
 8007ae4:	61a3      	streq	r3, [r4, #24]
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	f000 f820 	bl	8007b2c <__sfp>
 8007aec:	6060      	str	r0, [r4, #4]
 8007aee:	4620      	mov	r0, r4
 8007af0:	f000 f81c 	bl	8007b2c <__sfp>
 8007af4:	60a0      	str	r0, [r4, #8]
 8007af6:	4620      	mov	r0, r4
 8007af8:	f000 f818 	bl	8007b2c <__sfp>
 8007afc:	2200      	movs	r2, #0
 8007afe:	60e0      	str	r0, [r4, #12]
 8007b00:	2104      	movs	r1, #4
 8007b02:	6860      	ldr	r0, [r4, #4]
 8007b04:	f7ff ff82 	bl	8007a0c <std>
 8007b08:	68a0      	ldr	r0, [r4, #8]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	2109      	movs	r1, #9
 8007b0e:	f7ff ff7d 	bl	8007a0c <std>
 8007b12:	68e0      	ldr	r0, [r4, #12]
 8007b14:	2202      	movs	r2, #2
 8007b16:	2112      	movs	r1, #18
 8007b18:	f7ff ff78 	bl	8007a0c <std>
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	61a3      	str	r3, [r4, #24]
 8007b20:	e7d2      	b.n	8007ac8 <__sinit+0xc>
 8007b22:	bf00      	nop
 8007b24:	08008f24 	.word	0x08008f24
 8007b28:	08007a55 	.word	0x08007a55

08007b2c <__sfp>:
 8007b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b2e:	4607      	mov	r7, r0
 8007b30:	f7ff ffac 	bl	8007a8c <__sfp_lock_acquire>
 8007b34:	4b1e      	ldr	r3, [pc, #120]	; (8007bb0 <__sfp+0x84>)
 8007b36:	681e      	ldr	r6, [r3, #0]
 8007b38:	69b3      	ldr	r3, [r6, #24]
 8007b3a:	b913      	cbnz	r3, 8007b42 <__sfp+0x16>
 8007b3c:	4630      	mov	r0, r6
 8007b3e:	f7ff ffbd 	bl	8007abc <__sinit>
 8007b42:	3648      	adds	r6, #72	; 0x48
 8007b44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	d503      	bpl.n	8007b54 <__sfp+0x28>
 8007b4c:	6833      	ldr	r3, [r6, #0]
 8007b4e:	b30b      	cbz	r3, 8007b94 <__sfp+0x68>
 8007b50:	6836      	ldr	r6, [r6, #0]
 8007b52:	e7f7      	b.n	8007b44 <__sfp+0x18>
 8007b54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007b58:	b9d5      	cbnz	r5, 8007b90 <__sfp+0x64>
 8007b5a:	4b16      	ldr	r3, [pc, #88]	; (8007bb4 <__sfp+0x88>)
 8007b5c:	60e3      	str	r3, [r4, #12]
 8007b5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007b62:	6665      	str	r5, [r4, #100]	; 0x64
 8007b64:	f000 f84c 	bl	8007c00 <__retarget_lock_init_recursive>
 8007b68:	f7ff ff96 	bl	8007a98 <__sfp_lock_release>
 8007b6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007b70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007b74:	6025      	str	r5, [r4, #0]
 8007b76:	61a5      	str	r5, [r4, #24]
 8007b78:	2208      	movs	r2, #8
 8007b7a:	4629      	mov	r1, r5
 8007b7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007b80:	f7fe fc40 	bl	8006404 <memset>
 8007b84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007b88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b90:	3468      	adds	r4, #104	; 0x68
 8007b92:	e7d9      	b.n	8007b48 <__sfp+0x1c>
 8007b94:	2104      	movs	r1, #4
 8007b96:	4638      	mov	r0, r7
 8007b98:	f7ff ff62 	bl	8007a60 <__sfmoreglue>
 8007b9c:	4604      	mov	r4, r0
 8007b9e:	6030      	str	r0, [r6, #0]
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	d1d5      	bne.n	8007b50 <__sfp+0x24>
 8007ba4:	f7ff ff78 	bl	8007a98 <__sfp_lock_release>
 8007ba8:	230c      	movs	r3, #12
 8007baa:	603b      	str	r3, [r7, #0]
 8007bac:	e7ee      	b.n	8007b8c <__sfp+0x60>
 8007bae:	bf00      	nop
 8007bb0:	08008f24 	.word	0x08008f24
 8007bb4:	ffff0001 	.word	0xffff0001

08007bb8 <_fwalk_reent>:
 8007bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bbc:	4606      	mov	r6, r0
 8007bbe:	4688      	mov	r8, r1
 8007bc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007bc4:	2700      	movs	r7, #0
 8007bc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007bca:	f1b9 0901 	subs.w	r9, r9, #1
 8007bce:	d505      	bpl.n	8007bdc <_fwalk_reent+0x24>
 8007bd0:	6824      	ldr	r4, [r4, #0]
 8007bd2:	2c00      	cmp	r4, #0
 8007bd4:	d1f7      	bne.n	8007bc6 <_fwalk_reent+0xe>
 8007bd6:	4638      	mov	r0, r7
 8007bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bdc:	89ab      	ldrh	r3, [r5, #12]
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d907      	bls.n	8007bf2 <_fwalk_reent+0x3a>
 8007be2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007be6:	3301      	adds	r3, #1
 8007be8:	d003      	beq.n	8007bf2 <_fwalk_reent+0x3a>
 8007bea:	4629      	mov	r1, r5
 8007bec:	4630      	mov	r0, r6
 8007bee:	47c0      	blx	r8
 8007bf0:	4307      	orrs	r7, r0
 8007bf2:	3568      	adds	r5, #104	; 0x68
 8007bf4:	e7e9      	b.n	8007bca <_fwalk_reent+0x12>
	...

08007bf8 <_localeconv_r>:
 8007bf8:	4800      	ldr	r0, [pc, #0]	; (8007bfc <_localeconv_r+0x4>)
 8007bfa:	4770      	bx	lr
 8007bfc:	20000160 	.word	0x20000160

08007c00 <__retarget_lock_init_recursive>:
 8007c00:	4770      	bx	lr

08007c02 <__retarget_lock_acquire_recursive>:
 8007c02:	4770      	bx	lr

08007c04 <__retarget_lock_release_recursive>:
 8007c04:	4770      	bx	lr
	...

08007c08 <malloc>:
 8007c08:	4b02      	ldr	r3, [pc, #8]	; (8007c14 <malloc+0xc>)
 8007c0a:	4601      	mov	r1, r0
 8007c0c:	6818      	ldr	r0, [r3, #0]
 8007c0e:	f000 bc17 	b.w	8008440 <_malloc_r>
 8007c12:	bf00      	nop
 8007c14:	2000000c 	.word	0x2000000c

08007c18 <memcpy>:
 8007c18:	440a      	add	r2, r1
 8007c1a:	4291      	cmp	r1, r2
 8007c1c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007c20:	d100      	bne.n	8007c24 <memcpy+0xc>
 8007c22:	4770      	bx	lr
 8007c24:	b510      	push	{r4, lr}
 8007c26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c2e:	4291      	cmp	r1, r2
 8007c30:	d1f9      	bne.n	8007c26 <memcpy+0xe>
 8007c32:	bd10      	pop	{r4, pc}

08007c34 <_Balloc>:
 8007c34:	b570      	push	{r4, r5, r6, lr}
 8007c36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c38:	4604      	mov	r4, r0
 8007c3a:	460d      	mov	r5, r1
 8007c3c:	b976      	cbnz	r6, 8007c5c <_Balloc+0x28>
 8007c3e:	2010      	movs	r0, #16
 8007c40:	f7ff ffe2 	bl	8007c08 <malloc>
 8007c44:	4602      	mov	r2, r0
 8007c46:	6260      	str	r0, [r4, #36]	; 0x24
 8007c48:	b920      	cbnz	r0, 8007c54 <_Balloc+0x20>
 8007c4a:	4b18      	ldr	r3, [pc, #96]	; (8007cac <_Balloc+0x78>)
 8007c4c:	4818      	ldr	r0, [pc, #96]	; (8007cb0 <_Balloc+0x7c>)
 8007c4e:	2166      	movs	r1, #102	; 0x66
 8007c50:	f000 feea 	bl	8008a28 <__assert_func>
 8007c54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c58:	6006      	str	r6, [r0, #0]
 8007c5a:	60c6      	str	r6, [r0, #12]
 8007c5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c5e:	68f3      	ldr	r3, [r6, #12]
 8007c60:	b183      	cbz	r3, 8007c84 <_Balloc+0x50>
 8007c62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c6a:	b9b8      	cbnz	r0, 8007c9c <_Balloc+0x68>
 8007c6c:	2101      	movs	r1, #1
 8007c6e:	fa01 f605 	lsl.w	r6, r1, r5
 8007c72:	1d72      	adds	r2, r6, #5
 8007c74:	0092      	lsls	r2, r2, #2
 8007c76:	4620      	mov	r0, r4
 8007c78:	f000 fb60 	bl	800833c <_calloc_r>
 8007c7c:	b160      	cbz	r0, 8007c98 <_Balloc+0x64>
 8007c7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c82:	e00e      	b.n	8007ca2 <_Balloc+0x6e>
 8007c84:	2221      	movs	r2, #33	; 0x21
 8007c86:	2104      	movs	r1, #4
 8007c88:	4620      	mov	r0, r4
 8007c8a:	f000 fb57 	bl	800833c <_calloc_r>
 8007c8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c90:	60f0      	str	r0, [r6, #12]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1e4      	bne.n	8007c62 <_Balloc+0x2e>
 8007c98:	2000      	movs	r0, #0
 8007c9a:	bd70      	pop	{r4, r5, r6, pc}
 8007c9c:	6802      	ldr	r2, [r0, #0]
 8007c9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ca8:	e7f7      	b.n	8007c9a <_Balloc+0x66>
 8007caa:	bf00      	nop
 8007cac:	08008f69 	.word	0x08008f69
 8007cb0:	0800904c 	.word	0x0800904c

08007cb4 <_Bfree>:
 8007cb4:	b570      	push	{r4, r5, r6, lr}
 8007cb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007cb8:	4605      	mov	r5, r0
 8007cba:	460c      	mov	r4, r1
 8007cbc:	b976      	cbnz	r6, 8007cdc <_Bfree+0x28>
 8007cbe:	2010      	movs	r0, #16
 8007cc0:	f7ff ffa2 	bl	8007c08 <malloc>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	6268      	str	r0, [r5, #36]	; 0x24
 8007cc8:	b920      	cbnz	r0, 8007cd4 <_Bfree+0x20>
 8007cca:	4b09      	ldr	r3, [pc, #36]	; (8007cf0 <_Bfree+0x3c>)
 8007ccc:	4809      	ldr	r0, [pc, #36]	; (8007cf4 <_Bfree+0x40>)
 8007cce:	218a      	movs	r1, #138	; 0x8a
 8007cd0:	f000 feaa 	bl	8008a28 <__assert_func>
 8007cd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cd8:	6006      	str	r6, [r0, #0]
 8007cda:	60c6      	str	r6, [r0, #12]
 8007cdc:	b13c      	cbz	r4, 8007cee <_Bfree+0x3a>
 8007cde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007ce0:	6862      	ldr	r2, [r4, #4]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ce8:	6021      	str	r1, [r4, #0]
 8007cea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007cee:	bd70      	pop	{r4, r5, r6, pc}
 8007cf0:	08008f69 	.word	0x08008f69
 8007cf4:	0800904c 	.word	0x0800904c

08007cf8 <__multadd>:
 8007cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cfc:	690d      	ldr	r5, [r1, #16]
 8007cfe:	4607      	mov	r7, r0
 8007d00:	460c      	mov	r4, r1
 8007d02:	461e      	mov	r6, r3
 8007d04:	f101 0c14 	add.w	ip, r1, #20
 8007d08:	2000      	movs	r0, #0
 8007d0a:	f8dc 3000 	ldr.w	r3, [ip]
 8007d0e:	b299      	uxth	r1, r3
 8007d10:	fb02 6101 	mla	r1, r2, r1, r6
 8007d14:	0c1e      	lsrs	r6, r3, #16
 8007d16:	0c0b      	lsrs	r3, r1, #16
 8007d18:	fb02 3306 	mla	r3, r2, r6, r3
 8007d1c:	b289      	uxth	r1, r1
 8007d1e:	3001      	adds	r0, #1
 8007d20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d24:	4285      	cmp	r5, r0
 8007d26:	f84c 1b04 	str.w	r1, [ip], #4
 8007d2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d2e:	dcec      	bgt.n	8007d0a <__multadd+0x12>
 8007d30:	b30e      	cbz	r6, 8007d76 <__multadd+0x7e>
 8007d32:	68a3      	ldr	r3, [r4, #8]
 8007d34:	42ab      	cmp	r3, r5
 8007d36:	dc19      	bgt.n	8007d6c <__multadd+0x74>
 8007d38:	6861      	ldr	r1, [r4, #4]
 8007d3a:	4638      	mov	r0, r7
 8007d3c:	3101      	adds	r1, #1
 8007d3e:	f7ff ff79 	bl	8007c34 <_Balloc>
 8007d42:	4680      	mov	r8, r0
 8007d44:	b928      	cbnz	r0, 8007d52 <__multadd+0x5a>
 8007d46:	4602      	mov	r2, r0
 8007d48:	4b0c      	ldr	r3, [pc, #48]	; (8007d7c <__multadd+0x84>)
 8007d4a:	480d      	ldr	r0, [pc, #52]	; (8007d80 <__multadd+0x88>)
 8007d4c:	21b5      	movs	r1, #181	; 0xb5
 8007d4e:	f000 fe6b 	bl	8008a28 <__assert_func>
 8007d52:	6922      	ldr	r2, [r4, #16]
 8007d54:	3202      	adds	r2, #2
 8007d56:	f104 010c 	add.w	r1, r4, #12
 8007d5a:	0092      	lsls	r2, r2, #2
 8007d5c:	300c      	adds	r0, #12
 8007d5e:	f7ff ff5b 	bl	8007c18 <memcpy>
 8007d62:	4621      	mov	r1, r4
 8007d64:	4638      	mov	r0, r7
 8007d66:	f7ff ffa5 	bl	8007cb4 <_Bfree>
 8007d6a:	4644      	mov	r4, r8
 8007d6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d70:	3501      	adds	r5, #1
 8007d72:	615e      	str	r6, [r3, #20]
 8007d74:	6125      	str	r5, [r4, #16]
 8007d76:	4620      	mov	r0, r4
 8007d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d7c:	08008fdb 	.word	0x08008fdb
 8007d80:	0800904c 	.word	0x0800904c

08007d84 <__hi0bits>:
 8007d84:	0c03      	lsrs	r3, r0, #16
 8007d86:	041b      	lsls	r3, r3, #16
 8007d88:	b9d3      	cbnz	r3, 8007dc0 <__hi0bits+0x3c>
 8007d8a:	0400      	lsls	r0, r0, #16
 8007d8c:	2310      	movs	r3, #16
 8007d8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007d92:	bf04      	itt	eq
 8007d94:	0200      	lsleq	r0, r0, #8
 8007d96:	3308      	addeq	r3, #8
 8007d98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007d9c:	bf04      	itt	eq
 8007d9e:	0100      	lsleq	r0, r0, #4
 8007da0:	3304      	addeq	r3, #4
 8007da2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007da6:	bf04      	itt	eq
 8007da8:	0080      	lsleq	r0, r0, #2
 8007daa:	3302      	addeq	r3, #2
 8007dac:	2800      	cmp	r0, #0
 8007dae:	db05      	blt.n	8007dbc <__hi0bits+0x38>
 8007db0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007db4:	f103 0301 	add.w	r3, r3, #1
 8007db8:	bf08      	it	eq
 8007dba:	2320      	moveq	r3, #32
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	4770      	bx	lr
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	e7e4      	b.n	8007d8e <__hi0bits+0xa>

08007dc4 <__lo0bits>:
 8007dc4:	6803      	ldr	r3, [r0, #0]
 8007dc6:	f013 0207 	ands.w	r2, r3, #7
 8007dca:	4601      	mov	r1, r0
 8007dcc:	d00b      	beq.n	8007de6 <__lo0bits+0x22>
 8007dce:	07da      	lsls	r2, r3, #31
 8007dd0:	d423      	bmi.n	8007e1a <__lo0bits+0x56>
 8007dd2:	0798      	lsls	r0, r3, #30
 8007dd4:	bf49      	itett	mi
 8007dd6:	085b      	lsrmi	r3, r3, #1
 8007dd8:	089b      	lsrpl	r3, r3, #2
 8007dda:	2001      	movmi	r0, #1
 8007ddc:	600b      	strmi	r3, [r1, #0]
 8007dde:	bf5c      	itt	pl
 8007de0:	600b      	strpl	r3, [r1, #0]
 8007de2:	2002      	movpl	r0, #2
 8007de4:	4770      	bx	lr
 8007de6:	b298      	uxth	r0, r3
 8007de8:	b9a8      	cbnz	r0, 8007e16 <__lo0bits+0x52>
 8007dea:	0c1b      	lsrs	r3, r3, #16
 8007dec:	2010      	movs	r0, #16
 8007dee:	b2da      	uxtb	r2, r3
 8007df0:	b90a      	cbnz	r2, 8007df6 <__lo0bits+0x32>
 8007df2:	3008      	adds	r0, #8
 8007df4:	0a1b      	lsrs	r3, r3, #8
 8007df6:	071a      	lsls	r2, r3, #28
 8007df8:	bf04      	itt	eq
 8007dfa:	091b      	lsreq	r3, r3, #4
 8007dfc:	3004      	addeq	r0, #4
 8007dfe:	079a      	lsls	r2, r3, #30
 8007e00:	bf04      	itt	eq
 8007e02:	089b      	lsreq	r3, r3, #2
 8007e04:	3002      	addeq	r0, #2
 8007e06:	07da      	lsls	r2, r3, #31
 8007e08:	d403      	bmi.n	8007e12 <__lo0bits+0x4e>
 8007e0a:	085b      	lsrs	r3, r3, #1
 8007e0c:	f100 0001 	add.w	r0, r0, #1
 8007e10:	d005      	beq.n	8007e1e <__lo0bits+0x5a>
 8007e12:	600b      	str	r3, [r1, #0]
 8007e14:	4770      	bx	lr
 8007e16:	4610      	mov	r0, r2
 8007e18:	e7e9      	b.n	8007dee <__lo0bits+0x2a>
 8007e1a:	2000      	movs	r0, #0
 8007e1c:	4770      	bx	lr
 8007e1e:	2020      	movs	r0, #32
 8007e20:	4770      	bx	lr
	...

08007e24 <__i2b>:
 8007e24:	b510      	push	{r4, lr}
 8007e26:	460c      	mov	r4, r1
 8007e28:	2101      	movs	r1, #1
 8007e2a:	f7ff ff03 	bl	8007c34 <_Balloc>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	b928      	cbnz	r0, 8007e3e <__i2b+0x1a>
 8007e32:	4b05      	ldr	r3, [pc, #20]	; (8007e48 <__i2b+0x24>)
 8007e34:	4805      	ldr	r0, [pc, #20]	; (8007e4c <__i2b+0x28>)
 8007e36:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007e3a:	f000 fdf5 	bl	8008a28 <__assert_func>
 8007e3e:	2301      	movs	r3, #1
 8007e40:	6144      	str	r4, [r0, #20]
 8007e42:	6103      	str	r3, [r0, #16]
 8007e44:	bd10      	pop	{r4, pc}
 8007e46:	bf00      	nop
 8007e48:	08008fdb 	.word	0x08008fdb
 8007e4c:	0800904c 	.word	0x0800904c

08007e50 <__multiply>:
 8007e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e54:	4691      	mov	r9, r2
 8007e56:	690a      	ldr	r2, [r1, #16]
 8007e58:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	bfb8      	it	lt
 8007e60:	460b      	movlt	r3, r1
 8007e62:	460c      	mov	r4, r1
 8007e64:	bfbc      	itt	lt
 8007e66:	464c      	movlt	r4, r9
 8007e68:	4699      	movlt	r9, r3
 8007e6a:	6927      	ldr	r7, [r4, #16]
 8007e6c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007e70:	68a3      	ldr	r3, [r4, #8]
 8007e72:	6861      	ldr	r1, [r4, #4]
 8007e74:	eb07 060a 	add.w	r6, r7, sl
 8007e78:	42b3      	cmp	r3, r6
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	bfb8      	it	lt
 8007e7e:	3101      	addlt	r1, #1
 8007e80:	f7ff fed8 	bl	8007c34 <_Balloc>
 8007e84:	b930      	cbnz	r0, 8007e94 <__multiply+0x44>
 8007e86:	4602      	mov	r2, r0
 8007e88:	4b44      	ldr	r3, [pc, #272]	; (8007f9c <__multiply+0x14c>)
 8007e8a:	4845      	ldr	r0, [pc, #276]	; (8007fa0 <__multiply+0x150>)
 8007e8c:	f240 115d 	movw	r1, #349	; 0x15d
 8007e90:	f000 fdca 	bl	8008a28 <__assert_func>
 8007e94:	f100 0514 	add.w	r5, r0, #20
 8007e98:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e9c:	462b      	mov	r3, r5
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	4543      	cmp	r3, r8
 8007ea2:	d321      	bcc.n	8007ee8 <__multiply+0x98>
 8007ea4:	f104 0314 	add.w	r3, r4, #20
 8007ea8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007eac:	f109 0314 	add.w	r3, r9, #20
 8007eb0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007eb4:	9202      	str	r2, [sp, #8]
 8007eb6:	1b3a      	subs	r2, r7, r4
 8007eb8:	3a15      	subs	r2, #21
 8007eba:	f022 0203 	bic.w	r2, r2, #3
 8007ebe:	3204      	adds	r2, #4
 8007ec0:	f104 0115 	add.w	r1, r4, #21
 8007ec4:	428f      	cmp	r7, r1
 8007ec6:	bf38      	it	cc
 8007ec8:	2204      	movcc	r2, #4
 8007eca:	9201      	str	r2, [sp, #4]
 8007ecc:	9a02      	ldr	r2, [sp, #8]
 8007ece:	9303      	str	r3, [sp, #12]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d80c      	bhi.n	8007eee <__multiply+0x9e>
 8007ed4:	2e00      	cmp	r6, #0
 8007ed6:	dd03      	ble.n	8007ee0 <__multiply+0x90>
 8007ed8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d05a      	beq.n	8007f96 <__multiply+0x146>
 8007ee0:	6106      	str	r6, [r0, #16]
 8007ee2:	b005      	add	sp, #20
 8007ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee8:	f843 2b04 	str.w	r2, [r3], #4
 8007eec:	e7d8      	b.n	8007ea0 <__multiply+0x50>
 8007eee:	f8b3 a000 	ldrh.w	sl, [r3]
 8007ef2:	f1ba 0f00 	cmp.w	sl, #0
 8007ef6:	d024      	beq.n	8007f42 <__multiply+0xf2>
 8007ef8:	f104 0e14 	add.w	lr, r4, #20
 8007efc:	46a9      	mov	r9, r5
 8007efe:	f04f 0c00 	mov.w	ip, #0
 8007f02:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007f06:	f8d9 1000 	ldr.w	r1, [r9]
 8007f0a:	fa1f fb82 	uxth.w	fp, r2
 8007f0e:	b289      	uxth	r1, r1
 8007f10:	fb0a 110b 	mla	r1, sl, fp, r1
 8007f14:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007f18:	f8d9 2000 	ldr.w	r2, [r9]
 8007f1c:	4461      	add	r1, ip
 8007f1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f22:	fb0a c20b 	mla	r2, sl, fp, ip
 8007f26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007f2a:	b289      	uxth	r1, r1
 8007f2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007f30:	4577      	cmp	r7, lr
 8007f32:	f849 1b04 	str.w	r1, [r9], #4
 8007f36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f3a:	d8e2      	bhi.n	8007f02 <__multiply+0xb2>
 8007f3c:	9a01      	ldr	r2, [sp, #4]
 8007f3e:	f845 c002 	str.w	ip, [r5, r2]
 8007f42:	9a03      	ldr	r2, [sp, #12]
 8007f44:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007f48:	3304      	adds	r3, #4
 8007f4a:	f1b9 0f00 	cmp.w	r9, #0
 8007f4e:	d020      	beq.n	8007f92 <__multiply+0x142>
 8007f50:	6829      	ldr	r1, [r5, #0]
 8007f52:	f104 0c14 	add.w	ip, r4, #20
 8007f56:	46ae      	mov	lr, r5
 8007f58:	f04f 0a00 	mov.w	sl, #0
 8007f5c:	f8bc b000 	ldrh.w	fp, [ip]
 8007f60:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007f64:	fb09 220b 	mla	r2, r9, fp, r2
 8007f68:	4492      	add	sl, r2
 8007f6a:	b289      	uxth	r1, r1
 8007f6c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007f70:	f84e 1b04 	str.w	r1, [lr], #4
 8007f74:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007f78:	f8be 1000 	ldrh.w	r1, [lr]
 8007f7c:	0c12      	lsrs	r2, r2, #16
 8007f7e:	fb09 1102 	mla	r1, r9, r2, r1
 8007f82:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007f86:	4567      	cmp	r7, ip
 8007f88:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007f8c:	d8e6      	bhi.n	8007f5c <__multiply+0x10c>
 8007f8e:	9a01      	ldr	r2, [sp, #4]
 8007f90:	50a9      	str	r1, [r5, r2]
 8007f92:	3504      	adds	r5, #4
 8007f94:	e79a      	b.n	8007ecc <__multiply+0x7c>
 8007f96:	3e01      	subs	r6, #1
 8007f98:	e79c      	b.n	8007ed4 <__multiply+0x84>
 8007f9a:	bf00      	nop
 8007f9c:	08008fdb 	.word	0x08008fdb
 8007fa0:	0800904c 	.word	0x0800904c

08007fa4 <__pow5mult>:
 8007fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fa8:	4615      	mov	r5, r2
 8007faa:	f012 0203 	ands.w	r2, r2, #3
 8007fae:	4606      	mov	r6, r0
 8007fb0:	460f      	mov	r7, r1
 8007fb2:	d007      	beq.n	8007fc4 <__pow5mult+0x20>
 8007fb4:	4c25      	ldr	r4, [pc, #148]	; (800804c <__pow5mult+0xa8>)
 8007fb6:	3a01      	subs	r2, #1
 8007fb8:	2300      	movs	r3, #0
 8007fba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007fbe:	f7ff fe9b 	bl	8007cf8 <__multadd>
 8007fc2:	4607      	mov	r7, r0
 8007fc4:	10ad      	asrs	r5, r5, #2
 8007fc6:	d03d      	beq.n	8008044 <__pow5mult+0xa0>
 8007fc8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007fca:	b97c      	cbnz	r4, 8007fec <__pow5mult+0x48>
 8007fcc:	2010      	movs	r0, #16
 8007fce:	f7ff fe1b 	bl	8007c08 <malloc>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	6270      	str	r0, [r6, #36]	; 0x24
 8007fd6:	b928      	cbnz	r0, 8007fe4 <__pow5mult+0x40>
 8007fd8:	4b1d      	ldr	r3, [pc, #116]	; (8008050 <__pow5mult+0xac>)
 8007fda:	481e      	ldr	r0, [pc, #120]	; (8008054 <__pow5mult+0xb0>)
 8007fdc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007fe0:	f000 fd22 	bl	8008a28 <__assert_func>
 8007fe4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007fe8:	6004      	str	r4, [r0, #0]
 8007fea:	60c4      	str	r4, [r0, #12]
 8007fec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007ff0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ff4:	b94c      	cbnz	r4, 800800a <__pow5mult+0x66>
 8007ff6:	f240 2171 	movw	r1, #625	; 0x271
 8007ffa:	4630      	mov	r0, r6
 8007ffc:	f7ff ff12 	bl	8007e24 <__i2b>
 8008000:	2300      	movs	r3, #0
 8008002:	f8c8 0008 	str.w	r0, [r8, #8]
 8008006:	4604      	mov	r4, r0
 8008008:	6003      	str	r3, [r0, #0]
 800800a:	f04f 0900 	mov.w	r9, #0
 800800e:	07eb      	lsls	r3, r5, #31
 8008010:	d50a      	bpl.n	8008028 <__pow5mult+0x84>
 8008012:	4639      	mov	r1, r7
 8008014:	4622      	mov	r2, r4
 8008016:	4630      	mov	r0, r6
 8008018:	f7ff ff1a 	bl	8007e50 <__multiply>
 800801c:	4639      	mov	r1, r7
 800801e:	4680      	mov	r8, r0
 8008020:	4630      	mov	r0, r6
 8008022:	f7ff fe47 	bl	8007cb4 <_Bfree>
 8008026:	4647      	mov	r7, r8
 8008028:	106d      	asrs	r5, r5, #1
 800802a:	d00b      	beq.n	8008044 <__pow5mult+0xa0>
 800802c:	6820      	ldr	r0, [r4, #0]
 800802e:	b938      	cbnz	r0, 8008040 <__pow5mult+0x9c>
 8008030:	4622      	mov	r2, r4
 8008032:	4621      	mov	r1, r4
 8008034:	4630      	mov	r0, r6
 8008036:	f7ff ff0b 	bl	8007e50 <__multiply>
 800803a:	6020      	str	r0, [r4, #0]
 800803c:	f8c0 9000 	str.w	r9, [r0]
 8008040:	4604      	mov	r4, r0
 8008042:	e7e4      	b.n	800800e <__pow5mult+0x6a>
 8008044:	4638      	mov	r0, r7
 8008046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800804a:	bf00      	nop
 800804c:	08009198 	.word	0x08009198
 8008050:	08008f69 	.word	0x08008f69
 8008054:	0800904c 	.word	0x0800904c

08008058 <__lshift>:
 8008058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800805c:	460c      	mov	r4, r1
 800805e:	6849      	ldr	r1, [r1, #4]
 8008060:	6923      	ldr	r3, [r4, #16]
 8008062:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008066:	68a3      	ldr	r3, [r4, #8]
 8008068:	4607      	mov	r7, r0
 800806a:	4691      	mov	r9, r2
 800806c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008070:	f108 0601 	add.w	r6, r8, #1
 8008074:	42b3      	cmp	r3, r6
 8008076:	db0b      	blt.n	8008090 <__lshift+0x38>
 8008078:	4638      	mov	r0, r7
 800807a:	f7ff fddb 	bl	8007c34 <_Balloc>
 800807e:	4605      	mov	r5, r0
 8008080:	b948      	cbnz	r0, 8008096 <__lshift+0x3e>
 8008082:	4602      	mov	r2, r0
 8008084:	4b2a      	ldr	r3, [pc, #168]	; (8008130 <__lshift+0xd8>)
 8008086:	482b      	ldr	r0, [pc, #172]	; (8008134 <__lshift+0xdc>)
 8008088:	f240 11d9 	movw	r1, #473	; 0x1d9
 800808c:	f000 fccc 	bl	8008a28 <__assert_func>
 8008090:	3101      	adds	r1, #1
 8008092:	005b      	lsls	r3, r3, #1
 8008094:	e7ee      	b.n	8008074 <__lshift+0x1c>
 8008096:	2300      	movs	r3, #0
 8008098:	f100 0114 	add.w	r1, r0, #20
 800809c:	f100 0210 	add.w	r2, r0, #16
 80080a0:	4618      	mov	r0, r3
 80080a2:	4553      	cmp	r3, sl
 80080a4:	db37      	blt.n	8008116 <__lshift+0xbe>
 80080a6:	6920      	ldr	r0, [r4, #16]
 80080a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080ac:	f104 0314 	add.w	r3, r4, #20
 80080b0:	f019 091f 	ands.w	r9, r9, #31
 80080b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80080b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80080bc:	d02f      	beq.n	800811e <__lshift+0xc6>
 80080be:	f1c9 0e20 	rsb	lr, r9, #32
 80080c2:	468a      	mov	sl, r1
 80080c4:	f04f 0c00 	mov.w	ip, #0
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	fa02 f209 	lsl.w	r2, r2, r9
 80080ce:	ea42 020c 	orr.w	r2, r2, ip
 80080d2:	f84a 2b04 	str.w	r2, [sl], #4
 80080d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80080da:	4298      	cmp	r0, r3
 80080dc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80080e0:	d8f2      	bhi.n	80080c8 <__lshift+0x70>
 80080e2:	1b03      	subs	r3, r0, r4
 80080e4:	3b15      	subs	r3, #21
 80080e6:	f023 0303 	bic.w	r3, r3, #3
 80080ea:	3304      	adds	r3, #4
 80080ec:	f104 0215 	add.w	r2, r4, #21
 80080f0:	4290      	cmp	r0, r2
 80080f2:	bf38      	it	cc
 80080f4:	2304      	movcc	r3, #4
 80080f6:	f841 c003 	str.w	ip, [r1, r3]
 80080fa:	f1bc 0f00 	cmp.w	ip, #0
 80080fe:	d001      	beq.n	8008104 <__lshift+0xac>
 8008100:	f108 0602 	add.w	r6, r8, #2
 8008104:	3e01      	subs	r6, #1
 8008106:	4638      	mov	r0, r7
 8008108:	612e      	str	r6, [r5, #16]
 800810a:	4621      	mov	r1, r4
 800810c:	f7ff fdd2 	bl	8007cb4 <_Bfree>
 8008110:	4628      	mov	r0, r5
 8008112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008116:	f842 0f04 	str.w	r0, [r2, #4]!
 800811a:	3301      	adds	r3, #1
 800811c:	e7c1      	b.n	80080a2 <__lshift+0x4a>
 800811e:	3904      	subs	r1, #4
 8008120:	f853 2b04 	ldr.w	r2, [r3], #4
 8008124:	f841 2f04 	str.w	r2, [r1, #4]!
 8008128:	4298      	cmp	r0, r3
 800812a:	d8f9      	bhi.n	8008120 <__lshift+0xc8>
 800812c:	e7ea      	b.n	8008104 <__lshift+0xac>
 800812e:	bf00      	nop
 8008130:	08008fdb 	.word	0x08008fdb
 8008134:	0800904c 	.word	0x0800904c

08008138 <__mcmp>:
 8008138:	b530      	push	{r4, r5, lr}
 800813a:	6902      	ldr	r2, [r0, #16]
 800813c:	690c      	ldr	r4, [r1, #16]
 800813e:	1b12      	subs	r2, r2, r4
 8008140:	d10e      	bne.n	8008160 <__mcmp+0x28>
 8008142:	f100 0314 	add.w	r3, r0, #20
 8008146:	3114      	adds	r1, #20
 8008148:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800814c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008150:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008154:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008158:	42a5      	cmp	r5, r4
 800815a:	d003      	beq.n	8008164 <__mcmp+0x2c>
 800815c:	d305      	bcc.n	800816a <__mcmp+0x32>
 800815e:	2201      	movs	r2, #1
 8008160:	4610      	mov	r0, r2
 8008162:	bd30      	pop	{r4, r5, pc}
 8008164:	4283      	cmp	r3, r0
 8008166:	d3f3      	bcc.n	8008150 <__mcmp+0x18>
 8008168:	e7fa      	b.n	8008160 <__mcmp+0x28>
 800816a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800816e:	e7f7      	b.n	8008160 <__mcmp+0x28>

08008170 <__mdiff>:
 8008170:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008174:	460c      	mov	r4, r1
 8008176:	4606      	mov	r6, r0
 8008178:	4611      	mov	r1, r2
 800817a:	4620      	mov	r0, r4
 800817c:	4690      	mov	r8, r2
 800817e:	f7ff ffdb 	bl	8008138 <__mcmp>
 8008182:	1e05      	subs	r5, r0, #0
 8008184:	d110      	bne.n	80081a8 <__mdiff+0x38>
 8008186:	4629      	mov	r1, r5
 8008188:	4630      	mov	r0, r6
 800818a:	f7ff fd53 	bl	8007c34 <_Balloc>
 800818e:	b930      	cbnz	r0, 800819e <__mdiff+0x2e>
 8008190:	4b3a      	ldr	r3, [pc, #232]	; (800827c <__mdiff+0x10c>)
 8008192:	4602      	mov	r2, r0
 8008194:	f240 2132 	movw	r1, #562	; 0x232
 8008198:	4839      	ldr	r0, [pc, #228]	; (8008280 <__mdiff+0x110>)
 800819a:	f000 fc45 	bl	8008a28 <__assert_func>
 800819e:	2301      	movs	r3, #1
 80081a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80081a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a8:	bfa4      	itt	ge
 80081aa:	4643      	movge	r3, r8
 80081ac:	46a0      	movge	r8, r4
 80081ae:	4630      	mov	r0, r6
 80081b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80081b4:	bfa6      	itte	ge
 80081b6:	461c      	movge	r4, r3
 80081b8:	2500      	movge	r5, #0
 80081ba:	2501      	movlt	r5, #1
 80081bc:	f7ff fd3a 	bl	8007c34 <_Balloc>
 80081c0:	b920      	cbnz	r0, 80081cc <__mdiff+0x5c>
 80081c2:	4b2e      	ldr	r3, [pc, #184]	; (800827c <__mdiff+0x10c>)
 80081c4:	4602      	mov	r2, r0
 80081c6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80081ca:	e7e5      	b.n	8008198 <__mdiff+0x28>
 80081cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80081d0:	6926      	ldr	r6, [r4, #16]
 80081d2:	60c5      	str	r5, [r0, #12]
 80081d4:	f104 0914 	add.w	r9, r4, #20
 80081d8:	f108 0514 	add.w	r5, r8, #20
 80081dc:	f100 0e14 	add.w	lr, r0, #20
 80081e0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80081e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80081e8:	f108 0210 	add.w	r2, r8, #16
 80081ec:	46f2      	mov	sl, lr
 80081ee:	2100      	movs	r1, #0
 80081f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80081f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80081f8:	fa1f f883 	uxth.w	r8, r3
 80081fc:	fa11 f18b 	uxtah	r1, r1, fp
 8008200:	0c1b      	lsrs	r3, r3, #16
 8008202:	eba1 0808 	sub.w	r8, r1, r8
 8008206:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800820a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800820e:	fa1f f888 	uxth.w	r8, r8
 8008212:	1419      	asrs	r1, r3, #16
 8008214:	454e      	cmp	r6, r9
 8008216:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800821a:	f84a 3b04 	str.w	r3, [sl], #4
 800821e:	d8e7      	bhi.n	80081f0 <__mdiff+0x80>
 8008220:	1b33      	subs	r3, r6, r4
 8008222:	3b15      	subs	r3, #21
 8008224:	f023 0303 	bic.w	r3, r3, #3
 8008228:	3304      	adds	r3, #4
 800822a:	3415      	adds	r4, #21
 800822c:	42a6      	cmp	r6, r4
 800822e:	bf38      	it	cc
 8008230:	2304      	movcc	r3, #4
 8008232:	441d      	add	r5, r3
 8008234:	4473      	add	r3, lr
 8008236:	469e      	mov	lr, r3
 8008238:	462e      	mov	r6, r5
 800823a:	4566      	cmp	r6, ip
 800823c:	d30e      	bcc.n	800825c <__mdiff+0xec>
 800823e:	f10c 0203 	add.w	r2, ip, #3
 8008242:	1b52      	subs	r2, r2, r5
 8008244:	f022 0203 	bic.w	r2, r2, #3
 8008248:	3d03      	subs	r5, #3
 800824a:	45ac      	cmp	ip, r5
 800824c:	bf38      	it	cc
 800824e:	2200      	movcc	r2, #0
 8008250:	441a      	add	r2, r3
 8008252:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008256:	b17b      	cbz	r3, 8008278 <__mdiff+0x108>
 8008258:	6107      	str	r7, [r0, #16]
 800825a:	e7a3      	b.n	80081a4 <__mdiff+0x34>
 800825c:	f856 8b04 	ldr.w	r8, [r6], #4
 8008260:	fa11 f288 	uxtah	r2, r1, r8
 8008264:	1414      	asrs	r4, r2, #16
 8008266:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800826a:	b292      	uxth	r2, r2
 800826c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008270:	f84e 2b04 	str.w	r2, [lr], #4
 8008274:	1421      	asrs	r1, r4, #16
 8008276:	e7e0      	b.n	800823a <__mdiff+0xca>
 8008278:	3f01      	subs	r7, #1
 800827a:	e7ea      	b.n	8008252 <__mdiff+0xe2>
 800827c:	08008fdb 	.word	0x08008fdb
 8008280:	0800904c 	.word	0x0800904c

08008284 <__d2b>:
 8008284:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008288:	4689      	mov	r9, r1
 800828a:	2101      	movs	r1, #1
 800828c:	ec57 6b10 	vmov	r6, r7, d0
 8008290:	4690      	mov	r8, r2
 8008292:	f7ff fccf 	bl	8007c34 <_Balloc>
 8008296:	4604      	mov	r4, r0
 8008298:	b930      	cbnz	r0, 80082a8 <__d2b+0x24>
 800829a:	4602      	mov	r2, r0
 800829c:	4b25      	ldr	r3, [pc, #148]	; (8008334 <__d2b+0xb0>)
 800829e:	4826      	ldr	r0, [pc, #152]	; (8008338 <__d2b+0xb4>)
 80082a0:	f240 310a 	movw	r1, #778	; 0x30a
 80082a4:	f000 fbc0 	bl	8008a28 <__assert_func>
 80082a8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80082ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80082b0:	bb35      	cbnz	r5, 8008300 <__d2b+0x7c>
 80082b2:	2e00      	cmp	r6, #0
 80082b4:	9301      	str	r3, [sp, #4]
 80082b6:	d028      	beq.n	800830a <__d2b+0x86>
 80082b8:	4668      	mov	r0, sp
 80082ba:	9600      	str	r6, [sp, #0]
 80082bc:	f7ff fd82 	bl	8007dc4 <__lo0bits>
 80082c0:	9900      	ldr	r1, [sp, #0]
 80082c2:	b300      	cbz	r0, 8008306 <__d2b+0x82>
 80082c4:	9a01      	ldr	r2, [sp, #4]
 80082c6:	f1c0 0320 	rsb	r3, r0, #32
 80082ca:	fa02 f303 	lsl.w	r3, r2, r3
 80082ce:	430b      	orrs	r3, r1
 80082d0:	40c2      	lsrs	r2, r0
 80082d2:	6163      	str	r3, [r4, #20]
 80082d4:	9201      	str	r2, [sp, #4]
 80082d6:	9b01      	ldr	r3, [sp, #4]
 80082d8:	61a3      	str	r3, [r4, #24]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	bf14      	ite	ne
 80082de:	2202      	movne	r2, #2
 80082e0:	2201      	moveq	r2, #1
 80082e2:	6122      	str	r2, [r4, #16]
 80082e4:	b1d5      	cbz	r5, 800831c <__d2b+0x98>
 80082e6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80082ea:	4405      	add	r5, r0
 80082ec:	f8c9 5000 	str.w	r5, [r9]
 80082f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80082f4:	f8c8 0000 	str.w	r0, [r8]
 80082f8:	4620      	mov	r0, r4
 80082fa:	b003      	add	sp, #12
 80082fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008300:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008304:	e7d5      	b.n	80082b2 <__d2b+0x2e>
 8008306:	6161      	str	r1, [r4, #20]
 8008308:	e7e5      	b.n	80082d6 <__d2b+0x52>
 800830a:	a801      	add	r0, sp, #4
 800830c:	f7ff fd5a 	bl	8007dc4 <__lo0bits>
 8008310:	9b01      	ldr	r3, [sp, #4]
 8008312:	6163      	str	r3, [r4, #20]
 8008314:	2201      	movs	r2, #1
 8008316:	6122      	str	r2, [r4, #16]
 8008318:	3020      	adds	r0, #32
 800831a:	e7e3      	b.n	80082e4 <__d2b+0x60>
 800831c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008320:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008324:	f8c9 0000 	str.w	r0, [r9]
 8008328:	6918      	ldr	r0, [r3, #16]
 800832a:	f7ff fd2b 	bl	8007d84 <__hi0bits>
 800832e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008332:	e7df      	b.n	80082f4 <__d2b+0x70>
 8008334:	08008fdb 	.word	0x08008fdb
 8008338:	0800904c 	.word	0x0800904c

0800833c <_calloc_r>:
 800833c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800833e:	fba1 2402 	umull	r2, r4, r1, r2
 8008342:	b94c      	cbnz	r4, 8008358 <_calloc_r+0x1c>
 8008344:	4611      	mov	r1, r2
 8008346:	9201      	str	r2, [sp, #4]
 8008348:	f000 f87a 	bl	8008440 <_malloc_r>
 800834c:	9a01      	ldr	r2, [sp, #4]
 800834e:	4605      	mov	r5, r0
 8008350:	b930      	cbnz	r0, 8008360 <_calloc_r+0x24>
 8008352:	4628      	mov	r0, r5
 8008354:	b003      	add	sp, #12
 8008356:	bd30      	pop	{r4, r5, pc}
 8008358:	220c      	movs	r2, #12
 800835a:	6002      	str	r2, [r0, #0]
 800835c:	2500      	movs	r5, #0
 800835e:	e7f8      	b.n	8008352 <_calloc_r+0x16>
 8008360:	4621      	mov	r1, r4
 8008362:	f7fe f84f 	bl	8006404 <memset>
 8008366:	e7f4      	b.n	8008352 <_calloc_r+0x16>

08008368 <_free_r>:
 8008368:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800836a:	2900      	cmp	r1, #0
 800836c:	d044      	beq.n	80083f8 <_free_r+0x90>
 800836e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008372:	9001      	str	r0, [sp, #4]
 8008374:	2b00      	cmp	r3, #0
 8008376:	f1a1 0404 	sub.w	r4, r1, #4
 800837a:	bfb8      	it	lt
 800837c:	18e4      	addlt	r4, r4, r3
 800837e:	f000 fcdf 	bl	8008d40 <__malloc_lock>
 8008382:	4a1e      	ldr	r2, [pc, #120]	; (80083fc <_free_r+0x94>)
 8008384:	9801      	ldr	r0, [sp, #4]
 8008386:	6813      	ldr	r3, [r2, #0]
 8008388:	b933      	cbnz	r3, 8008398 <_free_r+0x30>
 800838a:	6063      	str	r3, [r4, #4]
 800838c:	6014      	str	r4, [r2, #0]
 800838e:	b003      	add	sp, #12
 8008390:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008394:	f000 bcda 	b.w	8008d4c <__malloc_unlock>
 8008398:	42a3      	cmp	r3, r4
 800839a:	d908      	bls.n	80083ae <_free_r+0x46>
 800839c:	6825      	ldr	r5, [r4, #0]
 800839e:	1961      	adds	r1, r4, r5
 80083a0:	428b      	cmp	r3, r1
 80083a2:	bf01      	itttt	eq
 80083a4:	6819      	ldreq	r1, [r3, #0]
 80083a6:	685b      	ldreq	r3, [r3, #4]
 80083a8:	1949      	addeq	r1, r1, r5
 80083aa:	6021      	streq	r1, [r4, #0]
 80083ac:	e7ed      	b.n	800838a <_free_r+0x22>
 80083ae:	461a      	mov	r2, r3
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	b10b      	cbz	r3, 80083b8 <_free_r+0x50>
 80083b4:	42a3      	cmp	r3, r4
 80083b6:	d9fa      	bls.n	80083ae <_free_r+0x46>
 80083b8:	6811      	ldr	r1, [r2, #0]
 80083ba:	1855      	adds	r5, r2, r1
 80083bc:	42a5      	cmp	r5, r4
 80083be:	d10b      	bne.n	80083d8 <_free_r+0x70>
 80083c0:	6824      	ldr	r4, [r4, #0]
 80083c2:	4421      	add	r1, r4
 80083c4:	1854      	adds	r4, r2, r1
 80083c6:	42a3      	cmp	r3, r4
 80083c8:	6011      	str	r1, [r2, #0]
 80083ca:	d1e0      	bne.n	800838e <_free_r+0x26>
 80083cc:	681c      	ldr	r4, [r3, #0]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	6053      	str	r3, [r2, #4]
 80083d2:	4421      	add	r1, r4
 80083d4:	6011      	str	r1, [r2, #0]
 80083d6:	e7da      	b.n	800838e <_free_r+0x26>
 80083d8:	d902      	bls.n	80083e0 <_free_r+0x78>
 80083da:	230c      	movs	r3, #12
 80083dc:	6003      	str	r3, [r0, #0]
 80083de:	e7d6      	b.n	800838e <_free_r+0x26>
 80083e0:	6825      	ldr	r5, [r4, #0]
 80083e2:	1961      	adds	r1, r4, r5
 80083e4:	428b      	cmp	r3, r1
 80083e6:	bf04      	itt	eq
 80083e8:	6819      	ldreq	r1, [r3, #0]
 80083ea:	685b      	ldreq	r3, [r3, #4]
 80083ec:	6063      	str	r3, [r4, #4]
 80083ee:	bf04      	itt	eq
 80083f0:	1949      	addeq	r1, r1, r5
 80083f2:	6021      	streq	r1, [r4, #0]
 80083f4:	6054      	str	r4, [r2, #4]
 80083f6:	e7ca      	b.n	800838e <_free_r+0x26>
 80083f8:	b003      	add	sp, #12
 80083fa:	bd30      	pop	{r4, r5, pc}
 80083fc:	20000334 	.word	0x20000334

08008400 <sbrk_aligned>:
 8008400:	b570      	push	{r4, r5, r6, lr}
 8008402:	4e0e      	ldr	r6, [pc, #56]	; (800843c <sbrk_aligned+0x3c>)
 8008404:	460c      	mov	r4, r1
 8008406:	6831      	ldr	r1, [r6, #0]
 8008408:	4605      	mov	r5, r0
 800840a:	b911      	cbnz	r1, 8008412 <sbrk_aligned+0x12>
 800840c:	f000 f9e6 	bl	80087dc <_sbrk_r>
 8008410:	6030      	str	r0, [r6, #0]
 8008412:	4621      	mov	r1, r4
 8008414:	4628      	mov	r0, r5
 8008416:	f000 f9e1 	bl	80087dc <_sbrk_r>
 800841a:	1c43      	adds	r3, r0, #1
 800841c:	d00a      	beq.n	8008434 <sbrk_aligned+0x34>
 800841e:	1cc4      	adds	r4, r0, #3
 8008420:	f024 0403 	bic.w	r4, r4, #3
 8008424:	42a0      	cmp	r0, r4
 8008426:	d007      	beq.n	8008438 <sbrk_aligned+0x38>
 8008428:	1a21      	subs	r1, r4, r0
 800842a:	4628      	mov	r0, r5
 800842c:	f000 f9d6 	bl	80087dc <_sbrk_r>
 8008430:	3001      	adds	r0, #1
 8008432:	d101      	bne.n	8008438 <sbrk_aligned+0x38>
 8008434:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008438:	4620      	mov	r0, r4
 800843a:	bd70      	pop	{r4, r5, r6, pc}
 800843c:	20000338 	.word	0x20000338

08008440 <_malloc_r>:
 8008440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008444:	1ccd      	adds	r5, r1, #3
 8008446:	f025 0503 	bic.w	r5, r5, #3
 800844a:	3508      	adds	r5, #8
 800844c:	2d0c      	cmp	r5, #12
 800844e:	bf38      	it	cc
 8008450:	250c      	movcc	r5, #12
 8008452:	2d00      	cmp	r5, #0
 8008454:	4607      	mov	r7, r0
 8008456:	db01      	blt.n	800845c <_malloc_r+0x1c>
 8008458:	42a9      	cmp	r1, r5
 800845a:	d905      	bls.n	8008468 <_malloc_r+0x28>
 800845c:	230c      	movs	r3, #12
 800845e:	603b      	str	r3, [r7, #0]
 8008460:	2600      	movs	r6, #0
 8008462:	4630      	mov	r0, r6
 8008464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008468:	4e2e      	ldr	r6, [pc, #184]	; (8008524 <_malloc_r+0xe4>)
 800846a:	f000 fc69 	bl	8008d40 <__malloc_lock>
 800846e:	6833      	ldr	r3, [r6, #0]
 8008470:	461c      	mov	r4, r3
 8008472:	bb34      	cbnz	r4, 80084c2 <_malloc_r+0x82>
 8008474:	4629      	mov	r1, r5
 8008476:	4638      	mov	r0, r7
 8008478:	f7ff ffc2 	bl	8008400 <sbrk_aligned>
 800847c:	1c43      	adds	r3, r0, #1
 800847e:	4604      	mov	r4, r0
 8008480:	d14d      	bne.n	800851e <_malloc_r+0xde>
 8008482:	6834      	ldr	r4, [r6, #0]
 8008484:	4626      	mov	r6, r4
 8008486:	2e00      	cmp	r6, #0
 8008488:	d140      	bne.n	800850c <_malloc_r+0xcc>
 800848a:	6823      	ldr	r3, [r4, #0]
 800848c:	4631      	mov	r1, r6
 800848e:	4638      	mov	r0, r7
 8008490:	eb04 0803 	add.w	r8, r4, r3
 8008494:	f000 f9a2 	bl	80087dc <_sbrk_r>
 8008498:	4580      	cmp	r8, r0
 800849a:	d13a      	bne.n	8008512 <_malloc_r+0xd2>
 800849c:	6821      	ldr	r1, [r4, #0]
 800849e:	3503      	adds	r5, #3
 80084a0:	1a6d      	subs	r5, r5, r1
 80084a2:	f025 0503 	bic.w	r5, r5, #3
 80084a6:	3508      	adds	r5, #8
 80084a8:	2d0c      	cmp	r5, #12
 80084aa:	bf38      	it	cc
 80084ac:	250c      	movcc	r5, #12
 80084ae:	4629      	mov	r1, r5
 80084b0:	4638      	mov	r0, r7
 80084b2:	f7ff ffa5 	bl	8008400 <sbrk_aligned>
 80084b6:	3001      	adds	r0, #1
 80084b8:	d02b      	beq.n	8008512 <_malloc_r+0xd2>
 80084ba:	6823      	ldr	r3, [r4, #0]
 80084bc:	442b      	add	r3, r5
 80084be:	6023      	str	r3, [r4, #0]
 80084c0:	e00e      	b.n	80084e0 <_malloc_r+0xa0>
 80084c2:	6822      	ldr	r2, [r4, #0]
 80084c4:	1b52      	subs	r2, r2, r5
 80084c6:	d41e      	bmi.n	8008506 <_malloc_r+0xc6>
 80084c8:	2a0b      	cmp	r2, #11
 80084ca:	d916      	bls.n	80084fa <_malloc_r+0xba>
 80084cc:	1961      	adds	r1, r4, r5
 80084ce:	42a3      	cmp	r3, r4
 80084d0:	6025      	str	r5, [r4, #0]
 80084d2:	bf18      	it	ne
 80084d4:	6059      	strne	r1, [r3, #4]
 80084d6:	6863      	ldr	r3, [r4, #4]
 80084d8:	bf08      	it	eq
 80084da:	6031      	streq	r1, [r6, #0]
 80084dc:	5162      	str	r2, [r4, r5]
 80084de:	604b      	str	r3, [r1, #4]
 80084e0:	4638      	mov	r0, r7
 80084e2:	f104 060b 	add.w	r6, r4, #11
 80084e6:	f000 fc31 	bl	8008d4c <__malloc_unlock>
 80084ea:	f026 0607 	bic.w	r6, r6, #7
 80084ee:	1d23      	adds	r3, r4, #4
 80084f0:	1af2      	subs	r2, r6, r3
 80084f2:	d0b6      	beq.n	8008462 <_malloc_r+0x22>
 80084f4:	1b9b      	subs	r3, r3, r6
 80084f6:	50a3      	str	r3, [r4, r2]
 80084f8:	e7b3      	b.n	8008462 <_malloc_r+0x22>
 80084fa:	6862      	ldr	r2, [r4, #4]
 80084fc:	42a3      	cmp	r3, r4
 80084fe:	bf0c      	ite	eq
 8008500:	6032      	streq	r2, [r6, #0]
 8008502:	605a      	strne	r2, [r3, #4]
 8008504:	e7ec      	b.n	80084e0 <_malloc_r+0xa0>
 8008506:	4623      	mov	r3, r4
 8008508:	6864      	ldr	r4, [r4, #4]
 800850a:	e7b2      	b.n	8008472 <_malloc_r+0x32>
 800850c:	4634      	mov	r4, r6
 800850e:	6876      	ldr	r6, [r6, #4]
 8008510:	e7b9      	b.n	8008486 <_malloc_r+0x46>
 8008512:	230c      	movs	r3, #12
 8008514:	603b      	str	r3, [r7, #0]
 8008516:	4638      	mov	r0, r7
 8008518:	f000 fc18 	bl	8008d4c <__malloc_unlock>
 800851c:	e7a1      	b.n	8008462 <_malloc_r+0x22>
 800851e:	6025      	str	r5, [r4, #0]
 8008520:	e7de      	b.n	80084e0 <_malloc_r+0xa0>
 8008522:	bf00      	nop
 8008524:	20000334 	.word	0x20000334

08008528 <__sfputc_r>:
 8008528:	6893      	ldr	r3, [r2, #8]
 800852a:	3b01      	subs	r3, #1
 800852c:	2b00      	cmp	r3, #0
 800852e:	b410      	push	{r4}
 8008530:	6093      	str	r3, [r2, #8]
 8008532:	da08      	bge.n	8008546 <__sfputc_r+0x1e>
 8008534:	6994      	ldr	r4, [r2, #24]
 8008536:	42a3      	cmp	r3, r4
 8008538:	db01      	blt.n	800853e <__sfputc_r+0x16>
 800853a:	290a      	cmp	r1, #10
 800853c:	d103      	bne.n	8008546 <__sfputc_r+0x1e>
 800853e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008542:	f000 b99f 	b.w	8008884 <__swbuf_r>
 8008546:	6813      	ldr	r3, [r2, #0]
 8008548:	1c58      	adds	r0, r3, #1
 800854a:	6010      	str	r0, [r2, #0]
 800854c:	7019      	strb	r1, [r3, #0]
 800854e:	4608      	mov	r0, r1
 8008550:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008554:	4770      	bx	lr

08008556 <__sfputs_r>:
 8008556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008558:	4606      	mov	r6, r0
 800855a:	460f      	mov	r7, r1
 800855c:	4614      	mov	r4, r2
 800855e:	18d5      	adds	r5, r2, r3
 8008560:	42ac      	cmp	r4, r5
 8008562:	d101      	bne.n	8008568 <__sfputs_r+0x12>
 8008564:	2000      	movs	r0, #0
 8008566:	e007      	b.n	8008578 <__sfputs_r+0x22>
 8008568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800856c:	463a      	mov	r2, r7
 800856e:	4630      	mov	r0, r6
 8008570:	f7ff ffda 	bl	8008528 <__sfputc_r>
 8008574:	1c43      	adds	r3, r0, #1
 8008576:	d1f3      	bne.n	8008560 <__sfputs_r+0xa>
 8008578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800857c <_vfiprintf_r>:
 800857c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008580:	460d      	mov	r5, r1
 8008582:	b09d      	sub	sp, #116	; 0x74
 8008584:	4614      	mov	r4, r2
 8008586:	4698      	mov	r8, r3
 8008588:	4606      	mov	r6, r0
 800858a:	b118      	cbz	r0, 8008594 <_vfiprintf_r+0x18>
 800858c:	6983      	ldr	r3, [r0, #24]
 800858e:	b90b      	cbnz	r3, 8008594 <_vfiprintf_r+0x18>
 8008590:	f7ff fa94 	bl	8007abc <__sinit>
 8008594:	4b89      	ldr	r3, [pc, #548]	; (80087bc <_vfiprintf_r+0x240>)
 8008596:	429d      	cmp	r5, r3
 8008598:	d11b      	bne.n	80085d2 <_vfiprintf_r+0x56>
 800859a:	6875      	ldr	r5, [r6, #4]
 800859c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800859e:	07d9      	lsls	r1, r3, #31
 80085a0:	d405      	bmi.n	80085ae <_vfiprintf_r+0x32>
 80085a2:	89ab      	ldrh	r3, [r5, #12]
 80085a4:	059a      	lsls	r2, r3, #22
 80085a6:	d402      	bmi.n	80085ae <_vfiprintf_r+0x32>
 80085a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085aa:	f7ff fb2a 	bl	8007c02 <__retarget_lock_acquire_recursive>
 80085ae:	89ab      	ldrh	r3, [r5, #12]
 80085b0:	071b      	lsls	r3, r3, #28
 80085b2:	d501      	bpl.n	80085b8 <_vfiprintf_r+0x3c>
 80085b4:	692b      	ldr	r3, [r5, #16]
 80085b6:	b9eb      	cbnz	r3, 80085f4 <_vfiprintf_r+0x78>
 80085b8:	4629      	mov	r1, r5
 80085ba:	4630      	mov	r0, r6
 80085bc:	f000 f9c6 	bl	800894c <__swsetup_r>
 80085c0:	b1c0      	cbz	r0, 80085f4 <_vfiprintf_r+0x78>
 80085c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085c4:	07dc      	lsls	r4, r3, #31
 80085c6:	d50e      	bpl.n	80085e6 <_vfiprintf_r+0x6a>
 80085c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085cc:	b01d      	add	sp, #116	; 0x74
 80085ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085d2:	4b7b      	ldr	r3, [pc, #492]	; (80087c0 <_vfiprintf_r+0x244>)
 80085d4:	429d      	cmp	r5, r3
 80085d6:	d101      	bne.n	80085dc <_vfiprintf_r+0x60>
 80085d8:	68b5      	ldr	r5, [r6, #8]
 80085da:	e7df      	b.n	800859c <_vfiprintf_r+0x20>
 80085dc:	4b79      	ldr	r3, [pc, #484]	; (80087c4 <_vfiprintf_r+0x248>)
 80085de:	429d      	cmp	r5, r3
 80085e0:	bf08      	it	eq
 80085e2:	68f5      	ldreq	r5, [r6, #12]
 80085e4:	e7da      	b.n	800859c <_vfiprintf_r+0x20>
 80085e6:	89ab      	ldrh	r3, [r5, #12]
 80085e8:	0598      	lsls	r0, r3, #22
 80085ea:	d4ed      	bmi.n	80085c8 <_vfiprintf_r+0x4c>
 80085ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085ee:	f7ff fb09 	bl	8007c04 <__retarget_lock_release_recursive>
 80085f2:	e7e9      	b.n	80085c8 <_vfiprintf_r+0x4c>
 80085f4:	2300      	movs	r3, #0
 80085f6:	9309      	str	r3, [sp, #36]	; 0x24
 80085f8:	2320      	movs	r3, #32
 80085fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008602:	2330      	movs	r3, #48	; 0x30
 8008604:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80087c8 <_vfiprintf_r+0x24c>
 8008608:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800860c:	f04f 0901 	mov.w	r9, #1
 8008610:	4623      	mov	r3, r4
 8008612:	469a      	mov	sl, r3
 8008614:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008618:	b10a      	cbz	r2, 800861e <_vfiprintf_r+0xa2>
 800861a:	2a25      	cmp	r2, #37	; 0x25
 800861c:	d1f9      	bne.n	8008612 <_vfiprintf_r+0x96>
 800861e:	ebba 0b04 	subs.w	fp, sl, r4
 8008622:	d00b      	beq.n	800863c <_vfiprintf_r+0xc0>
 8008624:	465b      	mov	r3, fp
 8008626:	4622      	mov	r2, r4
 8008628:	4629      	mov	r1, r5
 800862a:	4630      	mov	r0, r6
 800862c:	f7ff ff93 	bl	8008556 <__sfputs_r>
 8008630:	3001      	adds	r0, #1
 8008632:	f000 80aa 	beq.w	800878a <_vfiprintf_r+0x20e>
 8008636:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008638:	445a      	add	r2, fp
 800863a:	9209      	str	r2, [sp, #36]	; 0x24
 800863c:	f89a 3000 	ldrb.w	r3, [sl]
 8008640:	2b00      	cmp	r3, #0
 8008642:	f000 80a2 	beq.w	800878a <_vfiprintf_r+0x20e>
 8008646:	2300      	movs	r3, #0
 8008648:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800864c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008650:	f10a 0a01 	add.w	sl, sl, #1
 8008654:	9304      	str	r3, [sp, #16]
 8008656:	9307      	str	r3, [sp, #28]
 8008658:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800865c:	931a      	str	r3, [sp, #104]	; 0x68
 800865e:	4654      	mov	r4, sl
 8008660:	2205      	movs	r2, #5
 8008662:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008666:	4858      	ldr	r0, [pc, #352]	; (80087c8 <_vfiprintf_r+0x24c>)
 8008668:	f7f7 fdd2 	bl	8000210 <memchr>
 800866c:	9a04      	ldr	r2, [sp, #16]
 800866e:	b9d8      	cbnz	r0, 80086a8 <_vfiprintf_r+0x12c>
 8008670:	06d1      	lsls	r1, r2, #27
 8008672:	bf44      	itt	mi
 8008674:	2320      	movmi	r3, #32
 8008676:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800867a:	0713      	lsls	r3, r2, #28
 800867c:	bf44      	itt	mi
 800867e:	232b      	movmi	r3, #43	; 0x2b
 8008680:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008684:	f89a 3000 	ldrb.w	r3, [sl]
 8008688:	2b2a      	cmp	r3, #42	; 0x2a
 800868a:	d015      	beq.n	80086b8 <_vfiprintf_r+0x13c>
 800868c:	9a07      	ldr	r2, [sp, #28]
 800868e:	4654      	mov	r4, sl
 8008690:	2000      	movs	r0, #0
 8008692:	f04f 0c0a 	mov.w	ip, #10
 8008696:	4621      	mov	r1, r4
 8008698:	f811 3b01 	ldrb.w	r3, [r1], #1
 800869c:	3b30      	subs	r3, #48	; 0x30
 800869e:	2b09      	cmp	r3, #9
 80086a0:	d94e      	bls.n	8008740 <_vfiprintf_r+0x1c4>
 80086a2:	b1b0      	cbz	r0, 80086d2 <_vfiprintf_r+0x156>
 80086a4:	9207      	str	r2, [sp, #28]
 80086a6:	e014      	b.n	80086d2 <_vfiprintf_r+0x156>
 80086a8:	eba0 0308 	sub.w	r3, r0, r8
 80086ac:	fa09 f303 	lsl.w	r3, r9, r3
 80086b0:	4313      	orrs	r3, r2
 80086b2:	9304      	str	r3, [sp, #16]
 80086b4:	46a2      	mov	sl, r4
 80086b6:	e7d2      	b.n	800865e <_vfiprintf_r+0xe2>
 80086b8:	9b03      	ldr	r3, [sp, #12]
 80086ba:	1d19      	adds	r1, r3, #4
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	9103      	str	r1, [sp, #12]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	bfbb      	ittet	lt
 80086c4:	425b      	neglt	r3, r3
 80086c6:	f042 0202 	orrlt.w	r2, r2, #2
 80086ca:	9307      	strge	r3, [sp, #28]
 80086cc:	9307      	strlt	r3, [sp, #28]
 80086ce:	bfb8      	it	lt
 80086d0:	9204      	strlt	r2, [sp, #16]
 80086d2:	7823      	ldrb	r3, [r4, #0]
 80086d4:	2b2e      	cmp	r3, #46	; 0x2e
 80086d6:	d10c      	bne.n	80086f2 <_vfiprintf_r+0x176>
 80086d8:	7863      	ldrb	r3, [r4, #1]
 80086da:	2b2a      	cmp	r3, #42	; 0x2a
 80086dc:	d135      	bne.n	800874a <_vfiprintf_r+0x1ce>
 80086de:	9b03      	ldr	r3, [sp, #12]
 80086e0:	1d1a      	adds	r2, r3, #4
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	9203      	str	r2, [sp, #12]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	bfb8      	it	lt
 80086ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80086ee:	3402      	adds	r4, #2
 80086f0:	9305      	str	r3, [sp, #20]
 80086f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80087d8 <_vfiprintf_r+0x25c>
 80086f6:	7821      	ldrb	r1, [r4, #0]
 80086f8:	2203      	movs	r2, #3
 80086fa:	4650      	mov	r0, sl
 80086fc:	f7f7 fd88 	bl	8000210 <memchr>
 8008700:	b140      	cbz	r0, 8008714 <_vfiprintf_r+0x198>
 8008702:	2340      	movs	r3, #64	; 0x40
 8008704:	eba0 000a 	sub.w	r0, r0, sl
 8008708:	fa03 f000 	lsl.w	r0, r3, r0
 800870c:	9b04      	ldr	r3, [sp, #16]
 800870e:	4303      	orrs	r3, r0
 8008710:	3401      	adds	r4, #1
 8008712:	9304      	str	r3, [sp, #16]
 8008714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008718:	482c      	ldr	r0, [pc, #176]	; (80087cc <_vfiprintf_r+0x250>)
 800871a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800871e:	2206      	movs	r2, #6
 8008720:	f7f7 fd76 	bl	8000210 <memchr>
 8008724:	2800      	cmp	r0, #0
 8008726:	d03f      	beq.n	80087a8 <_vfiprintf_r+0x22c>
 8008728:	4b29      	ldr	r3, [pc, #164]	; (80087d0 <_vfiprintf_r+0x254>)
 800872a:	bb1b      	cbnz	r3, 8008774 <_vfiprintf_r+0x1f8>
 800872c:	9b03      	ldr	r3, [sp, #12]
 800872e:	3307      	adds	r3, #7
 8008730:	f023 0307 	bic.w	r3, r3, #7
 8008734:	3308      	adds	r3, #8
 8008736:	9303      	str	r3, [sp, #12]
 8008738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800873a:	443b      	add	r3, r7
 800873c:	9309      	str	r3, [sp, #36]	; 0x24
 800873e:	e767      	b.n	8008610 <_vfiprintf_r+0x94>
 8008740:	fb0c 3202 	mla	r2, ip, r2, r3
 8008744:	460c      	mov	r4, r1
 8008746:	2001      	movs	r0, #1
 8008748:	e7a5      	b.n	8008696 <_vfiprintf_r+0x11a>
 800874a:	2300      	movs	r3, #0
 800874c:	3401      	adds	r4, #1
 800874e:	9305      	str	r3, [sp, #20]
 8008750:	4619      	mov	r1, r3
 8008752:	f04f 0c0a 	mov.w	ip, #10
 8008756:	4620      	mov	r0, r4
 8008758:	f810 2b01 	ldrb.w	r2, [r0], #1
 800875c:	3a30      	subs	r2, #48	; 0x30
 800875e:	2a09      	cmp	r2, #9
 8008760:	d903      	bls.n	800876a <_vfiprintf_r+0x1ee>
 8008762:	2b00      	cmp	r3, #0
 8008764:	d0c5      	beq.n	80086f2 <_vfiprintf_r+0x176>
 8008766:	9105      	str	r1, [sp, #20]
 8008768:	e7c3      	b.n	80086f2 <_vfiprintf_r+0x176>
 800876a:	fb0c 2101 	mla	r1, ip, r1, r2
 800876e:	4604      	mov	r4, r0
 8008770:	2301      	movs	r3, #1
 8008772:	e7f0      	b.n	8008756 <_vfiprintf_r+0x1da>
 8008774:	ab03      	add	r3, sp, #12
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	462a      	mov	r2, r5
 800877a:	4b16      	ldr	r3, [pc, #88]	; (80087d4 <_vfiprintf_r+0x258>)
 800877c:	a904      	add	r1, sp, #16
 800877e:	4630      	mov	r0, r6
 8008780:	f7fd fee8 	bl	8006554 <_printf_float>
 8008784:	4607      	mov	r7, r0
 8008786:	1c78      	adds	r0, r7, #1
 8008788:	d1d6      	bne.n	8008738 <_vfiprintf_r+0x1bc>
 800878a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800878c:	07d9      	lsls	r1, r3, #31
 800878e:	d405      	bmi.n	800879c <_vfiprintf_r+0x220>
 8008790:	89ab      	ldrh	r3, [r5, #12]
 8008792:	059a      	lsls	r2, r3, #22
 8008794:	d402      	bmi.n	800879c <_vfiprintf_r+0x220>
 8008796:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008798:	f7ff fa34 	bl	8007c04 <__retarget_lock_release_recursive>
 800879c:	89ab      	ldrh	r3, [r5, #12]
 800879e:	065b      	lsls	r3, r3, #25
 80087a0:	f53f af12 	bmi.w	80085c8 <_vfiprintf_r+0x4c>
 80087a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087a6:	e711      	b.n	80085cc <_vfiprintf_r+0x50>
 80087a8:	ab03      	add	r3, sp, #12
 80087aa:	9300      	str	r3, [sp, #0]
 80087ac:	462a      	mov	r2, r5
 80087ae:	4b09      	ldr	r3, [pc, #36]	; (80087d4 <_vfiprintf_r+0x258>)
 80087b0:	a904      	add	r1, sp, #16
 80087b2:	4630      	mov	r0, r6
 80087b4:	f7fe f972 	bl	8006a9c <_printf_i>
 80087b8:	e7e4      	b.n	8008784 <_vfiprintf_r+0x208>
 80087ba:	bf00      	nop
 80087bc:	0800900c 	.word	0x0800900c
 80087c0:	0800902c 	.word	0x0800902c
 80087c4:	08008fec 	.word	0x08008fec
 80087c8:	080091a4 	.word	0x080091a4
 80087cc:	080091ae 	.word	0x080091ae
 80087d0:	08006555 	.word	0x08006555
 80087d4:	08008557 	.word	0x08008557
 80087d8:	080091aa 	.word	0x080091aa

080087dc <_sbrk_r>:
 80087dc:	b538      	push	{r3, r4, r5, lr}
 80087de:	4d06      	ldr	r5, [pc, #24]	; (80087f8 <_sbrk_r+0x1c>)
 80087e0:	2300      	movs	r3, #0
 80087e2:	4604      	mov	r4, r0
 80087e4:	4608      	mov	r0, r1
 80087e6:	602b      	str	r3, [r5, #0]
 80087e8:	f7f9 f9c8 	bl	8001b7c <_sbrk>
 80087ec:	1c43      	adds	r3, r0, #1
 80087ee:	d102      	bne.n	80087f6 <_sbrk_r+0x1a>
 80087f0:	682b      	ldr	r3, [r5, #0]
 80087f2:	b103      	cbz	r3, 80087f6 <_sbrk_r+0x1a>
 80087f4:	6023      	str	r3, [r4, #0]
 80087f6:	bd38      	pop	{r3, r4, r5, pc}
 80087f8:	2000033c 	.word	0x2000033c

080087fc <__sread>:
 80087fc:	b510      	push	{r4, lr}
 80087fe:	460c      	mov	r4, r1
 8008800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008804:	f000 faa8 	bl	8008d58 <_read_r>
 8008808:	2800      	cmp	r0, #0
 800880a:	bfab      	itete	ge
 800880c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800880e:	89a3      	ldrhlt	r3, [r4, #12]
 8008810:	181b      	addge	r3, r3, r0
 8008812:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008816:	bfac      	ite	ge
 8008818:	6563      	strge	r3, [r4, #84]	; 0x54
 800881a:	81a3      	strhlt	r3, [r4, #12]
 800881c:	bd10      	pop	{r4, pc}

0800881e <__swrite>:
 800881e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008822:	461f      	mov	r7, r3
 8008824:	898b      	ldrh	r3, [r1, #12]
 8008826:	05db      	lsls	r3, r3, #23
 8008828:	4605      	mov	r5, r0
 800882a:	460c      	mov	r4, r1
 800882c:	4616      	mov	r6, r2
 800882e:	d505      	bpl.n	800883c <__swrite+0x1e>
 8008830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008834:	2302      	movs	r3, #2
 8008836:	2200      	movs	r2, #0
 8008838:	f000 f9f8 	bl	8008c2c <_lseek_r>
 800883c:	89a3      	ldrh	r3, [r4, #12]
 800883e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008842:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008846:	81a3      	strh	r3, [r4, #12]
 8008848:	4632      	mov	r2, r6
 800884a:	463b      	mov	r3, r7
 800884c:	4628      	mov	r0, r5
 800884e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008852:	f000 b869 	b.w	8008928 <_write_r>

08008856 <__sseek>:
 8008856:	b510      	push	{r4, lr}
 8008858:	460c      	mov	r4, r1
 800885a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800885e:	f000 f9e5 	bl	8008c2c <_lseek_r>
 8008862:	1c43      	adds	r3, r0, #1
 8008864:	89a3      	ldrh	r3, [r4, #12]
 8008866:	bf15      	itete	ne
 8008868:	6560      	strne	r0, [r4, #84]	; 0x54
 800886a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800886e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008872:	81a3      	strheq	r3, [r4, #12]
 8008874:	bf18      	it	ne
 8008876:	81a3      	strhne	r3, [r4, #12]
 8008878:	bd10      	pop	{r4, pc}

0800887a <__sclose>:
 800887a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800887e:	f000 b8f1 	b.w	8008a64 <_close_r>
	...

08008884 <__swbuf_r>:
 8008884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008886:	460e      	mov	r6, r1
 8008888:	4614      	mov	r4, r2
 800888a:	4605      	mov	r5, r0
 800888c:	b118      	cbz	r0, 8008896 <__swbuf_r+0x12>
 800888e:	6983      	ldr	r3, [r0, #24]
 8008890:	b90b      	cbnz	r3, 8008896 <__swbuf_r+0x12>
 8008892:	f7ff f913 	bl	8007abc <__sinit>
 8008896:	4b21      	ldr	r3, [pc, #132]	; (800891c <__swbuf_r+0x98>)
 8008898:	429c      	cmp	r4, r3
 800889a:	d12b      	bne.n	80088f4 <__swbuf_r+0x70>
 800889c:	686c      	ldr	r4, [r5, #4]
 800889e:	69a3      	ldr	r3, [r4, #24]
 80088a0:	60a3      	str	r3, [r4, #8]
 80088a2:	89a3      	ldrh	r3, [r4, #12]
 80088a4:	071a      	lsls	r2, r3, #28
 80088a6:	d52f      	bpl.n	8008908 <__swbuf_r+0x84>
 80088a8:	6923      	ldr	r3, [r4, #16]
 80088aa:	b36b      	cbz	r3, 8008908 <__swbuf_r+0x84>
 80088ac:	6923      	ldr	r3, [r4, #16]
 80088ae:	6820      	ldr	r0, [r4, #0]
 80088b0:	1ac0      	subs	r0, r0, r3
 80088b2:	6963      	ldr	r3, [r4, #20]
 80088b4:	b2f6      	uxtb	r6, r6
 80088b6:	4283      	cmp	r3, r0
 80088b8:	4637      	mov	r7, r6
 80088ba:	dc04      	bgt.n	80088c6 <__swbuf_r+0x42>
 80088bc:	4621      	mov	r1, r4
 80088be:	4628      	mov	r0, r5
 80088c0:	f000 f966 	bl	8008b90 <_fflush_r>
 80088c4:	bb30      	cbnz	r0, 8008914 <__swbuf_r+0x90>
 80088c6:	68a3      	ldr	r3, [r4, #8]
 80088c8:	3b01      	subs	r3, #1
 80088ca:	60a3      	str	r3, [r4, #8]
 80088cc:	6823      	ldr	r3, [r4, #0]
 80088ce:	1c5a      	adds	r2, r3, #1
 80088d0:	6022      	str	r2, [r4, #0]
 80088d2:	701e      	strb	r6, [r3, #0]
 80088d4:	6963      	ldr	r3, [r4, #20]
 80088d6:	3001      	adds	r0, #1
 80088d8:	4283      	cmp	r3, r0
 80088da:	d004      	beq.n	80088e6 <__swbuf_r+0x62>
 80088dc:	89a3      	ldrh	r3, [r4, #12]
 80088de:	07db      	lsls	r3, r3, #31
 80088e0:	d506      	bpl.n	80088f0 <__swbuf_r+0x6c>
 80088e2:	2e0a      	cmp	r6, #10
 80088e4:	d104      	bne.n	80088f0 <__swbuf_r+0x6c>
 80088e6:	4621      	mov	r1, r4
 80088e8:	4628      	mov	r0, r5
 80088ea:	f000 f951 	bl	8008b90 <_fflush_r>
 80088ee:	b988      	cbnz	r0, 8008914 <__swbuf_r+0x90>
 80088f0:	4638      	mov	r0, r7
 80088f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088f4:	4b0a      	ldr	r3, [pc, #40]	; (8008920 <__swbuf_r+0x9c>)
 80088f6:	429c      	cmp	r4, r3
 80088f8:	d101      	bne.n	80088fe <__swbuf_r+0x7a>
 80088fa:	68ac      	ldr	r4, [r5, #8]
 80088fc:	e7cf      	b.n	800889e <__swbuf_r+0x1a>
 80088fe:	4b09      	ldr	r3, [pc, #36]	; (8008924 <__swbuf_r+0xa0>)
 8008900:	429c      	cmp	r4, r3
 8008902:	bf08      	it	eq
 8008904:	68ec      	ldreq	r4, [r5, #12]
 8008906:	e7ca      	b.n	800889e <__swbuf_r+0x1a>
 8008908:	4621      	mov	r1, r4
 800890a:	4628      	mov	r0, r5
 800890c:	f000 f81e 	bl	800894c <__swsetup_r>
 8008910:	2800      	cmp	r0, #0
 8008912:	d0cb      	beq.n	80088ac <__swbuf_r+0x28>
 8008914:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008918:	e7ea      	b.n	80088f0 <__swbuf_r+0x6c>
 800891a:	bf00      	nop
 800891c:	0800900c 	.word	0x0800900c
 8008920:	0800902c 	.word	0x0800902c
 8008924:	08008fec 	.word	0x08008fec

08008928 <_write_r>:
 8008928:	b538      	push	{r3, r4, r5, lr}
 800892a:	4d07      	ldr	r5, [pc, #28]	; (8008948 <_write_r+0x20>)
 800892c:	4604      	mov	r4, r0
 800892e:	4608      	mov	r0, r1
 8008930:	4611      	mov	r1, r2
 8008932:	2200      	movs	r2, #0
 8008934:	602a      	str	r2, [r5, #0]
 8008936:	461a      	mov	r2, r3
 8008938:	f7f9 f8cf 	bl	8001ada <_write>
 800893c:	1c43      	adds	r3, r0, #1
 800893e:	d102      	bne.n	8008946 <_write_r+0x1e>
 8008940:	682b      	ldr	r3, [r5, #0]
 8008942:	b103      	cbz	r3, 8008946 <_write_r+0x1e>
 8008944:	6023      	str	r3, [r4, #0]
 8008946:	bd38      	pop	{r3, r4, r5, pc}
 8008948:	2000033c 	.word	0x2000033c

0800894c <__swsetup_r>:
 800894c:	4b32      	ldr	r3, [pc, #200]	; (8008a18 <__swsetup_r+0xcc>)
 800894e:	b570      	push	{r4, r5, r6, lr}
 8008950:	681d      	ldr	r5, [r3, #0]
 8008952:	4606      	mov	r6, r0
 8008954:	460c      	mov	r4, r1
 8008956:	b125      	cbz	r5, 8008962 <__swsetup_r+0x16>
 8008958:	69ab      	ldr	r3, [r5, #24]
 800895a:	b913      	cbnz	r3, 8008962 <__swsetup_r+0x16>
 800895c:	4628      	mov	r0, r5
 800895e:	f7ff f8ad 	bl	8007abc <__sinit>
 8008962:	4b2e      	ldr	r3, [pc, #184]	; (8008a1c <__swsetup_r+0xd0>)
 8008964:	429c      	cmp	r4, r3
 8008966:	d10f      	bne.n	8008988 <__swsetup_r+0x3c>
 8008968:	686c      	ldr	r4, [r5, #4]
 800896a:	89a3      	ldrh	r3, [r4, #12]
 800896c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008970:	0719      	lsls	r1, r3, #28
 8008972:	d42c      	bmi.n	80089ce <__swsetup_r+0x82>
 8008974:	06dd      	lsls	r5, r3, #27
 8008976:	d411      	bmi.n	800899c <__swsetup_r+0x50>
 8008978:	2309      	movs	r3, #9
 800897a:	6033      	str	r3, [r6, #0]
 800897c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008980:	81a3      	strh	r3, [r4, #12]
 8008982:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008986:	e03e      	b.n	8008a06 <__swsetup_r+0xba>
 8008988:	4b25      	ldr	r3, [pc, #148]	; (8008a20 <__swsetup_r+0xd4>)
 800898a:	429c      	cmp	r4, r3
 800898c:	d101      	bne.n	8008992 <__swsetup_r+0x46>
 800898e:	68ac      	ldr	r4, [r5, #8]
 8008990:	e7eb      	b.n	800896a <__swsetup_r+0x1e>
 8008992:	4b24      	ldr	r3, [pc, #144]	; (8008a24 <__swsetup_r+0xd8>)
 8008994:	429c      	cmp	r4, r3
 8008996:	bf08      	it	eq
 8008998:	68ec      	ldreq	r4, [r5, #12]
 800899a:	e7e6      	b.n	800896a <__swsetup_r+0x1e>
 800899c:	0758      	lsls	r0, r3, #29
 800899e:	d512      	bpl.n	80089c6 <__swsetup_r+0x7a>
 80089a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089a2:	b141      	cbz	r1, 80089b6 <__swsetup_r+0x6a>
 80089a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089a8:	4299      	cmp	r1, r3
 80089aa:	d002      	beq.n	80089b2 <__swsetup_r+0x66>
 80089ac:	4630      	mov	r0, r6
 80089ae:	f7ff fcdb 	bl	8008368 <_free_r>
 80089b2:	2300      	movs	r3, #0
 80089b4:	6363      	str	r3, [r4, #52]	; 0x34
 80089b6:	89a3      	ldrh	r3, [r4, #12]
 80089b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80089bc:	81a3      	strh	r3, [r4, #12]
 80089be:	2300      	movs	r3, #0
 80089c0:	6063      	str	r3, [r4, #4]
 80089c2:	6923      	ldr	r3, [r4, #16]
 80089c4:	6023      	str	r3, [r4, #0]
 80089c6:	89a3      	ldrh	r3, [r4, #12]
 80089c8:	f043 0308 	orr.w	r3, r3, #8
 80089cc:	81a3      	strh	r3, [r4, #12]
 80089ce:	6923      	ldr	r3, [r4, #16]
 80089d0:	b94b      	cbnz	r3, 80089e6 <__swsetup_r+0x9a>
 80089d2:	89a3      	ldrh	r3, [r4, #12]
 80089d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80089d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089dc:	d003      	beq.n	80089e6 <__swsetup_r+0x9a>
 80089de:	4621      	mov	r1, r4
 80089e0:	4630      	mov	r0, r6
 80089e2:	f000 f95b 	bl	8008c9c <__smakebuf_r>
 80089e6:	89a0      	ldrh	r0, [r4, #12]
 80089e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089ec:	f010 0301 	ands.w	r3, r0, #1
 80089f0:	d00a      	beq.n	8008a08 <__swsetup_r+0xbc>
 80089f2:	2300      	movs	r3, #0
 80089f4:	60a3      	str	r3, [r4, #8]
 80089f6:	6963      	ldr	r3, [r4, #20]
 80089f8:	425b      	negs	r3, r3
 80089fa:	61a3      	str	r3, [r4, #24]
 80089fc:	6923      	ldr	r3, [r4, #16]
 80089fe:	b943      	cbnz	r3, 8008a12 <__swsetup_r+0xc6>
 8008a00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008a04:	d1ba      	bne.n	800897c <__swsetup_r+0x30>
 8008a06:	bd70      	pop	{r4, r5, r6, pc}
 8008a08:	0781      	lsls	r1, r0, #30
 8008a0a:	bf58      	it	pl
 8008a0c:	6963      	ldrpl	r3, [r4, #20]
 8008a0e:	60a3      	str	r3, [r4, #8]
 8008a10:	e7f4      	b.n	80089fc <__swsetup_r+0xb0>
 8008a12:	2000      	movs	r0, #0
 8008a14:	e7f7      	b.n	8008a06 <__swsetup_r+0xba>
 8008a16:	bf00      	nop
 8008a18:	2000000c 	.word	0x2000000c
 8008a1c:	0800900c 	.word	0x0800900c
 8008a20:	0800902c 	.word	0x0800902c
 8008a24:	08008fec 	.word	0x08008fec

08008a28 <__assert_func>:
 8008a28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a2a:	4614      	mov	r4, r2
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	4b09      	ldr	r3, [pc, #36]	; (8008a54 <__assert_func+0x2c>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4605      	mov	r5, r0
 8008a34:	68d8      	ldr	r0, [r3, #12]
 8008a36:	b14c      	cbz	r4, 8008a4c <__assert_func+0x24>
 8008a38:	4b07      	ldr	r3, [pc, #28]	; (8008a58 <__assert_func+0x30>)
 8008a3a:	9100      	str	r1, [sp, #0]
 8008a3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a40:	4906      	ldr	r1, [pc, #24]	; (8008a5c <__assert_func+0x34>)
 8008a42:	462b      	mov	r3, r5
 8008a44:	f000 f8e0 	bl	8008c08 <fiprintf>
 8008a48:	f000 f9a5 	bl	8008d96 <abort>
 8008a4c:	4b04      	ldr	r3, [pc, #16]	; (8008a60 <__assert_func+0x38>)
 8008a4e:	461c      	mov	r4, r3
 8008a50:	e7f3      	b.n	8008a3a <__assert_func+0x12>
 8008a52:	bf00      	nop
 8008a54:	2000000c 	.word	0x2000000c
 8008a58:	080091b5 	.word	0x080091b5
 8008a5c:	080091c2 	.word	0x080091c2
 8008a60:	080091f0 	.word	0x080091f0

08008a64 <_close_r>:
 8008a64:	b538      	push	{r3, r4, r5, lr}
 8008a66:	4d06      	ldr	r5, [pc, #24]	; (8008a80 <_close_r+0x1c>)
 8008a68:	2300      	movs	r3, #0
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	4608      	mov	r0, r1
 8008a6e:	602b      	str	r3, [r5, #0]
 8008a70:	f7f9 f84f 	bl	8001b12 <_close>
 8008a74:	1c43      	adds	r3, r0, #1
 8008a76:	d102      	bne.n	8008a7e <_close_r+0x1a>
 8008a78:	682b      	ldr	r3, [r5, #0]
 8008a7a:	b103      	cbz	r3, 8008a7e <_close_r+0x1a>
 8008a7c:	6023      	str	r3, [r4, #0]
 8008a7e:	bd38      	pop	{r3, r4, r5, pc}
 8008a80:	2000033c 	.word	0x2000033c

08008a84 <__sflush_r>:
 8008a84:	898a      	ldrh	r2, [r1, #12]
 8008a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a8a:	4605      	mov	r5, r0
 8008a8c:	0710      	lsls	r0, r2, #28
 8008a8e:	460c      	mov	r4, r1
 8008a90:	d458      	bmi.n	8008b44 <__sflush_r+0xc0>
 8008a92:	684b      	ldr	r3, [r1, #4]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	dc05      	bgt.n	8008aa4 <__sflush_r+0x20>
 8008a98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	dc02      	bgt.n	8008aa4 <__sflush_r+0x20>
 8008a9e:	2000      	movs	r0, #0
 8008aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008aa6:	2e00      	cmp	r6, #0
 8008aa8:	d0f9      	beq.n	8008a9e <__sflush_r+0x1a>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ab0:	682f      	ldr	r7, [r5, #0]
 8008ab2:	602b      	str	r3, [r5, #0]
 8008ab4:	d032      	beq.n	8008b1c <__sflush_r+0x98>
 8008ab6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ab8:	89a3      	ldrh	r3, [r4, #12]
 8008aba:	075a      	lsls	r2, r3, #29
 8008abc:	d505      	bpl.n	8008aca <__sflush_r+0x46>
 8008abe:	6863      	ldr	r3, [r4, #4]
 8008ac0:	1ac0      	subs	r0, r0, r3
 8008ac2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ac4:	b10b      	cbz	r3, 8008aca <__sflush_r+0x46>
 8008ac6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ac8:	1ac0      	subs	r0, r0, r3
 8008aca:	2300      	movs	r3, #0
 8008acc:	4602      	mov	r2, r0
 8008ace:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ad0:	6a21      	ldr	r1, [r4, #32]
 8008ad2:	4628      	mov	r0, r5
 8008ad4:	47b0      	blx	r6
 8008ad6:	1c43      	adds	r3, r0, #1
 8008ad8:	89a3      	ldrh	r3, [r4, #12]
 8008ada:	d106      	bne.n	8008aea <__sflush_r+0x66>
 8008adc:	6829      	ldr	r1, [r5, #0]
 8008ade:	291d      	cmp	r1, #29
 8008ae0:	d82c      	bhi.n	8008b3c <__sflush_r+0xb8>
 8008ae2:	4a2a      	ldr	r2, [pc, #168]	; (8008b8c <__sflush_r+0x108>)
 8008ae4:	40ca      	lsrs	r2, r1
 8008ae6:	07d6      	lsls	r6, r2, #31
 8008ae8:	d528      	bpl.n	8008b3c <__sflush_r+0xb8>
 8008aea:	2200      	movs	r2, #0
 8008aec:	6062      	str	r2, [r4, #4]
 8008aee:	04d9      	lsls	r1, r3, #19
 8008af0:	6922      	ldr	r2, [r4, #16]
 8008af2:	6022      	str	r2, [r4, #0]
 8008af4:	d504      	bpl.n	8008b00 <__sflush_r+0x7c>
 8008af6:	1c42      	adds	r2, r0, #1
 8008af8:	d101      	bne.n	8008afe <__sflush_r+0x7a>
 8008afa:	682b      	ldr	r3, [r5, #0]
 8008afc:	b903      	cbnz	r3, 8008b00 <__sflush_r+0x7c>
 8008afe:	6560      	str	r0, [r4, #84]	; 0x54
 8008b00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b02:	602f      	str	r7, [r5, #0]
 8008b04:	2900      	cmp	r1, #0
 8008b06:	d0ca      	beq.n	8008a9e <__sflush_r+0x1a>
 8008b08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b0c:	4299      	cmp	r1, r3
 8008b0e:	d002      	beq.n	8008b16 <__sflush_r+0x92>
 8008b10:	4628      	mov	r0, r5
 8008b12:	f7ff fc29 	bl	8008368 <_free_r>
 8008b16:	2000      	movs	r0, #0
 8008b18:	6360      	str	r0, [r4, #52]	; 0x34
 8008b1a:	e7c1      	b.n	8008aa0 <__sflush_r+0x1c>
 8008b1c:	6a21      	ldr	r1, [r4, #32]
 8008b1e:	2301      	movs	r3, #1
 8008b20:	4628      	mov	r0, r5
 8008b22:	47b0      	blx	r6
 8008b24:	1c41      	adds	r1, r0, #1
 8008b26:	d1c7      	bne.n	8008ab8 <__sflush_r+0x34>
 8008b28:	682b      	ldr	r3, [r5, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d0c4      	beq.n	8008ab8 <__sflush_r+0x34>
 8008b2e:	2b1d      	cmp	r3, #29
 8008b30:	d001      	beq.n	8008b36 <__sflush_r+0xb2>
 8008b32:	2b16      	cmp	r3, #22
 8008b34:	d101      	bne.n	8008b3a <__sflush_r+0xb6>
 8008b36:	602f      	str	r7, [r5, #0]
 8008b38:	e7b1      	b.n	8008a9e <__sflush_r+0x1a>
 8008b3a:	89a3      	ldrh	r3, [r4, #12]
 8008b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b40:	81a3      	strh	r3, [r4, #12]
 8008b42:	e7ad      	b.n	8008aa0 <__sflush_r+0x1c>
 8008b44:	690f      	ldr	r7, [r1, #16]
 8008b46:	2f00      	cmp	r7, #0
 8008b48:	d0a9      	beq.n	8008a9e <__sflush_r+0x1a>
 8008b4a:	0793      	lsls	r3, r2, #30
 8008b4c:	680e      	ldr	r6, [r1, #0]
 8008b4e:	bf08      	it	eq
 8008b50:	694b      	ldreq	r3, [r1, #20]
 8008b52:	600f      	str	r7, [r1, #0]
 8008b54:	bf18      	it	ne
 8008b56:	2300      	movne	r3, #0
 8008b58:	eba6 0807 	sub.w	r8, r6, r7
 8008b5c:	608b      	str	r3, [r1, #8]
 8008b5e:	f1b8 0f00 	cmp.w	r8, #0
 8008b62:	dd9c      	ble.n	8008a9e <__sflush_r+0x1a>
 8008b64:	6a21      	ldr	r1, [r4, #32]
 8008b66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b68:	4643      	mov	r3, r8
 8008b6a:	463a      	mov	r2, r7
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	47b0      	blx	r6
 8008b70:	2800      	cmp	r0, #0
 8008b72:	dc06      	bgt.n	8008b82 <__sflush_r+0xfe>
 8008b74:	89a3      	ldrh	r3, [r4, #12]
 8008b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b7a:	81a3      	strh	r3, [r4, #12]
 8008b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b80:	e78e      	b.n	8008aa0 <__sflush_r+0x1c>
 8008b82:	4407      	add	r7, r0
 8008b84:	eba8 0800 	sub.w	r8, r8, r0
 8008b88:	e7e9      	b.n	8008b5e <__sflush_r+0xda>
 8008b8a:	bf00      	nop
 8008b8c:	20400001 	.word	0x20400001

08008b90 <_fflush_r>:
 8008b90:	b538      	push	{r3, r4, r5, lr}
 8008b92:	690b      	ldr	r3, [r1, #16]
 8008b94:	4605      	mov	r5, r0
 8008b96:	460c      	mov	r4, r1
 8008b98:	b913      	cbnz	r3, 8008ba0 <_fflush_r+0x10>
 8008b9a:	2500      	movs	r5, #0
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ba0:	b118      	cbz	r0, 8008baa <_fflush_r+0x1a>
 8008ba2:	6983      	ldr	r3, [r0, #24]
 8008ba4:	b90b      	cbnz	r3, 8008baa <_fflush_r+0x1a>
 8008ba6:	f7fe ff89 	bl	8007abc <__sinit>
 8008baa:	4b14      	ldr	r3, [pc, #80]	; (8008bfc <_fflush_r+0x6c>)
 8008bac:	429c      	cmp	r4, r3
 8008bae:	d11b      	bne.n	8008be8 <_fflush_r+0x58>
 8008bb0:	686c      	ldr	r4, [r5, #4]
 8008bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d0ef      	beq.n	8008b9a <_fflush_r+0xa>
 8008bba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008bbc:	07d0      	lsls	r0, r2, #31
 8008bbe:	d404      	bmi.n	8008bca <_fflush_r+0x3a>
 8008bc0:	0599      	lsls	r1, r3, #22
 8008bc2:	d402      	bmi.n	8008bca <_fflush_r+0x3a>
 8008bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bc6:	f7ff f81c 	bl	8007c02 <__retarget_lock_acquire_recursive>
 8008bca:	4628      	mov	r0, r5
 8008bcc:	4621      	mov	r1, r4
 8008bce:	f7ff ff59 	bl	8008a84 <__sflush_r>
 8008bd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bd4:	07da      	lsls	r2, r3, #31
 8008bd6:	4605      	mov	r5, r0
 8008bd8:	d4e0      	bmi.n	8008b9c <_fflush_r+0xc>
 8008bda:	89a3      	ldrh	r3, [r4, #12]
 8008bdc:	059b      	lsls	r3, r3, #22
 8008bde:	d4dd      	bmi.n	8008b9c <_fflush_r+0xc>
 8008be0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008be2:	f7ff f80f 	bl	8007c04 <__retarget_lock_release_recursive>
 8008be6:	e7d9      	b.n	8008b9c <_fflush_r+0xc>
 8008be8:	4b05      	ldr	r3, [pc, #20]	; (8008c00 <_fflush_r+0x70>)
 8008bea:	429c      	cmp	r4, r3
 8008bec:	d101      	bne.n	8008bf2 <_fflush_r+0x62>
 8008bee:	68ac      	ldr	r4, [r5, #8]
 8008bf0:	e7df      	b.n	8008bb2 <_fflush_r+0x22>
 8008bf2:	4b04      	ldr	r3, [pc, #16]	; (8008c04 <_fflush_r+0x74>)
 8008bf4:	429c      	cmp	r4, r3
 8008bf6:	bf08      	it	eq
 8008bf8:	68ec      	ldreq	r4, [r5, #12]
 8008bfa:	e7da      	b.n	8008bb2 <_fflush_r+0x22>
 8008bfc:	0800900c 	.word	0x0800900c
 8008c00:	0800902c 	.word	0x0800902c
 8008c04:	08008fec 	.word	0x08008fec

08008c08 <fiprintf>:
 8008c08:	b40e      	push	{r1, r2, r3}
 8008c0a:	b503      	push	{r0, r1, lr}
 8008c0c:	4601      	mov	r1, r0
 8008c0e:	ab03      	add	r3, sp, #12
 8008c10:	4805      	ldr	r0, [pc, #20]	; (8008c28 <fiprintf+0x20>)
 8008c12:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c16:	6800      	ldr	r0, [r0, #0]
 8008c18:	9301      	str	r3, [sp, #4]
 8008c1a:	f7ff fcaf 	bl	800857c <_vfiprintf_r>
 8008c1e:	b002      	add	sp, #8
 8008c20:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c24:	b003      	add	sp, #12
 8008c26:	4770      	bx	lr
 8008c28:	2000000c 	.word	0x2000000c

08008c2c <_lseek_r>:
 8008c2c:	b538      	push	{r3, r4, r5, lr}
 8008c2e:	4d07      	ldr	r5, [pc, #28]	; (8008c4c <_lseek_r+0x20>)
 8008c30:	4604      	mov	r4, r0
 8008c32:	4608      	mov	r0, r1
 8008c34:	4611      	mov	r1, r2
 8008c36:	2200      	movs	r2, #0
 8008c38:	602a      	str	r2, [r5, #0]
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	f7f8 ff90 	bl	8001b60 <_lseek>
 8008c40:	1c43      	adds	r3, r0, #1
 8008c42:	d102      	bne.n	8008c4a <_lseek_r+0x1e>
 8008c44:	682b      	ldr	r3, [r5, #0]
 8008c46:	b103      	cbz	r3, 8008c4a <_lseek_r+0x1e>
 8008c48:	6023      	str	r3, [r4, #0]
 8008c4a:	bd38      	pop	{r3, r4, r5, pc}
 8008c4c:	2000033c 	.word	0x2000033c

08008c50 <__swhatbuf_r>:
 8008c50:	b570      	push	{r4, r5, r6, lr}
 8008c52:	460e      	mov	r6, r1
 8008c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c58:	2900      	cmp	r1, #0
 8008c5a:	b096      	sub	sp, #88	; 0x58
 8008c5c:	4614      	mov	r4, r2
 8008c5e:	461d      	mov	r5, r3
 8008c60:	da08      	bge.n	8008c74 <__swhatbuf_r+0x24>
 8008c62:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008c66:	2200      	movs	r2, #0
 8008c68:	602a      	str	r2, [r5, #0]
 8008c6a:	061a      	lsls	r2, r3, #24
 8008c6c:	d410      	bmi.n	8008c90 <__swhatbuf_r+0x40>
 8008c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c72:	e00e      	b.n	8008c92 <__swhatbuf_r+0x42>
 8008c74:	466a      	mov	r2, sp
 8008c76:	f000 f895 	bl	8008da4 <_fstat_r>
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	dbf1      	blt.n	8008c62 <__swhatbuf_r+0x12>
 8008c7e:	9a01      	ldr	r2, [sp, #4]
 8008c80:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c84:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c88:	425a      	negs	r2, r3
 8008c8a:	415a      	adcs	r2, r3
 8008c8c:	602a      	str	r2, [r5, #0]
 8008c8e:	e7ee      	b.n	8008c6e <__swhatbuf_r+0x1e>
 8008c90:	2340      	movs	r3, #64	; 0x40
 8008c92:	2000      	movs	r0, #0
 8008c94:	6023      	str	r3, [r4, #0]
 8008c96:	b016      	add	sp, #88	; 0x58
 8008c98:	bd70      	pop	{r4, r5, r6, pc}
	...

08008c9c <__smakebuf_r>:
 8008c9c:	898b      	ldrh	r3, [r1, #12]
 8008c9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ca0:	079d      	lsls	r5, r3, #30
 8008ca2:	4606      	mov	r6, r0
 8008ca4:	460c      	mov	r4, r1
 8008ca6:	d507      	bpl.n	8008cb8 <__smakebuf_r+0x1c>
 8008ca8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008cac:	6023      	str	r3, [r4, #0]
 8008cae:	6123      	str	r3, [r4, #16]
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	6163      	str	r3, [r4, #20]
 8008cb4:	b002      	add	sp, #8
 8008cb6:	bd70      	pop	{r4, r5, r6, pc}
 8008cb8:	ab01      	add	r3, sp, #4
 8008cba:	466a      	mov	r2, sp
 8008cbc:	f7ff ffc8 	bl	8008c50 <__swhatbuf_r>
 8008cc0:	9900      	ldr	r1, [sp, #0]
 8008cc2:	4605      	mov	r5, r0
 8008cc4:	4630      	mov	r0, r6
 8008cc6:	f7ff fbbb 	bl	8008440 <_malloc_r>
 8008cca:	b948      	cbnz	r0, 8008ce0 <__smakebuf_r+0x44>
 8008ccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cd0:	059a      	lsls	r2, r3, #22
 8008cd2:	d4ef      	bmi.n	8008cb4 <__smakebuf_r+0x18>
 8008cd4:	f023 0303 	bic.w	r3, r3, #3
 8008cd8:	f043 0302 	orr.w	r3, r3, #2
 8008cdc:	81a3      	strh	r3, [r4, #12]
 8008cde:	e7e3      	b.n	8008ca8 <__smakebuf_r+0xc>
 8008ce0:	4b0d      	ldr	r3, [pc, #52]	; (8008d18 <__smakebuf_r+0x7c>)
 8008ce2:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ce4:	89a3      	ldrh	r3, [r4, #12]
 8008ce6:	6020      	str	r0, [r4, #0]
 8008ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cec:	81a3      	strh	r3, [r4, #12]
 8008cee:	9b00      	ldr	r3, [sp, #0]
 8008cf0:	6163      	str	r3, [r4, #20]
 8008cf2:	9b01      	ldr	r3, [sp, #4]
 8008cf4:	6120      	str	r0, [r4, #16]
 8008cf6:	b15b      	cbz	r3, 8008d10 <__smakebuf_r+0x74>
 8008cf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	f000 f863 	bl	8008dc8 <_isatty_r>
 8008d02:	b128      	cbz	r0, 8008d10 <__smakebuf_r+0x74>
 8008d04:	89a3      	ldrh	r3, [r4, #12]
 8008d06:	f023 0303 	bic.w	r3, r3, #3
 8008d0a:	f043 0301 	orr.w	r3, r3, #1
 8008d0e:	81a3      	strh	r3, [r4, #12]
 8008d10:	89a0      	ldrh	r0, [r4, #12]
 8008d12:	4305      	orrs	r5, r0
 8008d14:	81a5      	strh	r5, [r4, #12]
 8008d16:	e7cd      	b.n	8008cb4 <__smakebuf_r+0x18>
 8008d18:	08007a55 	.word	0x08007a55

08008d1c <__ascii_mbtowc>:
 8008d1c:	b082      	sub	sp, #8
 8008d1e:	b901      	cbnz	r1, 8008d22 <__ascii_mbtowc+0x6>
 8008d20:	a901      	add	r1, sp, #4
 8008d22:	b142      	cbz	r2, 8008d36 <__ascii_mbtowc+0x1a>
 8008d24:	b14b      	cbz	r3, 8008d3a <__ascii_mbtowc+0x1e>
 8008d26:	7813      	ldrb	r3, [r2, #0]
 8008d28:	600b      	str	r3, [r1, #0]
 8008d2a:	7812      	ldrb	r2, [r2, #0]
 8008d2c:	1e10      	subs	r0, r2, #0
 8008d2e:	bf18      	it	ne
 8008d30:	2001      	movne	r0, #1
 8008d32:	b002      	add	sp, #8
 8008d34:	4770      	bx	lr
 8008d36:	4610      	mov	r0, r2
 8008d38:	e7fb      	b.n	8008d32 <__ascii_mbtowc+0x16>
 8008d3a:	f06f 0001 	mvn.w	r0, #1
 8008d3e:	e7f8      	b.n	8008d32 <__ascii_mbtowc+0x16>

08008d40 <__malloc_lock>:
 8008d40:	4801      	ldr	r0, [pc, #4]	; (8008d48 <__malloc_lock+0x8>)
 8008d42:	f7fe bf5e 	b.w	8007c02 <__retarget_lock_acquire_recursive>
 8008d46:	bf00      	nop
 8008d48:	20000330 	.word	0x20000330

08008d4c <__malloc_unlock>:
 8008d4c:	4801      	ldr	r0, [pc, #4]	; (8008d54 <__malloc_unlock+0x8>)
 8008d4e:	f7fe bf59 	b.w	8007c04 <__retarget_lock_release_recursive>
 8008d52:	bf00      	nop
 8008d54:	20000330 	.word	0x20000330

08008d58 <_read_r>:
 8008d58:	b538      	push	{r3, r4, r5, lr}
 8008d5a:	4d07      	ldr	r5, [pc, #28]	; (8008d78 <_read_r+0x20>)
 8008d5c:	4604      	mov	r4, r0
 8008d5e:	4608      	mov	r0, r1
 8008d60:	4611      	mov	r1, r2
 8008d62:	2200      	movs	r2, #0
 8008d64:	602a      	str	r2, [r5, #0]
 8008d66:	461a      	mov	r2, r3
 8008d68:	f7f8 fe9a 	bl	8001aa0 <_read>
 8008d6c:	1c43      	adds	r3, r0, #1
 8008d6e:	d102      	bne.n	8008d76 <_read_r+0x1e>
 8008d70:	682b      	ldr	r3, [r5, #0]
 8008d72:	b103      	cbz	r3, 8008d76 <_read_r+0x1e>
 8008d74:	6023      	str	r3, [r4, #0]
 8008d76:	bd38      	pop	{r3, r4, r5, pc}
 8008d78:	2000033c 	.word	0x2000033c

08008d7c <__ascii_wctomb>:
 8008d7c:	b149      	cbz	r1, 8008d92 <__ascii_wctomb+0x16>
 8008d7e:	2aff      	cmp	r2, #255	; 0xff
 8008d80:	bf85      	ittet	hi
 8008d82:	238a      	movhi	r3, #138	; 0x8a
 8008d84:	6003      	strhi	r3, [r0, #0]
 8008d86:	700a      	strbls	r2, [r1, #0]
 8008d88:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008d8c:	bf98      	it	ls
 8008d8e:	2001      	movls	r0, #1
 8008d90:	4770      	bx	lr
 8008d92:	4608      	mov	r0, r1
 8008d94:	4770      	bx	lr

08008d96 <abort>:
 8008d96:	b508      	push	{r3, lr}
 8008d98:	2006      	movs	r0, #6
 8008d9a:	f000 f84d 	bl	8008e38 <raise>
 8008d9e:	2001      	movs	r0, #1
 8008da0:	f7f8 fe74 	bl	8001a8c <_exit>

08008da4 <_fstat_r>:
 8008da4:	b538      	push	{r3, r4, r5, lr}
 8008da6:	4d07      	ldr	r5, [pc, #28]	; (8008dc4 <_fstat_r+0x20>)
 8008da8:	2300      	movs	r3, #0
 8008daa:	4604      	mov	r4, r0
 8008dac:	4608      	mov	r0, r1
 8008dae:	4611      	mov	r1, r2
 8008db0:	602b      	str	r3, [r5, #0]
 8008db2:	f7f8 feba 	bl	8001b2a <_fstat>
 8008db6:	1c43      	adds	r3, r0, #1
 8008db8:	d102      	bne.n	8008dc0 <_fstat_r+0x1c>
 8008dba:	682b      	ldr	r3, [r5, #0]
 8008dbc:	b103      	cbz	r3, 8008dc0 <_fstat_r+0x1c>
 8008dbe:	6023      	str	r3, [r4, #0]
 8008dc0:	bd38      	pop	{r3, r4, r5, pc}
 8008dc2:	bf00      	nop
 8008dc4:	2000033c 	.word	0x2000033c

08008dc8 <_isatty_r>:
 8008dc8:	b538      	push	{r3, r4, r5, lr}
 8008dca:	4d06      	ldr	r5, [pc, #24]	; (8008de4 <_isatty_r+0x1c>)
 8008dcc:	2300      	movs	r3, #0
 8008dce:	4604      	mov	r4, r0
 8008dd0:	4608      	mov	r0, r1
 8008dd2:	602b      	str	r3, [r5, #0]
 8008dd4:	f7f8 feb9 	bl	8001b4a <_isatty>
 8008dd8:	1c43      	adds	r3, r0, #1
 8008dda:	d102      	bne.n	8008de2 <_isatty_r+0x1a>
 8008ddc:	682b      	ldr	r3, [r5, #0]
 8008dde:	b103      	cbz	r3, 8008de2 <_isatty_r+0x1a>
 8008de0:	6023      	str	r3, [r4, #0]
 8008de2:	bd38      	pop	{r3, r4, r5, pc}
 8008de4:	2000033c 	.word	0x2000033c

08008de8 <_raise_r>:
 8008de8:	291f      	cmp	r1, #31
 8008dea:	b538      	push	{r3, r4, r5, lr}
 8008dec:	4604      	mov	r4, r0
 8008dee:	460d      	mov	r5, r1
 8008df0:	d904      	bls.n	8008dfc <_raise_r+0x14>
 8008df2:	2316      	movs	r3, #22
 8008df4:	6003      	str	r3, [r0, #0]
 8008df6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dfa:	bd38      	pop	{r3, r4, r5, pc}
 8008dfc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008dfe:	b112      	cbz	r2, 8008e06 <_raise_r+0x1e>
 8008e00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e04:	b94b      	cbnz	r3, 8008e1a <_raise_r+0x32>
 8008e06:	4620      	mov	r0, r4
 8008e08:	f000 f830 	bl	8008e6c <_getpid_r>
 8008e0c:	462a      	mov	r2, r5
 8008e0e:	4601      	mov	r1, r0
 8008e10:	4620      	mov	r0, r4
 8008e12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e16:	f000 b817 	b.w	8008e48 <_kill_r>
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d00a      	beq.n	8008e34 <_raise_r+0x4c>
 8008e1e:	1c59      	adds	r1, r3, #1
 8008e20:	d103      	bne.n	8008e2a <_raise_r+0x42>
 8008e22:	2316      	movs	r3, #22
 8008e24:	6003      	str	r3, [r0, #0]
 8008e26:	2001      	movs	r0, #1
 8008e28:	e7e7      	b.n	8008dfa <_raise_r+0x12>
 8008e2a:	2400      	movs	r4, #0
 8008e2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e30:	4628      	mov	r0, r5
 8008e32:	4798      	blx	r3
 8008e34:	2000      	movs	r0, #0
 8008e36:	e7e0      	b.n	8008dfa <_raise_r+0x12>

08008e38 <raise>:
 8008e38:	4b02      	ldr	r3, [pc, #8]	; (8008e44 <raise+0xc>)
 8008e3a:	4601      	mov	r1, r0
 8008e3c:	6818      	ldr	r0, [r3, #0]
 8008e3e:	f7ff bfd3 	b.w	8008de8 <_raise_r>
 8008e42:	bf00      	nop
 8008e44:	2000000c 	.word	0x2000000c

08008e48 <_kill_r>:
 8008e48:	b538      	push	{r3, r4, r5, lr}
 8008e4a:	4d07      	ldr	r5, [pc, #28]	; (8008e68 <_kill_r+0x20>)
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	4604      	mov	r4, r0
 8008e50:	4608      	mov	r0, r1
 8008e52:	4611      	mov	r1, r2
 8008e54:	602b      	str	r3, [r5, #0]
 8008e56:	f7f8 fe09 	bl	8001a6c <_kill>
 8008e5a:	1c43      	adds	r3, r0, #1
 8008e5c:	d102      	bne.n	8008e64 <_kill_r+0x1c>
 8008e5e:	682b      	ldr	r3, [r5, #0]
 8008e60:	b103      	cbz	r3, 8008e64 <_kill_r+0x1c>
 8008e62:	6023      	str	r3, [r4, #0]
 8008e64:	bd38      	pop	{r3, r4, r5, pc}
 8008e66:	bf00      	nop
 8008e68:	2000033c 	.word	0x2000033c

08008e6c <_getpid_r>:
 8008e6c:	f7f8 bdf6 	b.w	8001a5c <_getpid>

08008e70 <_init>:
 8008e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e72:	bf00      	nop
 8008e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e76:	bc08      	pop	{r3}
 8008e78:	469e      	mov	lr, r3
 8008e7a:	4770      	bx	lr

08008e7c <_fini>:
 8008e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e7e:	bf00      	nop
 8008e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e82:	bc08      	pop	{r3}
 8008e84:	469e      	mov	lr, r3
 8008e86:	4770      	bx	lr
